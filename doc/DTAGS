<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.6" doxygen_gitid="4586b5cfaa3d46d51f6a51882951d15644c49edf">
  <compound kind="file">
    <name>iterateGeometry.cpp</name>
    <path>solvers/iterateGeometry/</path>
    <filename>iterateGeometry_8cpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="geometryMotion_8hpp" name="geometryMotion.hpp" local="yes" imported="no">geometryMotion.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="setProperty_8hpp" name="setProperty.hpp" local="yes" imported="no">setProperty.hpp</includes>
    <includes id="setSurfaceGeometry_8hpp" name="setSurfaceGeometry.hpp" local="yes" imported="no">setSurfaceGeometry.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>iterateGeometry_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>createDEMComponents.hpp</name>
    <path>solvers/sphereGranFlow/</path>
    <filename>createDEMComponents_8hpp.html</filename>
    <member kind="function">
      <type></type>
      <name>REPORT</name>
      <anchorfile>createDEMComponents_8hpp.html</anchorfile>
      <anchor>a029856775c984eaea3b78889ae984fb1</anchor>
      <arglist>(0)&lt;&lt;&quot;\nReading sphere particles . . .&quot;&lt;&lt; endREPORT</arglist>
    </member>
    <member kind="function">
      <type>sphereParticles</type>
      <name>sphParticles</name>
      <anchorfile>createDEMComponents_8hpp.html</anchorfile>
      <anchor>a87315fd3baecad18f39f203ffb15047f</anchor>
      <arglist>(Control, proprties)</arglist>
    </member>
    <member kind="variable">
      <type>auto</type>
      <name>sphInsertion</name>
      <anchorfile>createDEMComponents_8hpp.html</anchorfile>
      <anchor>a84c40199c91da9a7888debd293f2d7b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>auto</type>
      <name>interactionPtr</name>
      <anchorfile>createDEMComponents_8hpp.html</anchorfile>
      <anchor>ae407a77fb97d4e6375d136c1add58d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>auto &amp;</type>
      <name>sphInteraction</name>
      <anchorfile>createDEMComponents_8hpp.html</anchorfile>
      <anchor>affb29a66c2605b3f871b00987e41053c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphereGranFlow.cpp</name>
    <path>solvers/sphereGranFlow/</path>
    <filename>sphereGranFlow_8cpp.html</filename>
    <includes id="property_8hpp" name="property.hpp" local="yes" imported="no">property.hpp</includes>
    <includes id="geometry_8hpp" name="geometry.hpp" local="yes" imported="no">geometry.hpp</includes>
    <includes id="sphereParticles_8hpp" name="sphereParticles.hpp" local="yes" imported="no">sphereParticles.hpp</includes>
    <includes id="Insertions_8hpp" name="Insertions.hpp" local="yes" imported="no">Insertions.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="contactSearch_8hpp" name="contactSearch.hpp" local="yes" imported="no">contactSearch.hpp</includes>
    <includes id="sphereInteraction_8hpp" name="sphereInteraction.hpp" local="yes" imported="no">sphereInteraction.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="setProperty_8hpp" name="setProperty.hpp" local="yes" imported="no">setProperty.hpp</includes>
    <includes id="setSurfaceGeometry_8hpp" name="setSurfaceGeometry.hpp" local="yes" imported="no">setSurfaceGeometry.hpp</includes>
    <includes id="createDEMComponents_8hpp" name="createDEMComponents.hpp" local="yes" imported="no">createDEMComponents.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>sphereGranFlow_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>demComponent.hpp</name>
    <path>src/demComponent/</path>
    <filename>demComponent_8hpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <class kind="class">pFlow::demComponent</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>demGeometry.hpp</name>
    <path>src/Geometry/geometry/</path>
    <filename>demGeometry_8hpp.html</filename>
    <includes id="demComponent_8hpp" name="demComponent.hpp" local="yes" imported="no">demComponent.hpp</includes>
    <class kind="class">pFlow::demGeometry</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>geometry.cpp</name>
    <path>src/Geometry/geometry/</path>
    <filename>geometry_8cpp.html</filename>
    <includes id="geometry_8hpp" name="geometry.hpp" local="yes" imported="no">geometry.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>geometry.hpp</name>
    <path>src/Geometry/geometry/</path>
    <filename>geometry_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="demGeometry_8hpp" name="demGeometry.hpp" local="yes" imported="no">demGeometry.hpp</includes>
    <includes id="property_8hpp" name="property.hpp" local="yes" imported="no">property.hpp</includes>
    <includes id="Fields_8hpp" name="Fields.hpp" local="yes" imported="no">Fields.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="multiTriSurface_8hpp" name="multiTriSurface.hpp" local="yes" imported="no">multiTriSurface.hpp</includes>
    <includes id="triSurfaceFields_8hpp" name="triSurfaceFields.hpp" local="yes" imported="no">triSurfaceFields.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::geometry</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>geometryMotion.cpp</name>
    <path>src/Geometry/geometryMotion/</path>
    <filename>geometryMotion_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>geometryMotion.hpp</name>
    <path>src/Geometry/geometryMotion/</path>
    <filename>geometryMotion_8hpp.html</filename>
    <includes id="geometry_8hpp" name="geometry.hpp" local="yes" imported="no">geometry.hpp</includes>
    <includes id="VectorDuals_8hpp" name="VectorDuals.hpp" local="yes" imported="no">VectorDuals.hpp</includes>
    <includes id="geometryMotion_8cpp" name="geometryMotion.cpp" local="yes" imported="no">geometryMotion.cpp</includes>
    <includes id="geometryMotionsInstantiate_8cpp" name="geometryMotionsInstantiate.cpp" local="yes" imported="no">geometryMotionsInstantiate.cpp</includes>
    <class kind="class">pFlow::geometryMotion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>geometryMotions.cpp</name>
    <path>src/Geometry/geometryMotion/</path>
    <filename>geometryMotions_8cpp.html</filename>
    <includes id="geometryMotions_8hpp" name="geometryMotions.hpp" local="yes" imported="no">geometryMotions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>geometryMotions.hpp</name>
    <path>src/Geometry/geometryMotion/</path>
    <filename>geometryMotions_8hpp.html</filename>
    <includes id="geometryMotion_8hpp" name="geometryMotion.hpp" local="yes" imported="no">geometryMotion.hpp</includes>
    <includes id="fixedWall_8hpp" name="fixedWall.hpp" local="yes" imported="no">fixedWall.hpp</includes>
    <includes id="rotatingAxisMotion_8hpp" name="rotatingAxisMotion.hpp" local="yes" imported="no">rotatingAxisMotion.hpp</includes>
    <includes id="multiRotatingAxisMotion_8hpp" name="multiRotatingAxisMotion.hpp" local="yes" imported="no">multiRotatingAxisMotion.hpp</includes>
    <includes id="vibratingMotion_8hpp" name="vibratingMotion.hpp" local="yes" imported="no">vibratingMotion.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>geometryMotion&lt; vibratingMotion &gt;</type>
      <name>vibratingMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a31ff71fecb4b460d162393758ffc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; rotatingAxisMotion &gt;</type>
      <name>rotationAxisMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a559bc6a1704f3434592035b7e3ba9fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; multiRotatingAxisMotion &gt;</type>
      <name>multiRotationAxisMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab48e3cf9569e6493e051946792f9d182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; fixedWall &gt;</type>
      <name>fixedGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9177b1a1e030ad85e4f8516c934a58d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometryMotionsInstantiate.cpp</name>
    <path>src/Geometry/geometryMotion/</path>
    <filename>geometryMotionsInstantiate_8cpp.html</filename>
    <includes id="fixedWall_8hpp" name="fixedWall.hpp" local="yes" imported="no">fixedWall.hpp</includes>
    <includes id="rotatingAxisMotion_8hpp" name="rotatingAxisMotion.hpp" local="yes" imported="no">rotatingAxisMotion.hpp</includes>
    <includes id="multiRotatingAxisMotion_8hpp" name="multiRotatingAxisMotion.hpp" local="yes" imported="no">multiRotatingAxisMotion.hpp</includes>
    <includes id="vibratingMotion_8hpp" name="vibratingMotion.hpp" local="yes" imported="no">vibratingMotion.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth2.cpp</name>
    <path>src/Integration/AdamsBashforth2/</path>
    <filename>AdamsBashforth2_8cpp.html</filename>
    <includes id="AdamsBashforth2_8hpp" name="AdamsBashforth2.hpp" local="yes" imported="no">AdamsBashforth2.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth2.hpp</name>
    <path>src/Integration/AdamsBashforth2/</path>
    <filename>AdamsBashforth2_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="class">pFlow::AdamsBashforth2</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth3.cpp</name>
    <path>src/Integration/AdamsBashforth3/</path>
    <filename>AdamsBashforth3_8cpp.html</filename>
    <includes id="AdamsBashforth3_8hpp" name="AdamsBashforth3.hpp" local="yes" imported="no">AdamsBashforth3.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth3.hpp</name>
    <path>src/Integration/AdamsBashforth3/</path>
    <filename>AdamsBashforth3_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="struct">pFlow::AB3History</class>
    <class kind="class">pFlow::AdamsBashforth3</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a297254036f91b9c2d9e7799e81734fa0</anchor>
      <arglist>(iIstream &amp;str, AB3History &amp;ab3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a67057168f7f1bfaed2716d0bf584c92b</anchor>
      <arglist>(iOstream &amp;str, const AB3History &amp;ab3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth4.cpp</name>
    <path>src/Integration/AdamsBashforth4/</path>
    <filename>AdamsBashforth4_8cpp.html</filename>
    <includes id="AdamsBashforth4_8hpp" name="AdamsBashforth4.hpp" local="yes" imported="no">AdamsBashforth4.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth4.hpp</name>
    <path>src/Integration/AdamsBashforth4/</path>
    <filename>AdamsBashforth4_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="struct">pFlow::AB4History</class>
    <class kind="class">pFlow::AdamsBashforth4</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e3c94290d47b33214151e0efd5c2f86</anchor>
      <arglist>(iIstream &amp;str, AB4History &amp;ab4)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaf3307e156353527308978f95f140c75</anchor>
      <arglist>(iOstream &amp;str, const AB4History &amp;ab4)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth5.cpp</name>
    <path>src/Integration/AdamsBashforth5/</path>
    <filename>AdamsBashforth5_8cpp.html</filename>
    <includes id="AdamsBashforth5_8hpp" name="AdamsBashforth5.hpp" local="yes" imported="no">AdamsBashforth5.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsBashforth5.hpp</name>
    <path>src/Integration/AdamsBashforth5/</path>
    <filename>AdamsBashforth5_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="struct">pFlow::AB5History</class>
    <class kind="class">pFlow::AdamsBashforth5</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51bf44eb1eaa2df2663af620501d8aad</anchor>
      <arglist>(iIstream &amp;str, AB5History &amp;ab5)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a14f0bb88772a2a49ee5c6e8769096094</anchor>
      <arglist>(iOstream &amp;str, const AB5History &amp;ab5)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton3.cpp</name>
    <path>src/Integration/AdamsMoulton3/</path>
    <filename>AdamsMoulton3_8cpp.html</filename>
    <includes id="AdamsMoulton3_8hpp" name="AdamsMoulton3.hpp" local="yes" imported="no">AdamsMoulton3.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton3.hpp</name>
    <path>src/Integration/AdamsMoulton3/</path>
    <filename>AdamsMoulton3_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="class">pFlow::AdamsMoulton3</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton4.cpp</name>
    <path>src/Integration/AdamsMoulton4/</path>
    <filename>AdamsMoulton4_8cpp.html</filename>
    <includes id="AdamsMoulton4_8hpp" name="AdamsMoulton4.hpp" local="yes" imported="no">AdamsMoulton4.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton4.hpp</name>
    <path>src/Integration/AdamsMoulton4/</path>
    <filename>AdamsMoulton4_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="class">pFlow::AdamsMoulton4</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton5.cpp</name>
    <path>src/Integration/AdamsMoulton5/</path>
    <filename>AdamsMoulton5_8cpp.html</filename>
    <includes id="AdamsMoulton5_8hpp" name="AdamsMoulton5.hpp" local="yes" imported="no">AdamsMoulton5.hpp</includes>
  </compound>
  <compound kind="file">
    <name>AdamsMoulton5.hpp</name>
    <path>src/Integration/AdamsMoulton5/</path>
    <filename>AdamsMoulton5_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="class">pFlow::AdamsMoulton5</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>integration.cpp</name>
    <path>src/Integration/integration/</path>
    <filename>integration_8cpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
  </compound>
  <compound kind="file">
    <name>integration.hpp</name>
    <path>src/Integration/integration/</path>
    <filename>integration_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
    <class kind="class">pFlow::integration</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>integrations.hpp</name>
    <path>src/Integration/integration/</path>
    <filename>integrations_8hpp.html</filename>
    <includes id="integration_8hpp" name="integration.hpp" local="yes" imported="no">integration.hpp</includes>
    <includes id="AdamsBashforth2_8hpp" name="AdamsBashforth2.hpp" local="yes" imported="no">AdamsBashforth2.hpp</includes>
    <includes id="AdamsBashforth3_8hpp" name="AdamsBashforth3.hpp" local="yes" imported="no">AdamsBashforth3.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sortedContactList.hpp</name>
    <path>src/Interaction/contactLists/</path>
    <filename>sortedContactList_8hpp.html</filename>
    <includes id="sortedPairs_8hpp" name="sortedPairs.hpp" local="yes" imported="no">sortedPairs.hpp</includes>
    <class kind="class">pFlow::sortedContactList</class>
    <class kind="class">pFlow::sortedContactList::TagReFillPairs</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>sortedPairs.hpp</name>
    <path>src/Interaction/contactLists/</path>
    <filename>sortedPairs_8hpp.html</filename>
    <includes id="unsortedPairs_8hpp" name="unsortedPairs.hpp" local="yes" imported="no">unsortedPairs.hpp</includes>
    <includes id="KokkosUtilities_8hpp" name="KokkosUtilities.hpp" local="yes" imported="no">KokkosUtilities.hpp</includes>
    <class kind="class">pFlow::sortedPairs</class>
    <class kind="struct">pFlow::sortedPairs::pairAccessor</class>
    <class kind="class">pFlow::sortedPairs::TagFillFlag</class>
    <class kind="class">pFlow::sortedPairs::TagFillPairs</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>unsortedContactList.hpp</name>
    <path>src/Interaction/contactLists/</path>
    <filename>unsortedContactList_8hpp.html</filename>
    <class kind="class">pFlow::unsortedContactList</class>
    <class kind="class">pFlow::unsortedContactList::TagReFillPairs</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>unsortedPairs.hpp</name>
    <path>src/Interaction/contactLists/</path>
    <filename>unsortedPairs_8hpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::unsortedPairs</class>
    <class kind="struct">pFlow::unsortedPairs::pairAccessor</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>cells.hpp</name>
    <path>src/Interaction/contactSearch/</path>
    <filename>cells_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::cells</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>contactSearch.cpp</name>
    <path>src/Interaction/contactSearch/contactSearch/</path>
    <filename>contactSearch_8cpp.html</filename>
    <includes id="contactSearch_8hpp" name="contactSearch.hpp" local="yes" imported="no">contactSearch.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ContactSearch.hpp</name>
    <path>src/Interaction/contactSearch/ContactSearch/</path>
    <filename>ContactSearch_8hpp.html</filename>
    <includes id="contactSearch_8hpp" name="contactSearch.hpp" local="yes" imported="no">contactSearch.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::ContactSearch</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>contactSearch.hpp</name>
    <path>src/Interaction/contactSearch/contactSearch/</path>
    <filename>contactSearch_8hpp.html</filename>
    <includes id="interactionBase_8hpp" name="interactionBase.hpp" local="yes" imported="no">interactionBase.hpp</includes>
    <includes id="unsortedPairs_8hpp" name="unsortedPairs.hpp" local="yes" imported="no">unsortedPairs.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::contactSearch</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>ContactSearchs.cpp</name>
    <path>src/Interaction/contactSearch/ContactSearch/</path>
    <filename>ContactSearchs_8cpp.html</filename>
    <includes id="ContactSearch_8hpp" name="ContactSearch.hpp" local="yes" imported="no">ContactSearch.hpp</includes>
    <includes id="cellMapping_8hpp" name="cellMapping.hpp" local="yes" imported="no">cellMapping.hpp</includes>
    <includes id="NBS_8hpp" name="NBS.hpp" local="yes" imported="no">NBS.hpp</includes>
    <includes id="multiGridNBS_8hpp" name="multiGridNBS.hpp" local="yes" imported="no">multiGridNBS.hpp</includes>
    <includes id="multiGridMapping_8hpp" name="multiGridMapping.hpp" local="yes" imported="no">multiGridMapping.hpp</includes>
  </compound>
  <compound kind="file">
    <name>contactSearchFunctions.hpp</name>
    <path>src/Interaction/contactSearch/</path>
    <filename>contactSearchFunctions_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="iBox_8hpp" name="iBox.hpp" local="yes" imported="no">iBox.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>splitBy3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a09e092ab61b90f5515d60a7eb0d7e524</anchor>
      <arglist>(const uint64_t val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>xyzToMortonCode64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af9e399d88da408c52c6c167b651766e5</anchor>
      <arglist>(uint64_t x, uint64_t y, uint64_t z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>getThirdBits</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51e811dd5563b1e1b759b091ef96c339</anchor>
      <arglist>(uint64_t x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>mortonCode64Toxyz</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48c34bfcf0b43fb8bd3a0ffc596b751d</anchor>
      <arglist>(uint64_t morton, uint64_t &amp;x, uint64_t &amp;y, uint64_t &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>indexToCell</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a690585e72dc379ab5cddb6b4a8c97938</anchor>
      <arglist>(const indexType idx, const triple&lt; cellIndexType &gt; &amp;extent, triple&lt; cellIndexType &gt; &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; cellIndexType &gt;</type>
      <name>boxExtent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a92415efe5f232af6661b4c4eb7e6f14c</anchor>
      <arglist>(const iBox&lt; cellIndexType &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>indexToCell</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a456b32315d6b1173fe79556da677e861</anchor>
      <arglist>(const indexType idx, const iBox&lt; cellIndexType &gt; &amp;box, triple&lt; cellIndexType &gt; &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>sphereSphereCheck</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a28ad450169472bcaebbe0f9f761086de</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 p2, real d1, real d2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mapperNBS.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>mapperNBS_8hpp.html</filename>
    <includes id="cells_8hpp" name="cells.hpp" local="yes" imported="no">cells.hpp</includes>
    <includes id="contactSearchFunctions_8hpp" name="contactSearchFunctions.hpp" local="yes" imported="no">contactSearchFunctions.hpp</includes>
    <includes id="baseAlgorithms_8hpp" name="baseAlgorithms.hpp" local="yes" imported="no">baseAlgorithms.hpp</includes>
    <includes id="ViewAlgorithms_8hpp" name="ViewAlgorithms.hpp" local="yes" imported="no">ViewAlgorithms.hpp</includes>
    <class kind="class">pFlow::mapperNBS</class>
    <class kind="class">pFlow::mapperNBS::cellIterator</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>multiGridNBS.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>multiGridNBS_8hpp.html</filename>
    <includes id="NBSLevels_8hpp" name="NBSLevels.hpp" local="yes" imported="no">NBSLevels.hpp</includes>
    <class kind="class">pFlow::multiGridNBS</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>NBS.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBS_8hpp.html</filename>
    <includes id="NBSLevel0_8hpp" name="NBSLevel0.hpp" local="yes" imported="no">NBSLevel0.hpp</includes>
    <class kind="class">pFlow::NBS</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>NBSCrossLoop.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBSCrossLoop_8hpp.html</filename>
    <member kind="function">
      <type>CellType</type>
      <name>currentCell</name>
      <anchorfile>NBSCrossLoop_8hpp.html</anchorfile>
      <anchor>ad507fb0683b9f963173e72db49e54109</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>NBSCrossLoop_8hpp.html</anchorfile>
      <anchor>ac367ad256ec2a5a0691b65a0ad759629</anchor>
      <arglist>(m &gt; -1)</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>m</name>
      <anchorfile>NBSCrossLoop_8hpp.html</anchorfile>
      <anchor>ae9d62983f13507bd8805be92eb61a2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n</name>
      <anchorfile>NBSCrossLoop_8hpp.html</anchorfile>
      <anchor>aad8b608072a1b6dcd9e91de38ee2925f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NBSLevel.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBSLevel_8hpp.html</filename>
    <includes id="NBSLevel0_8hpp" name="NBSLevel0.hpp" local="yes" imported="no">NBSLevel0.hpp</includes>
    <includes id="NBSCrossLoop_8hpp" name="NBSCrossLoop.hpp" local="yes" imported="no">NBSCrossLoop.hpp</includes>
    <class kind="class">pFlow::NBSLevel</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32x3</type>
      <name>mapIndexLevels</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aed40991723073826994b648decffc9e6</anchor>
      <arglist>(const int32x3 &amp;ind, int32 lowerLevel, int32 upperLevel)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>NBSLevel0.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBSLevel0_8hpp.html</filename>
    <includes id="mapperNBS_8hpp" name="mapperNBS.hpp" local="yes" imported="no">mapperNBS.hpp</includes>
    <includes id="NBSLoop_8hpp" name="NBSLoop.hpp" local="yes" imported="no">NBSLoop.hpp</includes>
    <class kind="class">pFlow::NBSLevel0</class>
    <class kind="struct">pFlow::NBSLevel0::TagFindPairs</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>NBSLevels.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBSLevels_8hpp.html</filename>
    <includes id="NBSLevel_8hpp" name="NBSLevel.hpp" local="yes" imported="no">NBSLevel.hpp</includes>
    <includes id="NBSLevel0_8hpp" name="NBSLevel0.hpp" local="yes" imported="no">NBSLevel0.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <class kind="class">pFlow::NBSLevels</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>NBSLoop.hpp</name>
    <path>src/Interaction/contactSearch/methods/</path>
    <filename>NBSLoop_8hpp.html</filename>
    <member kind="function">
      <type>CellType</type>
      <name>currentCell</name>
      <anchorfile>NBSLoop_8hpp.html</anchorfile>
      <anchor>ad507fb0683b9f963173e72db49e54109</anchor>
      <arglist>(i, j, k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>while</name>
      <anchorfile>NBSLoop_8hpp.html</anchorfile>
      <anchor>ac367ad256ec2a5a0691b65a0ad759629</anchor>
      <arglist>(m &gt; -1)</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>m</name>
      <anchorfile>NBSLoop_8hpp.html</anchorfile>
      <anchor>ae9d62983f13507bd8805be92eb61a2a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>n</name>
      <anchorfile>NBSLoop_8hpp.html</anchorfile>
      <anchor>aad8b608072a1b6dcd9e91de38ee2925f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cellMapping.hpp</name>
    <path>src/Interaction/contactSearch/wallMappings/</path>
    <filename>cellMapping_8hpp.html</filename>
    <includes id="cellsWallLevel0_8hpp" name="cellsWallLevel0.hpp" local="yes" imported="no">cellsWallLevel0.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::cellMapping</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>cellsWallLevel0.hpp</name>
    <path>src/Interaction/contactSearch/wallMappings/</path>
    <filename>cellsWallLevel0_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="cells_8hpp" name="cells.hpp" local="yes" imported="no">cells.hpp</includes>
    <includes id="iBox_8hpp" name="iBox.hpp" local="yes" imported="no">iBox.hpp</includes>
    <class kind="class">pFlow::cellsWallLevel0</class>
    <class kind="class">pFlow::cellsWallLevel0::TagFindCellRange2</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>cellsWallLevels.hpp</name>
    <path>src/Interaction/contactSearch/wallMappings/</path>
    <filename>cellsWallLevels_8hpp.html</filename>
    <includes id="cellsWallLevel0_8hpp" name="cellsWallLevel0.hpp" local="yes" imported="no">cellsWallLevel0.hpp</includes>
    <class kind="class">pFlow::cellsWallLevels</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>multiGridMapping.hpp</name>
    <path>src/Interaction/contactSearch/wallMappings/</path>
    <filename>multiGridMapping_8hpp.html</filename>
    <includes id="cellsWallLevels_8hpp" name="cellsWallLevels.hpp" local="yes" imported="no">cellsWallLevels.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::multiGridMapping</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>demInteraction.hpp</name>
    <path>src/Interaction/interaction/</path>
    <filename>demInteraction_8hpp.html</filename>
    <includes id="property_8hpp" name="property.hpp" local="yes" imported="no">property.hpp</includes>
    <includes id="demComponent_8hpp" name="demComponent.hpp" local="yes" imported="no">demComponent.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="triSurfaceFields_8hpp" name="triSurfaceFields.hpp" local="yes" imported="no">triSurfaceFields.hpp</includes>
    <class kind="class">pFlow::demInteraction</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>interaction.cpp</name>
    <path>src/Interaction/interaction/</path>
    <filename>interaction_8cpp.html</filename>
    <includes id="interaction_8hpp" name="interaction.hpp" local="yes" imported="no">interaction.hpp</includes>
  </compound>
  <compound kind="file">
    <name>interaction.hpp</name>
    <path>src/Interaction/interaction/</path>
    <filename>interaction_8hpp.html</filename>
    <includes id="demInteraction_8hpp" name="demInteraction.hpp" local="yes" imported="no">demInteraction.hpp</includes>
    <includes id="eventObserver_8hpp" name="eventObserver.hpp" local="yes" imported="no">eventObserver.hpp</includes>
    <includes id="interactionBase_8hpp" name="interactionBase.hpp" local="yes" imported="no">interactionBase.hpp</includes>
    <includes id="contactSearch_8hpp" name="contactSearch.hpp" local="yes" imported="no">contactSearch.hpp</includes>
    <class kind="class">pFlow::interaction</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>interactionBase.hpp</name>
    <path>src/Interaction/interaction/</path>
    <filename>interactionBase_8hpp.html</filename>
    <includes id="interactionTypes_8hpp" name="interactionTypes.hpp" local="yes" imported="no">interactionTypes.hpp</includes>
    <includes id="particles_8hpp" name="particles.hpp" local="yes" imported="no">particles.hpp</includes>
    <includes id="geometry_8hpp" name="geometry.hpp" local="yes" imported="no">geometry.hpp</includes>
    <class kind="class">pFlow::interactionBase</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>interactionTypes.hpp</name>
    <path>src/Interaction/interaction/</path>
    <filename>interactionTypes_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>int32</type>
      <name>CELL_INDEX_TYPE</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a98ddfd9c014deabdc5951b479ec25914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>ID_TYPE</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27901dc51aed36085ab8f7c728a8b08d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>linearCF.hpp</name>
    <path>src/Interaction/Models/contactForce/</path>
    <filename>linearCF_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="symArrays_8hpp" name="symArrays.hpp" local="yes" imported="no">symArrays.hpp</includes>
    <class kind="class">pFlow::cfModels::linear</class>
    <class kind="struct">pFlow::cfModels::linear::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::linear::linearProperties</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::cfModels</namespace>
  </compound>
  <compound kind="file">
    <name>nonLinearCF.hpp</name>
    <path>src/Interaction/Models/contactForce/</path>
    <filename>nonLinearCF_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::cfModels::nonLinear</class>
    <class kind="struct">pFlow::cfModels::nonLinear::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::nonLinear::nonLinearProperties</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::cfModels</namespace>
  </compound>
  <compound kind="file">
    <name>nonLinearMod.hpp</name>
    <path>src/Interaction/Models/contactForce/</path>
    <filename>nonLinearMod_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::cfModels::nonLinearMod</class>
    <class kind="struct">pFlow::cfModels::nonLinearMod::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::nonLinearMod::nonLinearProperties</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::cfModels</namespace>
  </compound>
  <compound kind="file">
    <name>contactForceModels.hpp</name>
    <path>src/Interaction/Models/</path>
    <filename>contactForceModels_8hpp.html</filename>
    <includes id="linearCF_8hpp" name="linearCF.hpp" local="yes" imported="no">linearCF.hpp</includes>
    <includes id="nonLinearCF_8hpp" name="nonLinearCF.hpp" local="yes" imported="no">nonLinearCF.hpp</includes>
    <includes id="normalRolling_8hpp" name="normalRolling.hpp" local="yes" imported="no">normalRolling.hpp</includes>
    <includes id="nonLinearMod_8hpp" name="nonLinearMod.hpp" local="yes" imported="no">nonLinearMod.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::cfModels</namespace>
    <member kind="typedef">
      <type>normalRolling&lt; linear&lt; true &gt; &gt;</type>
      <name>limitedLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>acb81095a65f6cbc6b39e4da08e783c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; linear&lt; false &gt; &gt;</type>
      <name>nonLimitedLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>aac5659f99fc5c3659664decd9c88ea82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinear&lt; true &gt; &gt;</type>
      <name>limitedNonLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>ada54cbe072eb703c60b77326a78064e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinear&lt; false &gt; &gt;</type>
      <name>nonLimitedNonLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>a2c226971020488a0989dcbff6e6815d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinearMod&lt; true &gt; &gt;</type>
      <name>limitedNonLinearModNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>a56788c7bedd45395167e0eb8f82600a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinearMod&lt; false &gt; &gt;</type>
      <name>nonLimitedNonLinearModNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>ad69102df96c1b59bcb71504c7b284dc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>normalRolling.hpp</name>
    <path>src/Interaction/Models/rolling/</path>
    <filename>normalRolling_8hpp.html</filename>
    <class kind="class">pFlow::cfModels::normalRolling</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::cfModels</namespace>
  </compound>
  <compound kind="file">
    <name>pLine.hpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>pLine_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">pFlow::sphTriInteraction::pLine</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::sphTriInteraction</namespace>
  </compound>
  <compound kind="file">
    <name>sphereInteraction.cpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>sphereInteraction_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>sphereInteraction.hpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>sphereInteraction_8hpp.html</filename>
    <includes id="interaction_8hpp" name="interaction.hpp" local="yes" imported="no">interaction.hpp</includes>
    <includes id="sphereParticles_8hpp" name="sphereParticles.hpp" local="yes" imported="no">sphereParticles.hpp</includes>
    <includes id="sphereInteractionKernels_8hpp" name="sphereInteractionKernels.hpp" local="yes" imported="no">sphereInteractionKernels.hpp</includes>
    <includes id="sphereInteraction_8cpp" name="sphereInteraction.cpp" local="yes" imported="no">sphereInteraction.cpp</includes>
    <class kind="class">pFlow::sphereInteraction</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>sphereInteractionKernels.hpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>sphereInteractionKernels_8hpp.html</filename>
    <includes id="sphereTriSurfaceContact_8hpp" name="sphereTriSurfaceContact.hpp" local="yes" imported="no">sphereTriSurfaceContact.hpp</includes>
    <class kind="struct">pFlow::sphereInteractionKernels::ppInteractionFunctor</class>
    <class kind="struct">pFlow::sphereInteractionKernels::pwInteractionFunctor</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::sphereInteractionKernels</namespace>
  </compound>
  <compound kind="file">
    <name>sphereInteractions.cpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>sphereInteractions_8cpp.html</filename>
    <includes id="sphereInteraction_8hpp" name="sphereInteraction.hpp" local="yes" imported="no">sphereInteraction.hpp</includes>
    <includes id="geometryMotions_8hpp" name="geometryMotions.hpp" local="yes" imported="no">geometryMotions.hpp</includes>
    <includes id="contactForceModels_8hpp" name="contactForceModels.hpp" local="yes" imported="no">contactForceModels.hpp</includes>
    <includes id="unsortedContactList_8hpp" name="unsortedContactList.hpp" local="yes" imported="no">unsortedContactList.hpp</includes>
    <includes id="sortedContactList_8hpp" name="sortedContactList.hpp" local="yes" imported="no">sortedContactList.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sphereTriSurfaceContact.hpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>sphereTriSurfaceContact_8hpp.html</filename>
    <includes id="triWall_8hpp" name="triWall.hpp" local="yes" imported="no">triWall.hpp</includes>
    <includes id="pLine_8hpp" name="pLine.hpp" local="yes" imported="no">pLine.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::sphTriInteraction</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>pointInPlane</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>a5e496aab3bbefcf01f87c002cb7d7a17</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>cramerRule2</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>aeaaa4e626ed9c02d58b67202ccd5b763</anchor>
      <arglist>(real A[2][2], real B[2], real &amp;x1, real &amp;x2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>pointInPlane</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>ae26e6389cf4eee2692ca81143434623a</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p, int32 &amp;Ln)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSphereInContactActiveSide</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>a2c9217db02760928f41cf66a7d46757f</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;cntr, real rad, real &amp;ovrlp, realx3 &amp;norm, realx3 &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSphereInContactBothSides</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>adfb1ec513d5af1a79c737caa28202347</anchor>
      <arglist>(const realx3x3 &amp;tri, const realx3 &amp;cntr, real Rad, real &amp;ovrlp, realx3 &amp;norm, realx3 &amp;cp)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triWall.hpp</name>
    <path>src/Interaction/sphereInteraction/</path>
    <filename>triWall_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="struct">pFlow::sphTriInteraction::triWall</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::sphTriInteraction</namespace>
  </compound>
  <compound kind="file">
    <name>multiRotatingAxis.cpp</name>
    <path>src/MotionModel/entities/multiRotatingAxis/</path>
    <filename>multiRotatingAxis_8cpp.html</filename>
    <includes id="multiRotatingAxis_8hpp" name="multiRotatingAxis.hpp" local="yes" imported="no">multiRotatingAxis.hpp</includes>
    <includes id="multiRotatingAxisMotion_8hpp" name="multiRotatingAxisMotion.hpp" local="yes" imported="no">multiRotatingAxisMotion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>multiRotatingAxis.hpp</name>
    <path>src/MotionModel/entities/multiRotatingAxis/</path>
    <filename>multiRotatingAxis_8hpp.html</filename>
    <includes id="rotatingAxis_8hpp" name="rotatingAxis.hpp" local="yes" imported="no">rotatingAxis.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <class kind="class">pFlow::multiRotatingAxis</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>rotatingAxis.cpp</name>
    <path>src/MotionModel/entities/rotatingAxis/</path>
    <filename>rotatingAxis_8cpp.html</filename>
    <includes id="rotatingAxis_8hpp" name="rotatingAxis.hpp" local="yes" imported="no">rotatingAxis.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>rotatingAxis.hpp</name>
    <path>src/MotionModel/entities/rotatingAxis/</path>
    <filename>rotatingAxis_8hpp.html</filename>
    <includes id="timeInterval_8hpp" name="timeInterval.hpp" local="yes" imported="no">timeInterval.hpp</includes>
    <includes id="line_8hpp" name="line.hpp" local="yes" imported="no">line.hpp</includes>
    <includes id="rotatingAxisFwd_8hpp" name="rotatingAxisFwd.hpp" local="yes" imported="no">rotatingAxisFwd.hpp</includes>
    <includes id="rotatingAxisI_8hpp" name="rotatingAxisI.hpp" local="yes" imported="no">rotatingAxisI.hpp</includes>
    <class kind="class">pFlow::rotatingAxis</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a103bcc7b78b9ed9fc6dd1b06a71a0673</anchor>
      <arglist>(iOstream &amp;os, const rotatingAxis &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a805ee6f0f6b70fc649bd2cd2d8a6dfbc</anchor>
      <arglist>(iIstream &amp;is, rotatingAxis &amp;ax)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotatingAxisFwd.hpp</name>
    <path>src/MotionModel/entities/rotatingAxis/</path>
    <filename>rotatingAxisFwd_8hpp.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>rotate</name>
      <anchorfile>rotatingAxisFwd_8hpp.html</anchorfile>
      <anchor>a2a2904c6b466578f9847a75205e7c648</anchor>
      <arglist>(const realx3 &amp;p, const line &amp;ln, real theta)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>rotate</name>
      <anchorfile>rotatingAxisFwd_8hpp.html</anchorfile>
      <anchor>a3b8a697154394dac01670585470ec6d4</anchor>
      <arglist>(const realx3 &amp;p, const rotatingAxis &amp;ax, real dt)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>rotate</name>
      <anchorfile>rotatingAxisFwd_8hpp.html</anchorfile>
      <anchor>adff6cfe6226fe601f06394a1814ff0ea</anchor>
      <arglist>(realx3 *p, size_t n, const line &amp;ln, real theta)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>rotate</name>
      <anchorfile>rotatingAxisFwd_8hpp.html</anchorfile>
      <anchor>a532451420d5cfe743d8eba693265b7a7</anchor>
      <arglist>(realx3 *p, size_t n, const rotatingAxis &amp;ax, real dt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rotatingAxisI.hpp</name>
    <path>src/MotionModel/entities/rotatingAxis/</path>
    <filename>rotatingAxisI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>timeInterval.cpp</name>
    <path>src/MotionModel/entities/timeInterval/</path>
    <filename>timeInterval_8cpp.html</filename>
    <includes id="timeInterval_8hpp" name="timeInterval.hpp" local="yes" imported="no">timeInterval.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>timeInterval.hpp</name>
    <path>src/MotionModel/entities/timeInterval/</path>
    <filename>timeInterval_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <class kind="class">pFlow::timeInterval</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae32d1a3daa6982612199db8eb0212d24</anchor>
      <arglist>(iOstream &amp;os, const timeInterval &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d656b4af50f3446ca7926763c4d3b05</anchor>
      <arglist>(iIstream &amp;is, timeInterval &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vibrating.cpp</name>
    <path>src/MotionModel/entities/vibrating/</path>
    <filename>vibrating_8cpp.html</filename>
    <includes id="vibrating_8hpp" name="vibrating.hpp" local="yes" imported="no">vibrating.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vibrating.hpp</name>
    <path>src/MotionModel/entities/vibrating/</path>
    <filename>vibrating_8hpp.html</filename>
    <includes id="timeInterval_8hpp" name="timeInterval.hpp" local="yes" imported="no">timeInterval.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::vibrating</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a34cc6c4ad330f26f7b7f88987a6d8d78</anchor>
      <arglist>(iOstream &amp;os, const vibrating &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3472ffca40b790fc4adee9265c5cad66</anchor>
      <arglist>(iIstream &amp;is, vibrating &amp;obj)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fixedWall.cpp</name>
    <path>src/MotionModel/fixedWall/</path>
    <filename>fixedWall_8cpp.html</filename>
    <includes id="fixedWall_8hpp" name="fixedWall.hpp" local="yes" imported="no">fixedWall.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fixedWall.hpp</name>
    <path>src/MotionModel/fixedWall/</path>
    <filename>fixedWall_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <class kind="class">pFlow::fixedWall</class>
    <class kind="class">pFlow::fixedWall::Model</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>multiRotatingAxisMotion.cpp</name>
    <path>src/MotionModel/multiRotatingAxisMotion/</path>
    <filename>multiRotatingAxisMotion_8cpp.html</filename>
    <includes id="multiRotatingAxisMotion_8hpp" name="multiRotatingAxisMotion.hpp" local="yes" imported="no">multiRotatingAxisMotion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>multiRotatingAxisMotion.hpp</name>
    <path>src/MotionModel/multiRotatingAxisMotion/</path>
    <filename>multiRotatingAxisMotion_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="multiRotatingAxis_8hpp" name="multiRotatingAxis.hpp" local="yes" imported="no">multiRotatingAxis.hpp</includes>
    <class kind="class">pFlow::multiRotatingAxisMotion</class>
    <class kind="class">pFlow::multiRotatingAxisMotion::Model</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>rotatingAxisMotion.cpp</name>
    <path>src/MotionModel/rotatingAxisMotion/</path>
    <filename>rotatingAxisMotion_8cpp.html</filename>
    <includes id="rotatingAxisMotion_8hpp" name="rotatingAxisMotion.hpp" local="yes" imported="no">rotatingAxisMotion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>rotatingAxisMotion.hpp</name>
    <path>src/MotionModel/rotatingAxisMotion/</path>
    <filename>rotatingAxisMotion_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="rotatingAxis_8hpp" name="rotatingAxis.hpp" local="yes" imported="no">rotatingAxis.hpp</includes>
    <class kind="class">pFlow::rotatingAxisMotion</class>
    <class kind="class">pFlow::rotatingAxisMotion::Model</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>vibratingMotion.cpp</name>
    <path>src/MotionModel/vibratingMotion/</path>
    <filename>vibratingMotion_8cpp.html</filename>
    <includes id="vibratingMotion_8hpp" name="vibratingMotion.hpp" local="yes" imported="no">vibratingMotion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vibratingMotion.hpp</name>
    <path>src/MotionModel/vibratingMotion/</path>
    <filename>vibratingMotion_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="vibrating_8hpp" name="vibrating.hpp" local="yes" imported="no">vibrating.hpp</includes>
    <class kind="class">pFlow::vibratingMotion</class>
    <class kind="class">pFlow::vibratingMotion::Model</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>dynamicPointStructure.cpp</name>
    <path>src/Particles/dynamicPointStructure/</path>
    <filename>dynamicPointStructure_8cpp.html</filename>
    <includes id="dynamicPointStructure_8hpp" name="dynamicPointStructure.hpp" local="yes" imported="no">dynamicPointStructure.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dynamicPointStructure.hpp</name>
    <path>src/Particles/dynamicPointStructure/</path>
    <filename>dynamicPointStructure_8hpp.html</filename>
    <includes id="Time_8hpp" name="Time.hpp" local="yes" imported="no">Time.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="integrations_8hpp" name="integrations.hpp" local="yes" imported="no">integrations.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <class kind="class">pFlow::dynamicPointStructure</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>Insertion.cpp</name>
    <path>src/Particles/Insertion/Insertion/</path>
    <filename>Insertion_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>insertion.cpp</name>
    <path>src/Particles/Insertion/insertion/</path>
    <filename>insertion_8cpp.html</filename>
    <includes id="particles_8hpp" name="particles.hpp" local="yes" imported="no">particles.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="insertion_8hpp" name="insertion.hpp" local="yes" imported="no">insertion.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Insertion.hpp</name>
    <path>src/Particles/Insertion/Insertion/</path>
    <filename>Insertion_8hpp.html</filename>
    <includes id="insertion_8hpp" name="insertion.hpp" local="yes" imported="no">insertion.hpp</includes>
    <includes id="ListPtr_8hpp" name="ListPtr.hpp" local="yes" imported="no">ListPtr.hpp</includes>
    <includes id="InsertionRegion_8hpp" name="InsertionRegion.hpp" local="yes" imported="no">InsertionRegion.hpp</includes>
    <includes id="particles_8hpp" name="particles.hpp" local="yes" imported="no">particles.hpp</includes>
    <includes id="Insertion_8cpp" name="Insertion.cpp" local="yes" imported="no">Insertion.cpp</includes>
    <class kind="class">pFlow::Insertion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>insertion.hpp</name>
    <path>src/Particles/Insertion/insertion/</path>
    <filename>insertion_8hpp.html</filename>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::insertion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>Insertions.cpp</name>
    <path>src/Particles/Insertion/Insertion/</path>
    <filename>Insertions_8cpp.html</filename>
    <includes id="Insertions_8hpp" name="Insertions.hpp" local="yes" imported="no">Insertions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Insertions.hpp</name>
    <path>src/Particles/Insertion/Insertion/</path>
    <filename>Insertions_8hpp.html</filename>
    <includes id="Insertion_8hpp" name="Insertion.hpp" local="yes" imported="no">Insertion.hpp</includes>
    <includes id="sphereShape_8hpp" name="sphereShape.hpp" local="yes" imported="no">sphereShape.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>Insertion&lt; sphereShape &gt;</type>
      <name>sphereInsertion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae2e0749fbe2e30cbf9061410cfccf232</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>insertionRegion.cpp</name>
    <path>src/Particles/Insertion/insertionRegion/</path>
    <filename>insertionRegion_8cpp.html</filename>
    <includes id="insertionRegion_8hpp" name="insertionRegion.hpp" local="yes" imported="no">insertionRegion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>InsertionRegion.cpp</name>
    <path>src/Particles/Insertion/InsertionRegion/</path>
    <filename>InsertionRegion_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>InsertionRegion.hpp</name>
    <path>src/Particles/Insertion/InsertionRegion/</path>
    <filename>InsertionRegion_8hpp.html</filename>
    <includes id="insertionRegion_8hpp" name="insertionRegion.hpp" local="yes" imported="no">insertionRegion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="InsertionRegion_8cpp" name="InsertionRegion.cpp" local="yes" imported="no">InsertionRegion.cpp</includes>
    <class kind="class">pFlow::InsertionRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>insertionRegion.hpp</name>
    <path>src/Particles/Insertion/insertionRegion/</path>
    <filename>insertionRegion_8hpp.html</filename>
    <includes id="timeFlowControl_8hpp" name="timeFlowControl.hpp" local="yes" imported="no">timeFlowControl.hpp</includes>
    <includes id="shapeMixture_8hpp" name="shapeMixture.hpp" local="yes" imported="no">shapeMixture.hpp</includes>
    <includes id="peakableRegions_8hpp" name="peakableRegions.hpp" local="yes" imported="no">peakableRegions.hpp</includes>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
    <class kind="class">pFlow::insertionRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>timeFlowControl.cpp</name>
    <path>src/Particles/Insertion/insertionRegion/</path>
    <filename>timeFlowControl_8cpp.html</filename>
    <includes id="timeFlowControl_8hpp" name="timeFlowControl.hpp" local="yes" imported="no">timeFlowControl.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>timeFlowControl.hpp</name>
    <path>src/Particles/Insertion/insertionRegion/</path>
    <filename>timeFlowControl_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::timeFlowControl</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>shapeMixture.cpp</name>
    <path>src/Particles/Insertion/shapeMixture/</path>
    <filename>shapeMixture_8cpp.html</filename>
    <includes id="shapeMixture_8hpp" name="shapeMixture.hpp" local="yes" imported="no">shapeMixture.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>shapeMixture.hpp</name>
    <path>src/Particles/Insertion/shapeMixture/</path>
    <filename>shapeMixture_8hpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <class kind="class">pFlow::shapeMixture</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>demParticles.hpp</name>
    <path>src/Particles/particles/</path>
    <filename>demParticles_8hpp.html</filename>
    <includes id="demComponent_8hpp" name="demComponent.hpp" local="yes" imported="no">demComponent.hpp</includes>
    <class kind="class">pFlow::demParticles</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>particleIdHandler.hpp</name>
    <path>src/Particles/particles/</path>
    <filename>particleIdHandler_8hpp.html</filename>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <class kind="class">pFlow::particleIdHandler</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>particles.cpp</name>
    <path>src/Particles/particles/</path>
    <filename>particles_8cpp.html</filename>
    <includes id="particles_8hpp" name="particles.hpp" local="yes" imported="no">particles.hpp</includes>
  </compound>
  <compound kind="file">
    <name>particles.hpp</name>
    <path>src/Particles/particles/</path>
    <filename>particles_8hpp.html</filename>
    <includes id="dynamicPointStructure_8hpp" name="dynamicPointStructure.hpp" local="yes" imported="no">dynamicPointStructure.hpp</includes>
    <includes id="particleIdHandler_8hpp" name="particleIdHandler.hpp" local="yes" imported="no">particleIdHandler.hpp</includes>
    <includes id="demParticles_8hpp" name="demParticles.hpp" local="yes" imported="no">demParticles.hpp</includes>
    <class kind="class">pFlow::particles</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>sphereParticles.cpp</name>
    <path>src/Particles/SphereParticles/sphereParticles/</path>
    <filename>sphereParticles_8cpp.html</filename>
    <includes id="sphereParticles_8hpp" name="sphereParticles.hpp" local="yes" imported="no">sphereParticles.hpp</includes>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
    <includes id="sphereParticlesKernels_8hpp" name="sphereParticlesKernels.hpp" local="yes" imported="no">sphereParticlesKernels.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sphereParticles.hpp</name>
    <path>src/Particles/SphereParticles/sphereParticles/</path>
    <filename>sphereParticles_8hpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="particles_8hpp" name="particles.hpp" local="yes" imported="no">particles.hpp</includes>
    <includes id="sphereShape_8hpp" name="sphereShape.hpp" local="yes" imported="no">sphereShape.hpp</includes>
    <includes id="property_8hpp" name="property.hpp" local="yes" imported="no">property.hpp</includes>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
    <class kind="class">pFlow::sphereParticles</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>sphereParticlesKernels.hpp</name>
    <path>src/Particles/SphereParticles/sphereParticles/</path>
    <filename>sphereParticlesKernels_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <namespace>pFlow::sphereParticlesKernels</namespace>
    <member kind="typedef">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpAcceleration</name>
      <anchorfile>namespacepFlow_1_1sphereParticlesKernels.html</anchorfile>
      <anchor>a9fa48474270a6882fba4b6f8e003aecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceleration</name>
      <anchorfile>namespacepFlow_1_1sphereParticlesKernels.html</anchorfile>
      <anchor>a0c2479747d0f081e8f45bd1774cdc627</anchor>
      <arglist>(realx3 g, deviceViewType1D&lt; real &gt; mass, deviceViewType1D&lt; realx3 &gt; force, deviceViewType1D&lt; real &gt; I, deviceViewType1D&lt; realx3 &gt; torque, IncludeFunctionType incld, deviceViewType1D&lt; realx3 &gt; lAcc, deviceViewType1D&lt; realx3 &gt; rAcc)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphereShape.cpp</name>
    <path>src/Particles/SphereParticles/sphereShape/</path>
    <filename>sphereShape_8cpp.html</filename>
    <includes id="sphereShape_8hpp" name="sphereShape.hpp" local="yes" imported="no">sphereShape.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sphereShape.hpp</name>
    <path>src/Particles/SphereParticles/sphereShape/</path>
    <filename>sphereShape_8hpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="hashMap_8hpp" name="hashMap.hpp" local="yes" imported="no">hashMap.hpp</includes>
    <class kind="class">pFlow::sphereShape</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>algorithmFunctions.hpp</name>
    <path>src/phasicFlow/algorithms/</path>
    <filename>algorithmFunctions_8hpp.html</filename>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <class kind="struct">pFlow::algorithms::greater</class>
    <class kind="struct">pFlow::algorithms::less</class>
    <class kind="struct">pFlow::algorithms::maximum</class>
    <class kind="struct">pFlow::algorithms::minimum</class>
    <namespace>pFlow</namespace>
    <namespace>pFlow::algorithms</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int</type>
      <name>binarySearch</name>
      <anchorfile>namespacepFlow_1_1algorithms.html</anchorfile>
      <anchor>a6ba0df36be88e491f6cd31caa7ac00e6</anchor>
      <arglist>(const T *array, int length, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cudaAlgorithms.hpp</name>
    <path>src/phasicFlow/algorithms/</path>
    <filename>cudaAlgorithms_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>kokkosAlgorithms.hpp</name>
    <path>src/phasicFlow/algorithms/</path>
    <filename>kokkosAlgorithms_8hpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::algorithms</namespace>
    <namespace>pFlow::algorithms::KOKKOS</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>acfddf7beb8695f7f108cd01701563094</anchor>
      <arglist>(const Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>aaa96ab75bf440739e2c21b5a9ac8b611</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;firstVal)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>ab917f5baded62dca1dfb1307a8d11058</anchor>
      <arglist>(Type *first, const indexType *indices, const int32 numElems, const Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a083a3e3dc71fa37bd66fb4cd3323b04e</anchor>
      <arglist>(Type *first, const indexType *indices, const Type *vals, const int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>max</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>abfe2952d5d87fffc1da563a4961e4dd7</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>min</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a7e1626da1764681b18826a5c8dd49767</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a1f5b18868e4b2983e5d9f923a19a4635</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>aeb49e63c8960c86332ac6742eeb9c8de</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdAlgorithms.hpp</name>
    <path>src/phasicFlow/algorithms/</path>
    <filename>stdAlgorithms_8hpp.html</filename>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <includes id="algorithmFunctions_8hpp" name="algorithmFunctions.hpp" local="yes" imported="no">algorithmFunctions.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::algorithms</namespace>
    <namespace>pFlow::algorithms::STD</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>acfddf7beb8695f7f108cd01701563094</anchor>
      <arglist>(const Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a3e1664e590e09c6aace3367fcb948f47</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>ab917f5baded62dca1dfb1307a8d11058</anchor>
      <arglist>(Type *first, const indexType *indices, const int32 numElems, const Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a083a3e3dc71fa37bd66fb4cd3323b04e</anchor>
      <arglist>(Type *first, const indexType *indices, const Type *vals, const int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aaa96ab75bf440739e2c21b5a9ac8b611</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;firstVal)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>max</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>abfe2952d5d87fffc1da563a4961e4dd7</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>min</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a7e1626da1764681b18826a5c8dd49767</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aca59379e47f6bf3e21e97e841f3a321d</anchor>
      <arglist>(Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>adc262f5dc508d4be9b2dc64a48867542</anchor>
      <arglist>(Type *first, int32 numElems, CompareFunc compare)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>permuteSort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a6206f7e81cad742c4b17d4e908e8d5a7</anchor>
      <arglist>(const Type *first, PermuteType *pFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a1f5b18868e4b2983e5d9f923a19a4635</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aeb49e63c8960c86332ac6742eeb9c8de</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitsetHD.hpp</name>
    <path>src/phasicFlow/containers/bitsetHD/</path>
    <filename>bitsetHD_8hpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::bitsetHD</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned &gt;</type>
      <name>bitset32_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a511d36dedf9ff6e8c0000fba1817d0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned, HostSpace &gt;</type>
      <name>bitset32_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a96ee4b1db3b27ba52d9ab0e5249278fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned long &gt;</type>
      <name>bitset64_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a05778ebe00134c2ec000d04527dd7ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned long, HostSpace &gt;</type>
      <name>bitset64_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a84b112824664f15682f079b861b6e0aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitsetHDs.cpp</name>
    <path>src/phasicFlow/containers/bitsetHD/</path>
    <filename>bitsetHDs_8cpp.html</filename>
    <includes id="bitsetHD_8hpp" name="bitsetHD.hpp" local="yes" imported="no">bitsetHD.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Field.cpp</name>
    <path>src/phasicFlow/containers/Field/</path>
    <filename>Field_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Field.hpp</name>
    <path>src/phasicFlow/containers/Field/</path>
    <filename>Field_8hpp.html</filename>
    <includes id="VectorSingle_8hpp" name="VectorSingle.hpp" local="yes" imported="no">VectorSingle.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
    <includes id="Field_8cpp" name="Field.cpp" local="yes" imported="no">Field.cpp</includes>
    <class kind="class">pFlow::Field</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a32aeadac062c2aeb5a4f500a9b3534ec</anchor>
      <arglist>(iIstream &amp;is, Field&lt; VectorField, T, PropType &gt; &amp;ifld)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>add2aa8df2ac6a304de8c7a22139d149b</anchor>
      <arglist>(iOstream &amp;os, const Field&lt; VectorField, T, PropType &gt; &amp;ofld)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Fields.cpp</name>
    <path>src/phasicFlow/containers/Field/</path>
    <filename>Fields_8cpp.html</filename>
    <includes id="Fields_8hpp" name="Fields.hpp" local="yes" imported="no">Fields.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Fields.hpp</name>
    <path>src/phasicFlow/containers/Field/</path>
    <filename>Fields_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">Field.hpp</includes>
    <includes id="VectorSingle_8hpp" name="VectorSingle.hpp" local="yes" imported="no">VectorSingle.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int8 &gt;</type>
      <name>int8Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e09caed11d4f73f97e0d94eb40d3fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d5cdeb3dc29cc9d49ecadf5c6fdfd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int16 &gt;</type>
      <name>int16Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecfeded2edb724ab9b96d80dd1162217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int16, HostSpace &gt;</type>
      <name>int16Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adfff7ac861d39728625d7fa6a0601852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32 &gt;</type>
      <name>int32Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a89b2c5782d391dc8a974f4043d8d7ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32, HostSpace &gt;</type>
      <name>int32Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3f8b47408a022434297013e670252046</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64 &gt;</type>
      <name>int64Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adfa7ebf09e95c68d0224a4689d853b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64, HostSpace &gt;</type>
      <name>int64Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adc01fab0d6e5b1f68eae0d6c363a3c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32 &gt;</type>
      <name>uint32Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c7c97510ed3e336bf0b96ecd36bd6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32, HostSpace &gt;</type>
      <name>uint32Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9ef7d5747f5d9df6eb4f628dbe7fec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, label &gt;</type>
      <name>labelField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a841e526316157c97d3a6464d8f4bdeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, label, HostSpace &gt;</type>
      <name>labelField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e1b45a14a123e9506c2f5b1cb52d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, real &gt;</type>
      <name>realField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af835cf0cfb1ce12cd4ee4a6bcd42b7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac1d42f542946752bbb15b2e0d0a9e1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aee8ae24174111b9caf1bc31c32fa0744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a98ee42fe64680818b1a5d5ffa18a017a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint16x3 &gt;</type>
      <name>uint16x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6d0dbf8cfe4485c0ae023061d6351854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint16x3, HostSpace &gt;</type>
      <name>uint16x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2ce5432294b08715376707f3c74712cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32x3 &gt;</type>
      <name>uint32x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6746dd14191baa45cde4101e5a08d4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32x3, HostSpace &gt;</type>
      <name>uint32x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1d0c447e3670b06cc0992fc8ad801635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32x3 &gt;</type>
      <name>int32x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa75659d80bbbeefc05cfb02480e23907</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32x3, HostSpace &gt;</type>
      <name>int32x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5c3bb5c338f80d2dca4e70bac09f555d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64x3 &gt;</type>
      <name>int64x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44fdbd60679faa1eb17c4c7cdec64f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64x3, HostSpace &gt;</type>
      <name>int64x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac18e52190cdebd798fbf107f8c0e9fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3x3 &gt;</type>
      <name>realx3x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9ee284a8d52e46ac4b54ed4ef9aceb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3x3, HostSpace &gt;</type>
      <name>realx3x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a01da6ce0ebf22ff3d3da65f4ed5774f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, word, HostSpace &gt;</type>
      <name>wordField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a791cfb306a9333d7b4b4c2f39b291b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int8 &gt;</type>
      <name>int8Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab961c8edd5b57f034f472e7ee6fd8b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int16 &gt;</type>
      <name>int16Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d3080db5d0adee2b1bc10bc38730cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int32 &gt;</type>
      <name>int32Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1cb049682d41ccb526d221883aa6ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int64 &gt;</type>
      <name>int64Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0b221aabb6f82413a8dd216a6e5f8ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32 &gt;</type>
      <name>uint32Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2e88b2ed701aef940c715cd598d995f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, label &gt;</type>
      <name>labelField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af0e94af8949a0d5166039e8d6dfe4e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, real &gt;</type>
      <name>realField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade5939cd1656bb3a4fc789fb7ac01906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, realx3 &gt;</type>
      <name>realx3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8808645f7e1b2cb6525158948d98bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32x3 &gt;</type>
      <name>uint16x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6a9956fddee1bef2aed54049165a182a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32x3 &gt;</type>
      <name>uint32x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac7e15230be5e8b89befdce2709b71b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int32x3 &gt;</type>
      <name>int32x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae4ce18a487e4b33ad366be6865d33949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int64x3 &gt;</type>
      <name>int64x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9060d10e1e6bed3edbb021c4cb6dd94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, realx3x3 &gt;</type>
      <name>realx3x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9327600dfb70ca78fe75a84468447ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; Vector, word, vecAllocator&lt; word &gt; &gt;</type>
      <name>wordField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61e5aece937951a8c48ca31c49e399fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indexContainer.cpp</name>
    <path>src/phasicFlow/containers/indexContainer/</path>
    <filename>indexContainer_8cpp.html</filename>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
  </compound>
  <compound kind="file">
    <name>indexContainer.hpp</name>
    <path>src/phasicFlow/containers/indexContainer/</path>
    <filename>indexContainer_8hpp.html</filename>
    <includes id="span_8hpp" name="span.hpp" local="yes" imported="no">span.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="KokkosUtilities_8hpp" name="KokkosUtilities.hpp" local="yes" imported="no">KokkosUtilities.hpp</includes>
    <includes id="ViewAlgorithms_8hpp" name="ViewAlgorithms.hpp" local="yes" imported="no">ViewAlgorithms.hpp</includes>
    <class kind="class">pFlow::indexContainer</class>
    <class kind="class">pFlow::indexContainer::IndexAccessor</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>indexContainer&lt; int32 &gt;</type>
      <name>int32IndexContainer</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27c4d9af27a6e7595097b77d05874147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>indexContainer&lt; int64 &gt;</type>
      <name>int64IndexContainer</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa62dd25b29d6806bbf79e3c55949b3bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>List.hpp</name>
    <path>src/phasicFlow/containers/List/List/</path>
    <filename>List_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="ListI_8hpp" name="ListI.hpp" local="yes" imported="no">ListI.hpp</includes>
    <class kind="class">pFlow::List</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>List&lt; int64 &gt;</type>
      <name>int64List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a34be84cb0022daf92dc6eaa34fa5cdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int32 &gt;</type>
      <name>int32List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0b6787f0db27d9f45a8c70c88210d97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int16 &gt;</type>
      <name>int16List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ad94e91a40ce8e2ffbf7a35c52776b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int8 &gt;</type>
      <name>int8List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afa8a2063627c0e0ccea1e38b2c9b0791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; label &gt;</type>
      <name>labelList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a08eb7fbbec6aeb3b7f1db44576752656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; uint32 &gt;</type>
      <name>uint32List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5523c3e7ce7b6119fc521723c06542a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; real &gt;</type>
      <name>realList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d452d2b90bf5ffd681ba78482296184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; realx3 &gt;</type>
      <name>realx3List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab51e83f5c5e58f65bfa52eac14901841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; realx3x3 &gt;</type>
      <name>realx3x3List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae4649f2fb3a730534353e2dee670b96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; bool &gt;</type>
      <name>boolList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2b6adfad58b8dc4be5a09d9e1ed9413a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; word &gt;</type>
      <name>wordList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac2c8831a940f11de069cd73eb255b3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a58232dc20e4ae1f363a0ddad010c6f3e</anchor>
      <arglist>(iOstream &amp;os, const List&lt; T &gt; &amp;lst)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aad6532ab31d16e255bd9cf0618d505f5</anchor>
      <arglist>(iIstream &amp;is, List&lt; T &gt; &amp;lst)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ListI.hpp</name>
    <path>src/phasicFlow/containers/List/List/</path>
    <filename>ListI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>ListPtr.hpp</name>
    <path>src/phasicFlow/containers/List/ListPtr/</path>
    <filename>ListPtr_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="ListPtrI_8hpp" name="ListPtrI.hpp" local="yes" imported="no">ListPtrI.hpp</includes>
    <class kind="class">pFlow::ListPtr</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>ListPtrI.hpp</name>
    <path>src/phasicFlow/containers/List/ListPtr/</path>
    <filename>ListPtrI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Lists.hpp</name>
    <path>src/phasicFlow/containers/List/</path>
    <filename>Lists_8hpp.html</filename>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="ListPtr_8hpp" name="ListPtr.hpp" local="yes" imported="no">ListPtr.hpp</includes>
  </compound>
  <compound kind="file">
    <name>hashMap.hpp</name>
    <path>src/phasicFlow/containers/Map/hashMap/</path>
    <filename>hashMap_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="hashMapI_8hpp" name="hashMapI.hpp" local="yes" imported="no">hashMapI.hpp</includes>
    <class kind="class">pFlow::hashMap</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>hashMap&lt; word, T &gt;</type>
      <name>wordHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac3bade448fe22b2e9d66a82ed4b83326</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; label, T &gt;</type>
      <name>labelHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae3e3ec0f83bdfe2e683d53462ebb5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; uint32, T &gt;</type>
      <name>uint32HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d1faf1e033cb51d67f6a95b3b389a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; int64, T &gt;</type>
      <name>int64HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa1a2f59893d9acb11552f1935281d575</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; int32, T &gt;</type>
      <name>int32HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a46014268016e1b82c7136895d790ba01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a04e7886e9db0fc025dc700d2a37decc2</anchor>
      <arglist>(iOstream &amp;os, const wordHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9246ea38c24181059226ab4ee3539cf6</anchor>
      <arglist>(iOstream &amp;os, const labelHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a04bb74b80f11a4bd3d6bcae727584073</anchor>
      <arglist>(iOstream &amp;os, const uint32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a873efed137dfcf6a20ae8ad03c16c2d7</anchor>
      <arglist>(iOstream &amp;os, const int64HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8bc06d707d708fcd33c4bdc5e9ad4c6</anchor>
      <arglist>(iOstream &amp;os, const int32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hashMapI.hpp</name>
    <path>src/phasicFlow/containers/Map/hashMap/</path>
    <filename>hashMapI_8hpp.html</filename>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>hashMapI_8hpp.html</anchorfile>
      <anchor>a04e7886e9db0fc025dc700d2a37decc2</anchor>
      <arglist>(iOstream &amp;os, const wordHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>hashMapI_8hpp.html</anchorfile>
      <anchor>a9246ea38c24181059226ab4ee3539cf6</anchor>
      <arglist>(iOstream &amp;os, const labelHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>hashMapI_8hpp.html</anchorfile>
      <anchor>a04bb74b80f11a4bd3d6bcae727584073</anchor>
      <arglist>(iOstream &amp;os, const uint32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>hashMapI_8hpp.html</anchorfile>
      <anchor>a873efed137dfcf6a20ae8ad03c16c2d7</anchor>
      <arglist>(iOstream &amp;os, const int64HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>hashMapI_8hpp.html</anchorfile>
      <anchor>aa8bc06d707d708fcd33c4bdc5e9ad4c6</anchor>
      <arglist>(iOstream &amp;os, const int32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Map.hpp</name>
    <path>src/phasicFlow/containers/Map/Map/</path>
    <filename>Map_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="MapI_8hpp" name="MapI.hpp" local="yes" imported="no">MapI.hpp</includes>
    <class kind="class">pFlow::Map</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>Map&lt; word, T &gt;</type>
      <name>wordMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3eab0a0892cd36167818183a5f30fd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; label, T &gt;</type>
      <name>labelMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4008897b621b651d5dde438cbaf4253b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; uint32, T &gt;</type>
      <name>uint32Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a14136715e2225e0cb476fc25849fa3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; int32, T &gt;</type>
      <name>int32Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9228b9fe5857f9af566c7fbe0632e56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; int64, T &gt;</type>
      <name>int64Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a356ffdf106d49c2f19cdd67722c4548e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aea271b5dea1d0db60f05c5bda0a2c70f</anchor>
      <arglist>(iOstream &amp;os, const wordMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af2195dd0bdd8a19c9bb949bfffb6319f</anchor>
      <arglist>(iOstream &amp;os, const labelMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab8a6ef1fd6acfe7b1d042101525b39f2</anchor>
      <arglist>(iOstream &amp;os, const uint32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1aa600412d3af9c4019b72abe114eda0</anchor>
      <arglist>(iOstream &amp;os, const int32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef2a2da8abc154de409cbc8c1a453fb3</anchor>
      <arglist>(iOstream &amp;os, const int64Map&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MapI.hpp</name>
    <path>src/phasicFlow/containers/Map/Map/</path>
    <filename>MapI_8hpp.html</filename>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>MapI_8hpp.html</anchorfile>
      <anchor>aea271b5dea1d0db60f05c5bda0a2c70f</anchor>
      <arglist>(iOstream &amp;os, const wordMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>MapI_8hpp.html</anchorfile>
      <anchor>ab8a6ef1fd6acfe7b1d042101525b39f2</anchor>
      <arglist>(iOstream &amp;os, const uint32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>MapI_8hpp.html</anchorfile>
      <anchor>af2195dd0bdd8a19c9bb949bfffb6319f</anchor>
      <arglist>(iOstream &amp;os, const labelMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>MapI_8hpp.html</anchorfile>
      <anchor>a1aa600412d3af9c4019b72abe114eda0</anchor>
      <arglist>(iOstream &amp;os, const int32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>MapI_8hpp.html</anchorfile>
      <anchor>aef2a2da8abc154de409cbc8c1a453fb3</anchor>
      <arglist>(iOstream &amp;os, const int64Map&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MapPtr.hpp</name>
    <path>src/phasicFlow/containers/Map/MapPtr/</path>
    <filename>MapPtr_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="MapPtrI_8hpp" name="MapPtrI.hpp" local="yes" imported="no">MapPtrI.hpp</includes>
    <class kind="class">pFlow::MapPtr</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>MapPtr&lt; std::map, key, T &gt;</type>
      <name>orderedMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a42590be2b02ef9a0e107e33bb3bbc683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MapPtr&lt; std::unordered_map, key, T &gt;</type>
      <name>hashMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acbe8e7417587aaa9a51e243db8a018e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>orderedMapPtr&lt; word, T &gt;</type>
      <name>wordOrderedMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a21c5ae841990a6325fdc97c9313f3d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMapPtr&lt; word, T &gt;</type>
      <name>wordHashMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a906a8e3cc7582566ebc1928efc6ec3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb1aa570817657ba2c2fccd07e1dd920</anchor>
      <arglist>(iOstream &amp;os, const wordHashMapPtr&lt; T &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>MapPtrI.hpp</name>
    <path>src/phasicFlow/containers/Map/MapPtr/</path>
    <filename>MapPtrI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Maps.hpp</name>
    <path>src/phasicFlow/containers/Map/</path>
    <filename>Maps_8hpp.html</filename>
    <includes id="Map_8hpp" name="Map.hpp" local="yes" imported="no">Map.hpp</includes>
    <includes id="hashMap_8hpp" name="hashMap.hpp" local="yes" imported="no">hashMap.hpp</includes>
    <includes id="MapPtr_8hpp" name="MapPtr.hpp" local="yes" imported="no">MapPtr.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pointField.cpp</name>
    <path>src/phasicFlow/containers/pointField/</path>
    <filename>pointField_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>pointField.hpp</name>
    <path>src/phasicFlow/containers/pointField/</path>
    <filename>pointField_8hpp.html</filename>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">Field.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="pointField_8cpp" name="pointField.cpp" local="yes" imported="no">pointField.cpp</includes>
    <includes id="pointFieldAlgorithms_8hpp" name="pointFieldAlgorithms.hpp" local="yes" imported="no">pointFieldAlgorithms.hpp</includes>
    <class kind="class">pFlow::pointField</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18acd30183a8307f6fccede034df06cd</anchor>
      <arglist>(iIstream &amp;is, pointField&lt; VectorField, T, MemorySpace &gt; &amp;pF)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15bafeb4dd9ea98f5a531d013eda3e3d</anchor>
      <arglist>(iOstream &amp;os, const pointField&lt; VectorField, T, MemorySpace &gt; &amp;pF)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointFieldAlgorithms.hpp</name>
    <path>src/phasicFlow/containers/pointField/</path>
    <filename>pointFieldAlgorithms_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>T</type>
      <name>maxActive_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac183657efe4ea32f6192ab43f9ec74b5</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft, Kokkos::HostSpace &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>maxActiveH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8262d8d2fba9ae48411373216f0b4fa2</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft, Kokkos::HostSpace &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>maxActiveD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9f1af27129c76c78d73236fa57140aea</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxActive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72ec47ef8814b66b02f05638915de39a</anchor>
      <arglist>(const pointField&lt; VectorSingle, T, MemorySpace &gt; &amp;pField)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxActive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3e965b41d633e5cf2c1d880ff29a8ec2</anchor>
      <arglist>(const pointField&lt; VectorDual, T, MemorySpace &gt; &amp;pField)</arglist>
    </member>
    <member kind="variable">
      <type>const auto</type>
      <name>ActivePoint</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1df94b262ac1e47891251788a9646f4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointFields.cpp</name>
    <path>src/phasicFlow/containers/pointField/</path>
    <filename>pointFields_8cpp.html</filename>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pointFields.hpp</name>
    <path>src/phasicFlow/containers/pointField/</path>
    <filename>pointFields_8hpp.html</filename>
    <includes id="VectorSingle_8hpp" name="VectorSingle.hpp" local="yes" imported="no">VectorSingle.hpp</includes>
    <includes id="pointField_8hpp" name="pointField.hpp" local="yes" imported="no">pointField.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, T, HostSpace &gt;</type>
      <name>pointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a09c79f0e74d5dd4336dca6ab67c032c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, T &gt;</type>
      <name>pointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4187027a579f8df9e0573db3eeb0bb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, T &gt;</type>
      <name>pointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c1c285bee9b232c99aba17687441238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int8 &gt;</type>
      <name>int8PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac0758d3abd533bea960d00d4b090d7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61025fd78a2d36729cd7a36ffacfd10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int16 &gt;</type>
      <name>int16PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb0c62873d01620a42abf3b3d65bdb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int16, HostSpace &gt;</type>
      <name>int16PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a91de51c84b8b5517d9fc37b6028a9196</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int32 &gt;</type>
      <name>int32PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4266150006aeaf3f8cc337c457dc8b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int32, HostSpace &gt;</type>
      <name>int32PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a435a95e4c15094378d9422cb9d06e195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int64 &gt;</type>
      <name>int64PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2fa4b6e4c318ec336289288637d73f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int64, HostSpace &gt;</type>
      <name>int64PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a3ac15d17d1e51c3135b259793e1fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, uint32 &gt;</type>
      <name>uint32PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afc91f4ae090af1a260fe984aeb6f8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, uint32, HostSpace &gt;</type>
      <name>uint32PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6f58e089cbe38856864ad2f8f1d142c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, label &gt;</type>
      <name>labelPointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3665760473641e4508e521b2ce8c40ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, label, HostSpace &gt;</type>
      <name>labelPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ace2d7d703d387c85e5b085e9cf395ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, real &gt;</type>
      <name>realPointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac5d59f7d75bbf030e7fd2223d42f551b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a37b7910ed794bcf96dffec6c26e50c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b286cf0e92d888964d5691196b6c151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a35afa74efc5b7151c4f6368bab484065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, word, HostSpace &gt;</type>
      <name>wordPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48bee2169ca4f08e8d0b2bb69924a63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int8 &gt;</type>
      <name>int8PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e23b118ff6e2556116bf1d2407b3299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int16 &gt;</type>
      <name>int16PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a64182b010b93655dea7296d8cc0661ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int32 &gt;</type>
      <name>int32PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0aa4fea0cb8c686926eddc3b7280420c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int64 &gt;</type>
      <name>int64PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab44b56c7a3daf9bbe5176422166dbe8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, uint32 &gt;</type>
      <name>uint32PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab648bfdd35f60cf5a39f758a58afd498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, label &gt;</type>
      <name>labelPointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aebb8489198eaf346132534bed50cd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, real &gt;</type>
      <name>realPointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a930c96ef7776e294a48b805e1a0d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, realx3 &gt;</type>
      <name>realx3PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2e3a51140f72abac829aa55055d3f68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; Vector, word, vecAllocator&lt; word &gt; &gt;</type>
      <name>wordPointField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a242ff29005847ad17d02d58900a946b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Set.hpp</name>
    <path>src/phasicFlow/containers/Set/</path>
    <filename>Set_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>std::set&lt; Key, std::less&lt; Key &gt;, std::allocator&lt; Key &gt; &gt;</type>
      <name>Set</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5a3972b374b884e9021d78ba9ea58014</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>span.hpp</name>
    <path>src/phasicFlow/containers/span/</path>
    <filename>span_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <class kind="class">pFlow::span</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b23ae61614b6ee9621f02ba76f8919a</anchor>
      <arglist>(iOstream &amp;os, const span&lt; T &gt; &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symArrayHD.hpp</name>
    <path>src/phasicFlow/containers/symArrayHD/</path>
    <filename>symArrayHD_8hpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="yes" imported="no">Vector.hpp</includes>
    <class kind="class">pFlow::symArray</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>SWAP</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a17b80dbe0659cde09c2988647271f46f</anchor>
      <arglist>(Type &amp;x, Type &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7cab1ce81a510fab054e64c0e6323375</anchor>
      <arglist>(iIstream &amp;is, symArray&lt; T, MemorySpace &gt; &amp;iArr)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a575e57396e2c4398e172724566a1d2c7</anchor>
      <arglist>(iOstream &amp;os, const symArray&lt; T, MemorySpace &gt; &amp;oArr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>symArrays.cpp</name>
    <path>src/phasicFlow/containers/symArrayHD/</path>
    <filename>symArrays_8cpp.html</filename>
    <includes id="symArrays_8hpp" name="symArrays.hpp" local="yes" imported="no">symArrays.hpp</includes>
  </compound>
  <compound kind="file">
    <name>symArrays.hpp</name>
    <path>src/phasicFlow/containers/symArrayHD/</path>
    <filename>symArrays_8hpp.html</filename>
    <includes id="symArrayHD_8hpp" name="symArrayHD.hpp" local="yes" imported="no">symArrayHD.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>symArray&lt; real &gt;</type>
      <name>realSymArray_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a151efe6d609064fbcf52e2ffa31cbb06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; real, HostSpace &gt;</type>
      <name>realSymArray_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d0e6eb8ff87487d0b3574ee96623cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; realx3 &gt;</type>
      <name>realx3SymArray_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab04533f661b4fcef84e4907188feef86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; realx3, HostSpace &gt;</type>
      <name>realx3SymArray_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae8dbcfb8e2ecba7f3ac418e21f0ac22d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triSurfaceField.cpp</name>
    <path>src/phasicFlow/containers/triSurfaceField/</path>
    <filename>triSurfaceField_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>triSurfaceField.hpp</name>
    <path>src/phasicFlow/containers/triSurfaceField/</path>
    <filename>triSurfaceField_8hpp.html</filename>
    <includes id="Field_8hpp" name="Field.hpp" local="yes" imported="no">Field.hpp</includes>
    <includes id="triSurface_8hpp" name="triSurface.hpp" local="yes" imported="no">triSurface.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="triSurfaceField_8cpp" name="triSurfaceField.cpp" local="yes" imported="no">triSurfaceField.cpp</includes>
    <class kind="class">pFlow::triSurfaceField</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fa01a37e2aa260e53329fb57750e71c</anchor>
      <arglist>(iIstream &amp;is, triSurfaceField&lt; VectorField, T, MemorySpace &gt; &amp;tsF)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3e625e59cdaf2a71e1f7f3b28ae936f0</anchor>
      <arglist>(iOstream &amp;os, const triSurfaceField&lt; VectorField, T, MemorySpace &gt; &amp;tsF)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triSurfaceFields.cpp</name>
    <path>src/phasicFlow/containers/triSurfaceField/</path>
    <filename>triSurfaceFields_8cpp.html</filename>
    <includes id="triSurfaceFields_8hpp" name="triSurfaceFields.hpp" local="yes" imported="no">triSurfaceFields.hpp</includes>
  </compound>
  <compound kind="file">
    <name>triSurfaceFields.hpp</name>
    <path>src/phasicFlow/containers/triSurfaceField/</path>
    <filename>triSurfaceFields_8hpp.html</filename>
    <includes id="VectorSingle_8hpp" name="VectorSingle.hpp" local="yes" imported="no">VectorSingle.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <includes id="triSurfaceField_8hpp" name="triSurfaceField.hpp" local="yes" imported="no">triSurfaceField.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, real &gt;</type>
      <name>realTriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a88434a63612ef893c7c24b85959251f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realTriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acae810ffca011a72484201e81542c381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3TriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afd682516555bc9f529677a279d60eba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3TriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20a678e59be408f7ba8779b9a25021d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, real &gt;</type>
      <name>realTriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad3c3266c1484ce0f16ee16bd5e021a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, realx3 &gt;</type>
      <name>realx3TriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac6698a999ca334d56f2757b15fd425a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, real, vecAllocator&lt; real &gt; &gt;</type>
      <name>realTriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a721bccebfa887f6d544eed52d09e3144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, realx3, vecAllocator&lt; realx3 &gt; &gt;</type>
      <name>realx3TriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abc31424b5e539c0d9e44b5da0fa2ecb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, int8 &gt;</type>
      <name>int8TriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaa830358734c88d24e4006884d78810f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8TriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acb551675657a508333bd2ecc7820b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, int8 &gt;</type>
      <name>int8TriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44f5e1cd23511168f7eaa308769babbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, int8, vecAllocator&lt; real &gt; &gt;</type>
      <name>int8TriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a99ba1669041dd64adb630a282019ee9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vector.cpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>Vector_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Vector.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>Vector_8hpp.html</filename>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="stdAlgorithms_8hpp" name="stdAlgorithms.hpp" local="yes" imported="no">stdAlgorithms.hpp</includes>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="VectorFwd_8hpp" name="VectorFwd.hpp" local="yes" imported="no">VectorFwd.hpp</includes>
    <includes id="VectorI_8hpp" name="VectorI.hpp" local="yes" imported="no">VectorI.hpp</includes>
    <includes id="Vector_8cpp" name="Vector.cpp" local="yes" imported="no">Vector.cpp</includes>
    <includes id="VectorMath_8hpp" name="VectorMath.hpp" local="yes" imported="no">VectorMath.hpp</includes>
    <includes id="VectorAlgorithm_8hpp" name="VectorAlgorithm.hpp" local="yes" imported="no">VectorAlgorithm.hpp</includes>
    <class kind="struct">RESERVE</class>
    <class kind="class">pFlow::noConstructAllocator</class>
    <class kind="class">pFlow::Vector</class>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__RESERVE__</name>
      <anchorfile>Vector_8hpp.html</anchorfile>
      <anchor>ab70e61ee87e97c97404658e8b0fde30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; T &gt;</type>
      <name>vecAllocator</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a83a37fc944241b7da6aa8785a1997535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15756de78c96b685e8ee7c47ddc5f634</anchor>
      <arglist>(iIstream &amp;is, Vector&lt; T, Allocator &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9656f525dc0c04f916f3e9d24ddc1f53</anchor>
      <arglist>(iOstream &amp;os, const Vector&lt; T, Allocator &gt; &amp;ovec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorAlgorithm.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>VectorAlgorithm_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>auto</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3557595cfa50bcbd2098e44fe7da1bbd</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>count_if</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ba4960022e5995b2a43437d211d8f60</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, UnaryPredicate p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_n</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7a3b9048cba8e3752d30ec81b2fe0cde</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5fde7b7d3d438de86ad820bfa1e51b34</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adc26fdd8debb829267fac2761ddd2896</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, int32 start, int32 end, const T &amp;startVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1565789280599388321087cf22542144</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;startVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e83353786d5cf3406a036b434c7df25</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>find</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af5cb98a7bdec142d1e7e1602c05f0589</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorFwd.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>VectorFwd_8hpp.html</filename>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator+</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a761251806b4b65cb3489709a264d0730</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator+</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a73f650734baacc25e24c365006678512</anchor>
      <arglist>(const T &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator+</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a39cbcacc875417e9b8e85704bb35fb36</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator-</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a5e466a2e07e2be7e66323aa4db29dd2d</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator-</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a8608c1d4998b85822b638857d7d73cc4</anchor>
      <arglist>(const T &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator-</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a0031658c31c2e8760f36b001c8da7da8</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator*</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a8bee1a7bc6ea80ba49c093aff84f1bf6</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator*</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a585a37cb9e6e01e85b19134cedea259a</anchor>
      <arglist>(const T &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator*</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>ad8c66c462c3f43e50aab3bb6465601b9</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator/</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>aeae546621a53610beb0ee3a19ad6cd2f</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const T &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator/</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a9898bc5e5ccffe6df881d3aba4bb0eac</anchor>
      <arglist>(const T &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>operator/</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a4872517c1eb68b0e62b06139a72ceb53</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;op1, const Vector&lt; T, Allocator &gt; &amp;op2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>count</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a3557595cfa50bcbd2098e44fe7da1bbd</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>count_if</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a4ba4960022e5995b2a43437d211d8f60</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, UnaryPredicate p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_n</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a7a3b9048cba8e3752d30ec81b2fe0cde</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a5fde7b7d3d438de86ad820bfa1e51b34</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>VectorFwd_8hpp.html</anchorfile>
      <anchor>a7e83353786d5cf3406a036b434c7df25</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorI.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>VectorI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>VectorMath.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>VectorMath_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>VecFunc</name>
      <anchorfile>VectorMath_8hpp.html</anchorfile>
      <anchor>ad72be126a8149d87494a422e518c36ae</anchor>
      <arglist>(fnName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>VecFunc2</name>
      <anchorfile>VectorMath_8hpp.html</anchorfile>
      <anchor>a81a1de815972f3dbf27f2343ccd40616</anchor>
      <arglist>(fnName)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a530fa16f813e90c80006d8aaf5355192</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, T e)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a87a9eb6493b151788dca5f8967e1b06d</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, T e, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a79babacb046b083e7b9e5d68836dd299</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a39d86db514f10a64ba0af7f057a1370d</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa06b35ab4dd1964fcef892e4577d444f</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab9273a30482c1e7ba2dbf20b06f152c7</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a552cad803d8182425bdfed273022ef14</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a441347cea7fd5193e2e08913cb8776b8</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Vectors.cpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>Vectors_8cpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Vectors.hpp</name>
    <path>src/phasicFlow/containers/Vector/</path>
    <filename>Vectors_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="yes" imported="no">Vector.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>Vector&lt; int8 &gt;</type>
      <name>int8Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a8063cd7823bbad370eda1fccf7f70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int16 &gt;</type>
      <name>int16Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aacff4e3b5b85bcbe8492be180fbd89d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32 &gt;</type>
      <name>int32Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4d3365b9dbfaa1d5d573d1a6b30c10df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int64 &gt;</type>
      <name>int64Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adecb652fac8b0ce10ede2b5144bad869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32 &gt;</type>
      <name>uint32Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a90d3f047f5a86872dd6ee80ebab12b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; label &gt;</type>
      <name>labelVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1765c3ce3f985983901ac24065b3c587</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; real &gt;</type>
      <name>realVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a56fe59023e353f0f237688c06fbfd441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; realx3 &gt;</type>
      <name>realx3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aede0f5a4a44d271e4e260cdb01032a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint16x3 &gt;</type>
      <name>uint16x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1e0762cedc1a048af96e4d9c4035807d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32x3 &gt;</type>
      <name>uint32x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fbcb46b94bdb09a8028d5c2b0072b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32x3 &gt;</type>
      <name>int32x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b3af46b160d6cafec43b41ca3b7323a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int64x3 &gt;</type>
      <name>int64x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a95baabac84a3a0bdd421adcad1fcc7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint16x3x3 &gt;</type>
      <name>uint16x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a86740c70b7b54cfc31f852be97c1df56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32x3x3 &gt;</type>
      <name>uint32x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acb6fa1007c5939fb982cb81c349fb098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32x3x3 &gt;</type>
      <name>int32x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aed9a0960c5da35fc4d3f501a5fd9420d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab067da62570f5563dbc4fc15ba2cc8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; word &gt;</type>
      <name>wordVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e76b0fc4f41684b7dd691cb6552384d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorDual.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorDual_8hpp.html</filename>
    <includes id="globalSettings_8hpp" name="globalSettings.hpp" local="yes" imported="no">globalSettings.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="yes" imported="no">Vector.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="ViewAlgorithms_8hpp" name="ViewAlgorithms.hpp" local="yes" imported="no">ViewAlgorithms.hpp</includes>
    <includes id="VectorDualAlgorithms_8hpp" name="VectorDualAlgorithms.hpp" local="yes" imported="no">VectorDualAlgorithms.hpp</includes>
    <class kind="struct">RESERVE</class>
    <class kind="class">pFlow::VectorDual</class>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__RESERVE__</name>
      <anchorfile>VectorDual_8hpp.html</anchorfile>
      <anchor>ab70e61ee87e97c97404658e8b0fde30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae365f946ba158527dce13ebc6028119e</anchor>
      <arglist>(iIstream &amp;is, VectorDual&lt; T, memory_space &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5d93f8f8bd5616dd47c835267c84bced</anchor>
      <arglist>(iOstream &amp;os, const VectorDual&lt; T, memory_space &gt; &amp;ovec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorDualAlgorithms.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorDualAlgorithms_8hpp.html</filename>
    <includes id="baseAlgorithms_8hpp" name="baseAlgorithms.hpp" local="yes" imported="no">baseAlgorithms.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4a352639c87f6f967c064f9e46c3495f</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e3b76cb1f11091ab9905cabc141a633</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecd5f39754707b589843d71cbb6b7d1c</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3c07a156ad839dccd59a9886a621e20c</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac13cdd53f8951fe2cf059730cad35ffb</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72a26112ed68f8f2e1e93ce23a5081e2</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorDuals.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorDuals_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="VectorDual_8hpp" name="VectorDual.hpp" local="yes" imported="no">VectorDual.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>VectorDual&lt; int8 &gt;</type>
      <name>int8Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab794e608e49115b9cf5c0e5e19dbaa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int16 &gt;</type>
      <name>int16Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad5d5affdbe68c215b18355c7741883d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int32 &gt;</type>
      <name>int32Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab0cbdf73136c790bc69f33564d337408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int64 &gt;</type>
      <name>int64Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aee328a320295ba84297cb69f890a778d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; uint32 &gt;</type>
      <name>uint32Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85eac2c18d8d95fb4c23ec4708a4ec9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; label &gt;</type>
      <name>labelVector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1e97390670f1269846e4206301850e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; real &gt;</type>
      <name>realVector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aabed1383f227ba50ae6e1afeb38ed24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; realx3 &gt;</type>
      <name>realx3Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1779736a41e83dbcd22f6ca0cf170e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afc623b3031d9434695205d6dee6cdac7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorSingle.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorSingle_8hpp.html</filename>
    <includes id="globalSettings_8hpp" name="globalSettings.hpp" local="yes" imported="no">globalSettings.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="Vector_8hpp" name="Vector.hpp" local="yes" imported="no">Vector.hpp</includes>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="ViewAlgorithms_8hpp" name="ViewAlgorithms.hpp" local="yes" imported="no">ViewAlgorithms.hpp</includes>
    <includes id="VectorSingleAlgorithms_8hpp" name="VectorSingleAlgorithms.hpp" local="yes" imported="no">VectorSingleAlgorithms.hpp</includes>
    <class kind="struct">RESERVE</class>
    <class kind="class">pFlow::VectorSingle</class>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>__RESERVE__</name>
      <anchorfile>VectorSingle_8hpp.html</anchorfile>
      <anchor>ab70e61ee87e97c97404658e8b0fde30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab4718df51d86110cdc720a35a2b9eed9</anchor>
      <arglist>(iIstream &amp;is, VectorSingle&lt; T, MemorySpace &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7561741d1d25aaeb791389b07eb0bba</anchor>
      <arglist>(iOstream &amp;os, const VectorSingle&lt; T, MemorySpace &gt; &amp;ovec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorSingleAlgorithms.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorSingleAlgorithms_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1519b715db340d7153f1226c250afe10</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a764ec04ded3d5d6a8ea39597684c4b13</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a38f9fcaea58ef894338bd91a9730151b</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>VectorSingles.hpp</name>
    <path>src/phasicFlow/containers/VectorHD/</path>
    <filename>VectorSingles_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="VectorSingle_8hpp" name="VectorSingle.hpp" local="yes" imported="no">VectorSingle.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>VectorSingle&lt; int8 &gt;</type>
      <name>int8Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac91e952c3a8f9438e5c8bfb93f4094e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int8, HostSpace &gt;</type>
      <name>int8Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a767fab5705dae43ebad8fca527814905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int16 &gt;</type>
      <name>int16Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fd0e12808b68238b34b8ce91fee87dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int16, HostSpace &gt;</type>
      <name>int16Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2922890672759a3ef3f74d2cbb0045f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32 &gt;</type>
      <name>int32Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a548dbb86f2b3fb0513b23daa8ac8f189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32, HostSpace &gt;</type>
      <name>int32Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a751d9816bbb35284a9a8a499b5748107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64 &gt;</type>
      <name>int64Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acc0003bf19253591e9b5487c7fc8ead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64, HostSpace &gt;</type>
      <name>int64Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a101356f7b0d8a873ec5fc2a76b9988ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32 &gt;</type>
      <name>uint32Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6c4463aa3523af8dd7409d33f2f98e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32, HostSpace &gt;</type>
      <name>uint32Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15f32b513a1757dc4a0ff05292254b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; label &gt;</type>
      <name>labelVector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9bb4eba43afe209d2198ae6866fc3b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; label, HostSpace &gt;</type>
      <name>labelVector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48264f64c7f09121a5e9dd18a05332e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; real &gt;</type>
      <name>realVector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abcf780498c2fa21662ffb27b22056cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; real, HostSpace &gt;</type>
      <name>realVector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a82a82591ca980d983da36337fd7636a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3 &gt;</type>
      <name>realx3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a648e9586ec15d127938511ea0e11b215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3, HostSpace &gt;</type>
      <name>realx3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa94e1b6d6afb9a1b9ec064b689c11bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint16x3 &gt;</type>
      <name>uint16x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a1a34514b410b2e97e5a3c31f085848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint16x3, HostSpace &gt;</type>
      <name>uint16x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe53753791e84f87d18dd61355290954</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32x3 &gt;</type>
      <name>uint32x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afcd161d12007c0285e05217f48ced926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32x3, HostSpace &gt;</type>
      <name>uint32x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaee78c0b9b731b03e9d6a504c24153ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32x3 &gt;</type>
      <name>int32x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0e261b3758f76a1542108fd76b517180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32x3, HostSpace &gt;</type>
      <name>int32x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aebe39b95317e999f81042bf0d046738c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64x3 &gt;</type>
      <name>int64x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c0e37bcf6ea08bf96cb57520187953a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64x3, HostSpace &gt;</type>
      <name>int64x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a05295afd498bbc07c1a0c04ae42a02c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9bfa3b4b0794b58e5e00c94608c763a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3x3, HostSpace &gt;</type>
      <name>realx3x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0d4b8229526695fde8d8dca751817114</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dictionary.cpp</name>
    <path>src/phasicFlow/dictionary/</path>
    <filename>dictionary_8cpp.html</filename>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dictionary.hpp</name>
    <path>src/phasicFlow/dictionary/</path>
    <filename>dictionary_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="iEntry_8hpp" name="iEntry.hpp" local="yes" imported="no">iEntry.hpp</includes>
    <includes id="dataEntry_8hpp" name="dataEntry.hpp" local="yes" imported="no">dataEntry.hpp</includes>
    <includes id="MapPtr_8hpp" name="MapPtr.hpp" local="yes" imported="no">MapPtr.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <class kind="class">pFlow::dictionary</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>dataEntry.cpp</name>
    <path>src/phasicFlow/dictionary/entry/</path>
    <filename>dataEntry_8cpp.html</filename>
    <includes id="dataEntry_8hpp" name="dataEntry.hpp" local="yes" imported="no">dataEntry.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iTstream_8hpp" name="iTstream.hpp" local="yes" imported="no">iTstream.hpp</includes>
    <includes id="oTstream_8hpp" name="oTstream.hpp" local="yes" imported="no">oTstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dataEntry.hpp</name>
    <path>src/phasicFlow/dictionary/entry/</path>
    <filename>dataEntry_8hpp.html</filename>
    <includes id="iEntry_8hpp" name="iEntry.hpp" local="yes" imported="no">iEntry.hpp</includes>
    <includes id="iTstream_8hpp" name="iTstream.hpp" local="yes" imported="no">iTstream.hpp</includes>
    <includes id="oTstream_8hpp" name="oTstream.hpp" local="yes" imported="no">oTstream.hpp</includes>
    <class kind="class">pFlow::dataEntry</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>iEntry.cpp</name>
    <path>src/phasicFlow/dictionary/entry/</path>
    <filename>iEntry_8cpp.html</filename>
    <includes id="iEntry_8hpp" name="iEntry.hpp" local="yes" imported="no">iEntry.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="dataEntry_8hpp" name="dataEntry.hpp" local="yes" imported="no">dataEntry.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iEntry.hpp</name>
    <path>src/phasicFlow/dictionary/entry/</path>
    <filename>iEntry_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <class kind="class">pFlow::iEntry</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fac1751009535200c4b9149d8e203a8</anchor>
      <arglist>(iOstream &amp;os, const iEntry &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ac5d731b3cff8555665377859d300f0</anchor>
      <arglist>(iIstream &amp;is, iEntry &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>twoPartEntry.cpp</name>
    <path>src/phasicFlow/dictionary/twoPartEntry/</path>
    <filename>twoPartEntry_8cpp.html</filename>
    <includes id="twoPartEntry_8hpp" name="twoPartEntry.hpp" local="yes" imported="no">twoPartEntry.hpp</includes>
  </compound>
  <compound kind="file">
    <name>twoPartEntry.hpp</name>
    <path>src/phasicFlow/dictionary/twoPartEntry/</path>
    <filename>twoPartEntry_8hpp.html</filename>
    <includes id="dataEntry_8hpp" name="dataEntry.hpp" local="yes" imported="no">dataEntry.hpp</includes>
    <class kind="class">pFlow::twoPartEntry</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>isTwoPartEntry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70a0d5a242b0aeaf4399e556a1b74828</anchor>
      <arglist>(dataEntry entry)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>eventMessage.hpp</name>
    <path>src/phasicFlow/eventSubscriber/</path>
    <filename>eventMessage_8hpp.html</filename>
    <class kind="class">pFlow::eventMessage</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>eventObserver.cpp</name>
    <path>src/phasicFlow/eventSubscriber/</path>
    <filename>eventObserver_8cpp.html</filename>
    <includes id="eventObserver_8hpp" name="eventObserver.hpp" local="yes" imported="no">eventObserver.hpp</includes>
    <includes id="eventSubscriber_8hpp" name="eventSubscriber.hpp" local="yes" imported="no">eventSubscriber.hpp</includes>
  </compound>
  <compound kind="file">
    <name>eventObserver.hpp</name>
    <path>src/phasicFlow/eventSubscriber/</path>
    <filename>eventObserver_8hpp.html</filename>
    <includes id="eventMessage_8hpp" name="eventMessage.hpp" local="yes" imported="no">eventMessage.hpp</includes>
    <class kind="class">pFlow::eventObserver</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>eventSubscriber.cpp</name>
    <path>src/phasicFlow/eventSubscriber/</path>
    <filename>eventSubscriber_8cpp.html</filename>
    <includes id="eventSubscriber_8hpp" name="eventSubscriber.hpp" local="yes" imported="no">eventSubscriber.hpp</includes>
    <includes id="Set_8hpp" name="Set.hpp" local="yes" imported="no">Set.hpp</includes>
  </compound>
  <compound kind="file">
    <name>eventSubscriber.hpp</name>
    <path>src/phasicFlow/eventSubscriber/</path>
    <filename>eventSubscriber_8hpp.html</filename>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="eventObserver_8hpp" name="eventObserver.hpp" local="yes" imported="no">eventObserver.hpp</includes>
    <includes id="eventMessage_8hpp" name="eventMessage.hpp" local="yes" imported="no">eventMessage.hpp</includes>
    <class kind="class">pFlow::eventSubscriber</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>fileSystem.cpp</name>
    <path>src/phasicFlow/fileSystem/</path>
    <filename>fileSystem_8cpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fileSystem.hpp</name>
    <path>src/phasicFlow/fileSystem/</path>
    <filename>fileSystem_8hpp.html</filename>
    <includes id="bTypes_8hpp" name="bTypes.hpp" local="yes" imported="no">bTypes.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <class kind="class">pFlow::fileSystem</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>List&lt; fileSystem &gt;</type>
      <name>fileSystemList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2449e323a463d498993ca38cbf50e748</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8f03ae73e81fe970f3bb40f15d55a2d3</anchor>
      <arglist>(iOstream &amp;os, fileSystem fs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a561119659a57977cfa140aac28d157eb</anchor>
      <arglist>(std::ostream &amp;os, fileSystem fs)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>operator/</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a876ef3ad73dadbed86887793dd7d40d5</anchor>
      <arglist>(const fileSystem &amp;fs1, const fileSystem &amp;fs2)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>operator+</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5cd91fb7db40f36f823898effd91fc67</anchor>
      <arglist>(const fileSystem &amp;fs1, const word fName)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>CWD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24c8de74cc53b1986586b12a3d9c4c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a646799ea535c7800d608f750bed76a1e</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegularFile</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8a2c4dd123ea5ac20d0a98d5076e510</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fileSystemList</type>
      <name>subDirectories</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae21b012a6bc672b99ddbb629f4ecce09</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fileSystemList</type>
      <name>containingFiles</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a79c4a81c7fb0a27aabdb1b4a73c750d8</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.cpp</name>
    <path>src/phasicFlow/globals/</path>
    <filename>error_8cpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>fatalErrorMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>aa191fdc92e2706ebb9c3785694a2da18</anchor>
      <arglist>(const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>fatalErrorInMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>a25f17ec94fe298a8f51765c0ed3d0165</anchor>
      <arglist>(const char *fnName, const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>notImplementedErrorMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>a7153b01de71717eb0326ffb57c61de89</anchor>
      <arglist>(const char *fnName, const char *fileName, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>ioErrorMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>abedd063514417f09cdbcebabe09c7052</anchor>
      <arglist>(const char *fileName, int fileLineNumber, const char *fnName, const char *fName, int lNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>ioErrorMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>aaf4b62ae957e44815f0ef5245934a792</anchor>
      <arglist>(const pFlow::word &amp;fileName, int fileLineNumber, const char *fnName, const char *fName, int lNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>warningMessage</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>ab0b730e38580ca15c21426f34364fb0c</anchor>
      <arglist>(const char *fnName, const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>reportAndExit</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>a4d68ae150a0434f5c489051780a5f040</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static pFlow::Ostream &amp;</type>
      <name>errorStream</name>
      <anchorfile>error_8cpp.html</anchorfile>
      <anchor>a5eb018080f1db7b439575b673d5d5bf2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.hpp</name>
    <path>src/phasicFlow/globals/</path>
    <filename>error_8hpp.html</filename>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>fatalError</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>adfe9ae1313e6913aca3f96d3eb67906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fatalErrorIn</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>af6c6984e23cb04e9a23cbffaddfdeb31</anchor>
      <arglist>(functionName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fatalErrorInFunction</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>aca9aa547c8441e4410a65a2ce7c21554</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Not_Implemented</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a8c0f77a1055614c58dcf89322035dcfb</anchor>
      <arglist>(functionName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>notImplementedFunction</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a6d29ef74f19f6d5a225841705985eb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ioErrorInFile</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a83efa053dfcfcef04cc0e721c0314ff3</anchor>
      <arglist>(fileName, lineNumber)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>warningIn</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a05bf53f02e547e2984101062aa87f595</anchor>
      <arglist>(functionName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>warningInFunction</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a889d5e8bf195a24964ffb883bcb2fc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>fatalExit</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>aad22a1cd3b45a97ac8cd195f06fe61fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>fatalErrorMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>aa191fdc92e2706ebb9c3785694a2da18</anchor>
      <arglist>(const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>fatalErrorInMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a25f17ec94fe298a8f51765c0ed3d0165</anchor>
      <arglist>(const char *fnName, const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>notImplementedErrorMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a7153b01de71717eb0326ffb57c61de89</anchor>
      <arglist>(const char *fnName, const char *fileName, int lineNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>ioErrorMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>aaf4b62ae957e44815f0ef5245934a792</anchor>
      <arglist>(const pFlow::word &amp;fileName, int fileLineNumber, const char *fnName, const char *fName, int lNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>ioErrorMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>abedd063514417f09cdbcebabe09c7052</anchor>
      <arglist>(const char *fileName, int fileLineNumber, const char *fnName, const char *fName, int lNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>warningMessage</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>ab0b730e38580ca15c21426f34364fb0c</anchor>
      <arglist>(const char *fnName, const char *fileName, int linNumber)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::iOstream &amp;</type>
      <name>reportAndExit</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a4d68ae150a0434f5c489051780a5f040</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>globalSettings.hpp</name>
    <path>src/phasicFlow/globals/</path>
    <filename>globalSettings_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="variable">
      <type>const double</type>
      <name>vectorGrowthFactor__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acfa3f2ec2e5e10585fb442131312fde1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pFlowMacros.hpp</name>
    <path>src/phasicFlow/globals/</path>
    <filename>pFlowMacros_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_NAME</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a922d2784284e8f6ee4009c3d92ba48b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UNUSED</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a86d500a34c624c2cae56bc25a31b12f3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CONSUME_PARAM</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>aee00d54cd02615bc094de03967dde20d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INLINE_FUNCTION_HD</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a8e2f73fa5c113f21c9c9edb67a974f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INLINE_FUNCTION_D</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a6177c0222917536554cd98581ed0206e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INLINE_FUNCTION_H</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a542d326bc30e30d52e9deb402759b872</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAMBDA_HD</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>aa7d4742cdf24a3792276e669531d145c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>LAMBDA_D</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>ad08d330e4976327555a114b3ba2be4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CLASS_LAMBDA_HD</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>ab36ec3552aba732234f4d4cb5fa37d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_HD</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a33a666cbe329b9d3d1d607ac93fc12b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_H</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a4a0e2a760ea30cb5fe3d40c0cb3fe4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FUNCTION_D</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>aa92a2a20741b8df6f64ad87e0deb5c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INLINE_FUNCTION</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>afc491fbd69e70abdcb02a8cd3ce2939e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>USE_INSTANTIATION</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>adfc0fa47b4655f9648999ae16c2e31f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ForAll</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>ac6c2cd1218587d4992ab1344890520d6</anchor>
      <arglist>(i, container)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>useStdParallel__</name>
      <anchorfile>pFlowMacros_8hpp.html</anchorfile>
      <anchor>a03feb55a2d35bbb9ed560f6e5c24d671</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vocabs.hpp</name>
    <path>src/phasicFlow/globals/</path>
    <filename>vocabs_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab01a72a174f7805c64e1a469e7b0aa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaa05db74f6b79b9e9a27bdcf6f2a6a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>caseSetupFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e232a46497a465f2b9a26a85763479e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>caseSetupRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9e12d96cf1434d9b7a03a2d53eee4af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>geometryFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb4cc5ad7c1a551313299d97e316f5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>geometryRepository_</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5a160cf6aed6bc212d4f37ef686c26de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>integrationRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6bab1cfefa5b122e0f141eb18a3e55a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>integrationFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a28e84e55f10a623071845a7765bf8d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a505284f14a1a0fde29941025cb29c2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>insertionFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a62955dba3ac8eafe4cf89b83d917d38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>sphereShapeFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48979f81009e9bd8c6324e71533025f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>pointStructureFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7ce9af76cf5b5484f34c8e341dfe6416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>triSurfaceFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51910004819819cd11ae26508254ffff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>createParticles__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3a366f2969c1a15cee5c094bb1b170d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>motionModelFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afa0d4199a6b9ad7e56d42f72f65756f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>contactSearchFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a95336277204d1868085127ba9a1b6cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>propertyFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c8ebc869fedceda194a424fd70dbd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>interactionFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4a9012e5fd13ea2e176fb32ec9b50753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>postprocessFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adafff6a400d0271a608a32eb96b6c208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>uniform__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a848bdaed73601f3e073585ee847e63ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>nonUniform__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d4a935053433a235abbbc6258dc4ace</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>baseAlgorithms.hpp</name>
    <path>src/phasicFlow/Kokkos/</path>
    <filename>baseAlgorithms_8hpp.html</filename>
    <includes id="numericConstants_8hpp" name="numericConstants.hpp" local="yes" imported="no">numericConstants.hpp</includes>
    <includes id="KokkosUtilities_8hpp" name="KokkosUtilities.hpp" local="yes" imported="no">KokkosUtilities.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa6ef94fb046f74a2580c8d7e695f8da9</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addfa331fa163610ea1cedfe6687ce88f</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85e4897a738750647159b7374c05420a</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a728d6ba43de441d524807563f8268eda</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_to_each</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5219e225445b431ccafbd9c9b675574e</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end, UnaryFunction func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e12e7861c2afbc73acbb2e814b7642f</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d5136b2707ba1c161af4b81e75ad542</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, hostViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4cf8ba03f73728309c6938699408c0c2</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef2fbc34daba7df395b6c273f52a1826</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, deviceViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a31fbbbba3636e6afffe20637614dc047</anchor>
      <arglist>(ViewType3D&lt; T, properties... &gt; &amp;view, range range1, range range2, range range3, T val)</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>sizeToSerial__</name>
      <anchorfile>baseAlgorithms_8hpp.html</anchorfile>
      <anchor>ad9f3d70e7128fd0abe887f93e52812b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>baseAlgorithmsFwd.hpp</name>
    <path>src/phasicFlow/Kokkos/</path>
    <filename>baseAlgorithmsFwd_8hpp.html</filename>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>baseAlgorithmsFwd_8hpp.html</anchorfile>
      <anchor>a4e12e7861c2afbc73acbb2e814b7642f</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>baseAlgorithmsFwd_8hpp.html</anchorfile>
      <anchor>a2d5136b2707ba1c161af4b81e75ad542</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, hostViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>baseAlgorithmsFwd_8hpp.html</anchorfile>
      <anchor>a4cf8ba03f73728309c6938699408c0c2</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>baseAlgorithmsFwd_8hpp.html</anchorfile>
      <anchor>aef2fbc34daba7df395b6c273f52a1826</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, deviceViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KokkosTypes.hpp</name>
    <path>src/phasicFlow/Kokkos/</path>
    <filename>KokkosTypes_8hpp.html</filename>
    <class kind="class">pFlow::DeviceSide</class>
    <class kind="class">pFlow::HostSide</class>
    <class kind="struct">pFlow::selectSide</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>Kokkos::HostSpace</type>
      <name>HostSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a49dd1192cf116583abf7c726c7146851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::Serial</type>
      <name>Serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>affe2bf45d2967411ae51d3e62c054a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DefaultHostExecutionSpace</type>
      <name>DefaultHostExecutionSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5cb29e471abf6b6665e7802212b56c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DefaultExecutionSpace</type>
      <name>DefaultExecutionSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa3a14d3c76643399fc4edd8eca14944a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::pair&lt; T1, T2 &gt;</type>
      <name>kPair</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa59ae59573e65855aee2d3fe25e6504a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; int, int &gt;</type>
      <name>range</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad8085fcd475be6bdf841bcdd9b9225ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; int long, int long &gt;</type>
      <name>range64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a430d631c371ee0da9132843fefab61c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T, properties... &gt;</type>
      <name>ViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fa4cf96d089d8cb2b3d0724b65b0b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, properties... &gt;</type>
      <name>ViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca2b381231776d26ea7431837f78aa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DualView&lt; T *, properties... &gt;</type>
      <name>DualViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae271b0fde8f5b0936d1f66c6badf94b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T ***, properties... &gt;</type>
      <name>ViewType3D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae6a68b2bd4d845883b5c67189d67d816</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value, properties... &gt;</type>
      <name>unorderedMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae25c78fc8cfe4522797fde498ea5b003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void, properties... &gt;</type>
      <name>unorderedSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48a6996c6f91d11bf502a6be451658d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value &gt;</type>
      <name>deviceHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a74b5a77c3e745769dff83777655393de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value, Kokkos::HostSpace &gt;</type>
      <name>hostHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a43be3c01d062d5f54deff52dec619f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void &gt;</type>
      <name>deviceHashSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a029759d96e520f37163628410152ea97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void, Kokkos::HostSpace &gt;</type>
      <name>hostHashSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3522ab5973fcd25b20fc6cdd3d79965a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T &gt;</type>
      <name>deviceViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0d3d7c7d91ade0d1b9b28e2410ffa090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T * &gt;</type>
      <name>deviceViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa5276597d4016d6696f1f265a13d2164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T **, Layout, void &gt;</type>
      <name>deviceViewType2D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa957866bcd3037c171425168b49127b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T, Kokkos::HostSpace &gt;</type>
      <name>hostViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2b1bedea375f3481fd757f3279895366</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, Kokkos::HostSpace &gt;</type>
      <name>hostViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad53198ba4452d5fdc966d861583fc70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T **, Layout, Kokkos::HostSpace &gt;</type>
      <name>hostViewType2D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85e375090d015571de56728963032099</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, Kokkos::MemoryTraits&lt; std::is_same&lt; DefaultExecutionSpace, Serial &gt;::value?0:Kokkos::Atomic &gt; &gt;</type>
      <name>deviceAtomicViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab7f48408d37674c3e7649cb2f79aaea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T ***, Kokkos::MemoryTraits&lt; std::is_same&lt; DefaultExecutionSpace, Serial &gt;::value?0:Kokkos::Atomic &gt; &gt;</type>
      <name>deviceAtomicViewType3D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef007f87766147fda1706da568a44e6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>KokkosUtilities.hpp</name>
    <path>src/phasicFlow/Kokkos/</path>
    <filename>KokkosUtilities_8hpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool constexpr</type>
      <name>isHostAccessible</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8dcbb90aa6c0eb7fc8a56381ecd40b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool constexpr</type>
      <name>areAccessible</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac29d97368096459d9f8203134aebd416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>realloc</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae79d45845d9fdbadabd92fcf60208321</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocNoInit</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76e9c7671124c8e455dac96b3e80104</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocFill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a87b1994876b63bfc5b17ada18fb001ce</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len, Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>realloc</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a819ffa2739b2e4b9b104263649046d1d</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocNoInit</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad8f777f7c8cb08a0f6416ffaabe89ddc</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocFill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a58d8994b3edc7d2388745b834bbb2063</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3, Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>swapViews</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4b09631f13732e351753fedd27aa5a04</anchor>
      <arglist>(ViewType &amp;v1, ViewType &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ViewAlgorithms.hpp</name>
    <path>src/phasicFlow/Kokkos/</path>
    <filename>ViewAlgorithms_8hpp.html</filename>
    <includes id="numericConstants_8hpp" name="numericConstants.hpp" local="yes" imported="no">numericConstants.hpp</includes>
    <includes id="KokkosUtilities_8hpp" name="KokkosUtilities.hpp" local="yes" imported="no">KokkosUtilities.hpp</includes>
    <includes id="kokkosAlgorithms_8hpp" name="kokkosAlgorithms.hpp" local="yes" imported="no">kokkosAlgorithms.hpp</includes>
    <includes id="stdAlgorithms_8hpp" name="stdAlgorithms.hpp" local="yes" imported="no">stdAlgorithms.hpp</includes>
    <includes id="cudaAlgorithms_8hpp" name="cudaAlgorithms.hpp" local="yes" imported="no">cudaAlgorithms.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a054ed68ca44f0f66d733c1886d9703b4</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa09eb6213f3099d4f7a96e178409770f</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, range span, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae044c41d37cfe349ad7fd3cd6056e76e</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20ec4a643b3d2e600949c232833512ff</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, const Type startVal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a650e12d57e1284f33310d65b88012e61</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; view, const ViewType1D&lt; indexType, indexProperties... &gt; indices, const int32 numElems, const Type val, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; indexType, indexProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab3ee809e4824affe2a157c049df1032e</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; view, const ViewType1D&lt; indexType, indexProperties... &gt; indices, const ViewType1D&lt; Type, indexProperties... &gt; vals, const int32 numElems, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; indexType, indexProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5307186f0f9e8a2bcd261164622237a</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a94ce03cd713ad919d25e8d18b42087bb</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copy</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8b768a1c864cc2bb70654f13658bfe2</anchor>
      <arglist>(const ViewType1D&lt; dType, dProperties... &gt; &amp;dst, const ViewType1D&lt; sType, sProperties... &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copy</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b4dd5f0cb716f266f7ecaeaa6ad5343</anchor>
      <arglist>(const ViewType1D&lt; dType, dProperties... &gt; &amp;dst, int32 dStart, const ViewType1D&lt; sType, sProperties... &gt; &amp;src, int32 sStart, int32 sEnd)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>getNth</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6067197103462efadde182ad24c15043</anchor>
      <arglist>(dType &amp;dst, const ViewType1D&lt; sType, sProperties... &gt; &amp;src, const int32 n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad106d9b3e9f9c49072d47270588b779d</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a60100c7604a5e87f0dfe406a48e268b7</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, CompareFunc compare)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permuteSort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a848b1079d9d39e5cc44191400b07ee11</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; permType, permProperties... &gt; &amp;permuteView, int32 permStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; permType, permProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>binarySearch</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27fabd295f904bd95747f1b226504787</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5bc7e6b0ed0f142fb5483d60353f1071</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; dType, dProperties... &gt; &amp;dView, int32 dStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; dType, dProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a053d70e7f2637a71b31ca8178cd4e3f2</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; dType, dProperties... &gt; &amp;dView, int32 dStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; dType, dProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>maxSizeToSerial__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac46039fa2cecc2d2292a6d256a3aacd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uniformRandomInt32.hpp</name>
    <path>src/phasicFlow/random/randomInt32/</path>
    <filename>uniformRandomInt32_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <class kind="class">pFlow::uniformRandomInt32</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>RandomReal.cpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>RandomReal_8cpp.html</filename>
    <includes id="RandomReal_8hpp" name="RandomReal.hpp" local="yes" imported="no">RandomReal.hpp</includes>
  </compound>
  <compound kind="file">
    <name>randomReal.cpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>randomReal_8cpp.html</filename>
    <includes id="randomReal_8hpp" name="randomReal.hpp" local="yes" imported="no">randomReal.hpp</includes>
  </compound>
  <compound kind="file">
    <name>randomReal.hpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>randomReal_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <class kind="class">pFlow::randomReal</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>RandomReal.hpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>RandomReal_8hpp.html</filename>
    <includes id="randomReal_8hpp" name="randomReal.hpp" local="yes" imported="no">randomReal.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <includes id="RandomReal_8cpp" name="RandomReal.cpp" local="yes" imported="no">RandomReal.cpp</includes>
    <class kind="class">pFlow::RandomReal</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>randomReals.cpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>randomReals_8cpp.html</filename>
    <includes id="randomReals_8hpp" name="randomReals.hpp" local="yes" imported="no">randomReals.hpp</includes>
  </compound>
  <compound kind="file">
    <name>randomReals.hpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>randomReals_8hpp.html</filename>
    <includes id="RandomReal_8hpp" name="RandomReal.hpp" local="yes" imported="no">RandomReal.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>RandomReal&lt; uniformRandomReal &gt;</type>
      <name>uniformRandomRealDistribution</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4f30ea3cdaa66f534481693a4f249621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uniformRandomReal.hpp</name>
    <path>src/phasicFlow/random/randomReal/</path>
    <filename>uniformRandomReal_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <class kind="class">pFlow::uniformRandomReal</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>combinedRange.hpp</name>
    <path>src/phasicFlow/ranges/</path>
    <filename>combinedRange_8hpp.html</filename>
    <includes id="stridedRange_8hpp" name="stridedRange.hpp" local="yes" imported="no">stridedRange.hpp</includes>
    <includes id="intervalRange_8hpp" name="intervalRange.hpp" local="yes" imported="no">intervalRange.hpp</includes>
    <includes id="Lists_8hpp" name="Lists.hpp" local="yes" imported="no">Lists.hpp</includes>
    <includes id="Set_8hpp" name="Set.hpp" local="yes" imported="no">Set.hpp</includes>
    <class kind="class">pFlow::combinedRange</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>intervalRange.hpp</name>
    <path>src/phasicFlow/ranges/</path>
    <filename>intervalRange_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <class kind="class">pFlow::intervalRange</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>ranges.hpp</name>
    <path>src/phasicFlow/ranges/</path>
    <filename>ranges_8hpp.html</filename>
    <includes id="stridedRange_8hpp" name="stridedRange.hpp" local="yes" imported="no">stridedRange.hpp</includes>
    <includes id="intervalRange_8hpp" name="intervalRange.hpp" local="yes" imported="no">intervalRange.hpp</includes>
    <includes id="combinedRange_8hpp" name="combinedRange.hpp" local="yes" imported="no">combinedRange.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>stridedRange&lt; int32 &gt;</type>
      <name>int32StridedRagne</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7484505d7c853c194b3936e36accc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>stridedRange&lt; int64 &gt;</type>
      <name>int64StridedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad1e6755d15045ae02856a28fd2df6e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>stridedRange&lt; real &gt;</type>
      <name>realStridedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b48ed503ab884fdb4edf60c89b6d96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; int32 &gt;</type>
      <name>int32IntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a556b38f61030c65e51709836acb52f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; int64 &gt;</type>
      <name>int64IntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76123a433b5f59ff165031adb4263c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; real &gt;</type>
      <name>realIntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8e229a4ab69c8e8e1fd9aa4b003da825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; int32 &gt;</type>
      <name>int32CombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c6154a8f1712f107a0aac41dcdcdd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; int64 &gt;</type>
      <name>int64CombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a88169ffd4ae7c562ed34220ab342d338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; real &gt;</type>
      <name>realCombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7145c0814183a2c991634e8128b9d97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stridedRange.hpp</name>
    <path>src/phasicFlow/ranges/</path>
    <filename>stridedRange_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::stridedRange</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>IOfileHeader.cpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>IOfileHeader_8cpp.html</filename>
    <includes id="IOfileHeader_8hpp" name="IOfileHeader.hpp" local="yes" imported="no">IOfileHeader.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
  </compound>
  <compound kind="file">
    <name>IOfileHeader.hpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>IOfileHeader_8hpp.html</filename>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="objectFile_8hpp" name="objectFile.hpp" local="yes" imported="no">objectFile.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::IOfileHeader</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>IOobject.cpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>IOobject_8cpp.html</filename>
    <includes id="IOobject_8hpp" name="IOobject.hpp" local="yes" imported="no">IOobject.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
  </compound>
  <compound kind="file">
    <name>IOobject.hpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>IOobject_8hpp.html</filename>
    <includes id="IOfileHeader_8hpp" name="IOfileHeader.hpp" local="yes" imported="no">IOfileHeader.hpp</includes>
    <includes id="IOobjectTemplates_8cpp" name="IOobjectTemplates.cpp" local="yes" imported="no">IOobjectTemplates.cpp</includes>
    <class kind="class">pFlow::IOobject</class>
    <class kind="class">pFlow::IOobject::iObject</class>
    <class kind="class">pFlow::IOobject::object_t</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>IOobjectTemplates.cpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>IOobjectTemplates_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>objectFile.cpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>objectFile_8cpp.html</filename>
    <includes id="objectFile_8hpp" name="objectFile.hpp" local="yes" imported="no">objectFile.hpp</includes>
  </compound>
  <compound kind="file">
    <name>objectFile.hpp</name>
    <path>src/phasicFlow/repository/IOobject/</path>
    <filename>objectFile_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <class kind="class">pFlow::objectFile</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>repository.cpp</name>
    <path>src/phasicFlow/repository/repository/</path>
    <filename>repository_8cpp.html</filename>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
  </compound>
  <compound kind="file">
    <name>repository.hpp</name>
    <path>src/phasicFlow/repository/repository/</path>
    <filename>repository_8hpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="Maps_8hpp" name="Maps.hpp" local="yes" imported="no">Maps.hpp</includes>
    <includes id="Lists_8hpp" name="Lists.hpp" local="yes" imported="no">Lists.hpp</includes>
    <includes id="IOobject_8hpp" name="IOobject.hpp" local="yes" imported="no">IOobject.hpp</includes>
    <includes id="repositoryTemplates_8cpp" name="repositoryTemplates.cpp" local="yes" imported="no">repositoryTemplates.cpp</includes>
    <class kind="class">pFlow::repository</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>repositoryTemplates.cpp</name>
    <path>src/phasicFlow/repository/repository/</path>
    <filename>repositoryTemplates_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>Control.hpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>Control_8hpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="timeFolder_8hpp" name="timeFolder.hpp" local="yes" imported="no">timeFolder.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>systemControl &amp;</type>
      <name>Control</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a50f04f0f9586805ff6dddfcc7662bb2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dynamicLinkLibs.cpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>dynamicLinkLibs_8cpp.html</filename>
    <includes id="dynamicLinkLibs_8hpp" name="dynamicLinkLibs.hpp" local="yes" imported="no">dynamicLinkLibs.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>dynamicLinkLibs.hpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>dynamicLinkLibs_8hpp.html</filename>
    <includes id="hashMap_8hpp" name="hashMap.hpp" local="yes" imported="no">hashMap.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::dynamicLinkLibs</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>systemControl.cpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>systemControl_8cpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>systemControl.hpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>systemControl_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Time_8hpp" name="Time.hpp" local="yes" imported="no">Time.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <includes id="Timers_8hpp" name="Timers.hpp" local="yes" imported="no">Timers.hpp</includes>
    <includes id="dynamicLinkLibs_8hpp" name="dynamicLinkLibs.hpp" local="yes" imported="no">dynamicLinkLibs.hpp</includes>
    <class kind="class">pFlow::systemControl</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>timeFolder.hpp</name>
    <path>src/phasicFlow/repository/systemControl/</path>
    <filename>timeFolder_8hpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <class kind="class">pFlow::timeFolder</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>Map&lt; real, fileSystem &gt;</type>
      <name>getTimeFolders</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0185ce2b0b0638b6c91658209dfb5965</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Time.cpp</name>
    <path>src/phasicFlow/repository/Time/</path>
    <filename>Time_8cpp.html</filename>
    <includes id="Time_8hpp" name="Time.hpp" local="yes" imported="no">Time.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Time.hpp</name>
    <path>src/phasicFlow/repository/Time/</path>
    <filename>Time_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="timeControl_8hpp" name="timeControl.hpp" local="yes" imported="no">timeControl.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
    <class kind="class">pFlow::Time</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>timeControl.cpp</name>
    <path>src/phasicFlow/repository/Time/</path>
    <filename>timeControl_8cpp.html</filename>
    <includes id="timeControl_8hpp" name="timeControl.hpp" local="yes" imported="no">timeControl.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>timeControl.hpp</name>
    <path>src/phasicFlow/repository/Time/</path>
    <filename>timeControl_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="ranges_8hpp" name="ranges.hpp" local="yes" imported="no">ranges.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::timeControl</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>setFieldEntry.cpp</name>
    <path>src/phasicFlow/setFieldList/</path>
    <filename>setFieldEntry_8cpp.html</filename>
    <includes id="setFieldEntry_8hpp" name="setFieldEntry.hpp" local="yes" imported="no">setFieldEntry.hpp</includes>
  </compound>
  <compound kind="file">
    <name>setFieldEntry.hpp</name>
    <path>src/phasicFlow/setFieldList/</path>
    <filename>setFieldEntry_8hpp.html</filename>
    <includes id="twoPartEntry_8hpp" name="twoPartEntry.hpp" local="yes" imported="no">twoPartEntry.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
    <includes id="setFieldEntryTemplates_8cpp" name="setFieldEntryTemplates.cpp" local="yes" imported="no">setFieldEntryTemplates.cpp</includes>
    <class kind="class">pFlow::setFieldEntry</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>setFieldEntryTemplates.cpp</name>
    <path>src/phasicFlow/setFieldList/</path>
    <filename>setFieldEntryTemplates_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>setFieldList.cpp</name>
    <path>src/phasicFlow/setFieldList/</path>
    <filename>setFieldList_8cpp.html</filename>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
  </compound>
  <compound kind="file">
    <name>setFieldList.hpp</name>
    <path>src/phasicFlow/setFieldList/</path>
    <filename>setFieldList_8hpp.html</filename>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="setFieldEntry_8hpp" name="setFieldEntry.hpp" local="yes" imported="no">setFieldEntry.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::setFieldList</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>uniquePtr.hpp</name>
    <path>src/phasicFlow/smartPointers/</path>
    <filename>uniquePtr_8hpp.html</filename>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <class kind="class">pFlow::uniquePtr</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>makeUnique</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70707830e4ab7b019a06fa8fb81b22aa</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fileStream.cpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>fileStream_8cpp.html</filename>
    <includes id="fileStream_8hpp" name="fileStream.hpp" local="yes" imported="no">fileStream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
  </compound>
  <compound kind="file">
    <name>fileStream.hpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>fileStream_8hpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <class kind="class">pFlow::fileStream</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>iFstream.cpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>iFstream_8cpp.html</filename>
    <includes id="iFstream_8hpp" name="iFstream.hpp" local="yes" imported="no">iFstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iFstream.hpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>iFstream_8hpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="fileStream_8hpp" name="fileStream.hpp" local="yes" imported="no">fileStream.hpp</includes>
    <includes id="Istream_8hpp" name="Istream.hpp" local="yes" imported="no">Istream.hpp</includes>
    <class kind="class">pFlow::iFstream</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>oFstream.cpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>oFstream_8cpp.html</filename>
    <includes id="oFstream_8hpp" name="oFstream.hpp" local="yes" imported="no">oFstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>oFstream.hpp</name>
    <path>src/phasicFlow/streams/Fstream/</path>
    <filename>oFstream_8hpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="fileStream_8hpp" name="fileStream.hpp" local="yes" imported="no">fileStream.hpp</includes>
    <includes id="Ostream_8hpp" name="Ostream.hpp" local="yes" imported="no">Ostream.hpp</includes>
    <class kind="class">pFlow::oFstream</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>iIstream.cpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>iIstream_8cpp.html</filename>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iIstream.hpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>iIstream_8hpp.html</filename>
    <includes id="IOstream_8hpp" name="IOstream.hpp" local="yes" imported="no">IOstream.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstreamI_8hpp" name="iIstreamI.hpp" local="yes" imported="no">iIstreamI.hpp</includes>
    <class kind="class">pFlow::iIstream</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>iIstream &amp;(*</type>
      <name>iIstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20e3b7f09e3a0e3375b053badb8c6fac</anchor>
      <arglist>)(iIstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aac0232c0fb4c7e7814d60a2f870be426</anchor>
      <arglist>(iIstream &amp;is, iIstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad77cabbc35dc80d8dd705c13cf75ef12</anchor>
      <arglist>(iIstream &amp;is, IOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac08e23027fc74d4f881e8ad3e4d9db21</anchor>
      <arglist>(iIstream &amp;is, word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a921dd53420ed0734c3b39bda4e0c5c28</anchor>
      <arglist>(iIstream &amp;is, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a52660d6f2ac862449db403265aeb0c56</anchor>
      <arglist>(iIstream &amp;is, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fb5854d0262d1237f81429cd47295bf</anchor>
      <arglist>(iIstream &amp;is, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a128ebacd4d96f2530ff3e2d4ad581a61</anchor>
      <arglist>(iIstream &amp;is, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a38e592457b0d535b69efb71ad8bbaa72</anchor>
      <arglist>(iIstream &amp;is, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b3db444dc5de2c6f9b04619f101a8b3</anchor>
      <arglist>(iIstream &amp;is, uint16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a319d3948b8f830a8437b8f65302bfcf1</anchor>
      <arglist>(iIstream &amp;is, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8632ed95909b251fdf0a1930d4bcbd6</anchor>
      <arglist>(iIstream &amp;is, float &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d598a5aee547602a34bd82a50d1556a</anchor>
      <arglist>(iIstream &amp;is, double &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iIstreamI.hpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>iIstreamI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>IOstream.cpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>IOstream_8cpp.html</filename>
    <includes id="IOstream_8hpp" name="IOstream.hpp" local="yes" imported="no">IOstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iOstream.cpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>iOstream_8cpp.html</filename>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iOstream.hpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>iOstream_8hpp.html</filename>
    <includes id="IOstream_8hpp" name="IOstream.hpp" local="yes" imported="no">IOstream.hpp</includes>
    <class kind="class">pFlow::iOstream</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>iOstream &amp;(*</type>
      <name>iOstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a046739cf7f3ef2d7e4141451e4982440</anchor>
      <arglist>)(iOstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7c5ed6baf7780c1288b85850a88a1a1b</anchor>
      <arglist>(iOstream &amp;os, iOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72c6da019f67f122aca767569be3790d</anchor>
      <arglist>(iOstream &amp;os, IOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>indent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a771426c520433b44d064abfba99e7d3b</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>incrIndent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9472d0835833973e08d55a584b0f72cb</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>decrIndent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0862d4bdcfbd8e9c28a7615620dbd725</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>flush</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecdc6aec9989d154a9a441cf2332a22a</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endl</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa93b0be68d3fca7a3251370461d32b93</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>beginBlock</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad0a5f7cc3824e5d1a075ef65edaffaf3</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endBlock</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a699a4c3c531b828349e71e076278a4b5</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endEntry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adf6968e144d576d71ecbb33581e4c8c1</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18e0e63cfd5a43dbd818bc9ba3c95ea4</anchor>
      <arglist>(iOstream &amp;os, const char c)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe1b54c485a9610062bc78a0aff0cada</anchor>
      <arglist>(iOstream &amp;os, const char *buf)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3be41eee8252971b5653ba758d0f1f49</anchor>
      <arglist>(iOstream &amp;os, const word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5f6c2fe89a555c0b6a0cf87c9644fb8c</anchor>
      <arglist>(iOstream &amp;os, const int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a802e15ffc516724ec05c42e064f36f38</anchor>
      <arglist>(iOstream &amp;os, const int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa1ffaef220f152e755d2e7bc341a5fcb</anchor>
      <arglist>(iOstream &amp;os, const int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad283e6f478c448eb887346ecefccec59</anchor>
      <arglist>(iOstream &amp;os, const int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8edcc9a74745baa9ed2fcf85a4a19635</anchor>
      <arglist>(iOstream &amp;os, const label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5a1ceadd9165e333daa78deb31adad6</anchor>
      <arglist>(iOstream &amp;os, const uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a10c1b2b365abacb6969c7d673d5e0471</anchor>
      <arglist>(iOstream &amp;os, const uint16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e60c3debd1c7f388320d095defabb96</anchor>
      <arglist>(iOstream &amp;os, const float &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4c64ce85fc72db129184fea72ccace40</anchor>
      <arglist>(iOstream &amp;os, const double &amp;val)</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>defaultColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a08e5918c2f896d908122d37a353230c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>blackColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a74eff20167d5c7cef376fd83b25e2f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>redColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a5baf5737dcaddf5c26107d7ecce88533</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>greenColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a4fcac190f6e62656ac9a86d383b89f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>yellowColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a47b7813fed88060b439cf45acff0b1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>blueColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a3687caf109aebbf27bcadf16ecf263b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>magentaColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>ad12f9c5c03dad5208993a879fbbbf208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>cyanColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a6a9b19c2b32429837f2f61764ad2eb69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>whiteColor</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a1a87310f8fb79cb50d650746ee6ec46b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>boldChar</name>
      <anchorfile>iOstream_8hpp.html</anchorfile>
      <anchor>a4f6dbbff761fa51344d4f7873a986880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>tab</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afce5c7cfed2d53e6b1fd9293ef336934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>nl</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbf3861e53bc13fd6c82d9eae8f97378</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>IOstream.hpp</name>
    <path>src/phasicFlow/streams/iStream/</path>
    <filename>IOstream_8hpp.html</filename>
    <includes id="bTypesFunctions_8hpp" name="bTypesFunctions.hpp" local="yes" imported="no">bTypesFunctions.hpp</includes>
    <class kind="class">pFlow::IOstream</class>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>IOstream &amp;(*</type>
      <name>IOstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b9953fd36ae93ba3eea7bd5d7de30de</anchor>
      <arglist>)(IOstream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>dec</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa4abd96d6b16d8d3edf1aaa683287885</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>hex</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61898cd556b536d4a3a0186db58edc95</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>oct</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27fe476459b11c5cf31b14964af0b778</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>fixed</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27514cebd8cf580ab1542de4987dcc5e</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>scientific</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a673a8994589e03d22173c174a177a468</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Istream.cpp</name>
    <path>src/phasicFlow/streams/Stream/</path>
    <filename>Istream_8cpp.html</filename>
    <includes id="Istream_8hpp" name="Istream.hpp" local="yes" imported="no">Istream.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <member kind="variable" static="yes">
      <type>static constexpr const unsigned</type>
      <name>errLen</name>
      <anchorfile>Istream_8cpp.html</anchorfile>
      <anchor>a157f937a0501251d5e974e8f0942caeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Istream.hpp</name>
    <path>src/phasicFlow/streams/Stream/</path>
    <filename>Istream_8hpp.html</filename>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <class kind="class">pFlow::Istream</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>Ostream.cpp</name>
    <path>src/phasicFlow/streams/Stream/</path>
    <filename>Ostream_8cpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="Ostream_8hpp" name="Ostream.hpp" local="yes" imported="no">Ostream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Ostream.hpp</name>
    <path>src/phasicFlow/streams/Stream/</path>
    <filename>Ostream_8hpp.html</filename>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <class kind="class">pFlow::Ostream</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>streams.cpp</name>
    <path>src/phasicFlow/streams/</path>
    <filename>streams_8cpp.html</filename>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>streams.hpp</name>
    <path>src/phasicFlow/streams/</path>
    <filename>streams_8hpp.html</filename>
    <includes id="Istream_8hpp" name="Istream.hpp" local="yes" imported="no">Istream.hpp</includes>
    <includes id="Ostream_8hpp" name="Ostream.hpp" local="yes" imported="no">Ostream.hpp</includes>
    <includes id="iFstream_8hpp" name="iFstream.hpp" local="yes" imported="no">iFstream.hpp</includes>
    <includes id="oFstream_8hpp" name="oFstream.hpp" local="yes" imported="no">oFstream.hpp</includes>
    <includes id="oTstream_8hpp" name="oTstream.hpp" local="yes" imported="no">oTstream.hpp</includes>
    <includes id="iTstream_8hpp" name="iTstream.hpp" local="yes" imported="no">iTstream.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>redText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a6536dc902ef8c5e4e8eead6f3c5dc237</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yellowText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a71e567553baf2a24a11e442683cde599</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>blueText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a25b359f24d903d339250a7b4c2d0e742</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>greenText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a37a406f400cfe49d19e51bfcc34cd2d3</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>magentaText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a8dc03cadd682b6a068c116f139fd45cb</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>cyanText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a213e43875efd5fefe28d0da89432ff7a</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>boldText</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>ada7e7f1dc8af64d36d9b34fce99da38e</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>INFORMATION</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a41fa3612202db2d335c330fb061e0054</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>endINFO</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a18f2ecec3edb6662b3a89a41d3787584</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>REPORT</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>aeb765df06121339620670437d217fec8</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>endREPORT</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a04db65a6cb5a45695ea75cce1b5d7a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>yWARNING</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a66e13d5310adaba0b5ac66764bcbed28</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>endyWARNING</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>af5b7516e324a78e5b4c8e61106be0cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ERR</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a735563036dced0b7d6cc98f97ea4978b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>endERR</name>
      <anchorfile>streams_8hpp.html</anchorfile>
      <anchor>a2374d8fc661bc100e80c0f7c3ac0d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ostream</type>
      <name>output</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a86ae30c22a4ef4bc487b40ed52f4d2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Istream</type>
      <name>input</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a01c5a99f17466741d1fcfbc8144fad91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ostream</type>
      <name>errReport</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e835264dcf9974fe0c8a94bec3c7ab0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>token.cpp</name>
    <path>src/phasicFlow/streams/token/</path>
    <filename>token_8cpp.html</filename>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>token.hpp</name>
    <path>src/phasicFlow/streams/token/</path>
    <filename>token_8hpp.html</filename>
    <includes id="bTypes_8hpp" name="bTypes.hpp" local="yes" imported="no">bTypes.hpp</includes>
    <includes id="tokenI_8hpp" name="tokenI.hpp" local="yes" imported="no">tokenI.hpp</includes>
    <class kind="class">pFlow::token</class>
    <class kind="union">pFlow::token::content</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a32cadb9b5aab88eec41a8f98ac814670</anchor>
      <arglist>(iOstream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad26e60e655d7da2a3d92ceb1d65b7803</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aad6fdf0dc827f1d5bbdc050b7679946a</anchor>
      <arglist>(iOstream &amp;os, const token::punctuationToken &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad5ef8f809f4348f5e3e690ce283d615e</anchor>
      <arglist>(std::ostream &amp;os, const token::punctuationToken &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac605baf9cfa833f7b7742b86b1a2f84b</anchor>
      <arglist>(std::ostream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endListToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa5b92efd594cabf5fe06cc47cf66716b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>beginListToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44f368c69dca989c81253f824162c855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endStatementToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a494fac648089d3c9622654fca067ee8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>beginBlockToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adad4fbeaccf24522e4896b841314619f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endBlocKToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbe5eb257d2a7fa73e109c6c20f457a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>spaceToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fe2383b71bc53e3d639f39d3e5f9c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>newLineToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0afc8cb9b66f9ac512e6a6d4e6028402</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tokenI.hpp</name>
    <path>src/phasicFlow/streams/token/</path>
    <filename>tokenI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>tokenIO.cpp</name>
    <path>src/phasicFlow/streams/token/</path>
    <filename>tokenIO_8cpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function" static="yes">
      <type>static OS &amp;</type>
      <name>printTokenInfo</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6ec63dd4ba3928f4de668c9f1639ade9</anchor>
      <arglist>(OS &amp;os, const token &amp;tok)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tokenList.hpp</name>
    <path>src/phasicFlow/streams/token/</path>
    <filename>tokenList_8hpp.html</filename>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>List&lt; token &gt;</type>
      <name>tokenList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aec01e3c0681e98a3ea9ac4f693827ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; token::tokenType &gt;</type>
      <name>tokenTypeList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ebafb0df52e0995ead921efb1cc3ee5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>helperTstream.hpp</name>
    <path>src/phasicFlow/streams/TStream/</path>
    <filename>helperTstream_8hpp.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>validTokenForStream</name>
      <anchorfile>helperTstream_8hpp.html</anchorfile>
      <anchor>a0a312db11262484e0216af6c618d43dc</anchor>
      <arglist>(const token tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeginToken</name>
      <anchorfile>helperTstream_8hpp.html</anchorfile>
      <anchor>af05c433191cc653e68d17345d392acf8</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndToken</name>
      <anchorfile>helperTstream_8hpp.html</anchorfile>
      <anchor>ab25086a03d5bdef146887d8720c647fd</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iTstream.cpp</name>
    <path>src/phasicFlow/streams/TStream/</path>
    <filename>iTstream_8cpp.html</filename>
    <includes id="iTstream_8hpp" name="iTstream.hpp" local="yes" imported="no">iTstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>iTstream.hpp</name>
    <path>src/phasicFlow/streams/TStream/</path>
    <filename>iTstream_8hpp.html</filename>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="tokenList_8hpp" name="tokenList.hpp" local="yes" imported="no">tokenList.hpp</includes>
    <includes id="helperTstream_8hpp" name="helperTstream.hpp" local="yes" imported="no">helperTstream.hpp</includes>
    <class kind="class">pFlow::iTstream</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>validTokenForStream</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0a312db11262484e0216af6c618d43dc</anchor>
      <arglist>(const token tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeginToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af05c433191cc653e68d17345d392acf8</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab25086a03d5bdef146887d8720c647fd</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>oTstream.cpp</name>
    <path>src/phasicFlow/streams/TStream/</path>
    <filename>oTstream_8cpp.html</filename>
    <includes id="oTstream_8hpp" name="oTstream.hpp" local="yes" imported="no">oTstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
  </compound>
  <compound kind="file">
    <name>oTstream.hpp</name>
    <path>src/phasicFlow/streams/TStream/</path>
    <filename>oTstream_8hpp.html</filename>
    <includes id="tokenList_8hpp" name="tokenList.hpp" local="yes" imported="no">tokenList.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="helperTstream_8hpp" name="helperTstream.hpp" local="yes" imported="no">helperTstream.hpp</includes>
    <class kind="class">pFlow::oTstream</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>validTokenForStream</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0a312db11262484e0216af6c618d43dc</anchor>
      <arglist>(const token tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeginToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af05c433191cc653e68d17345d392acf8</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab25086a03d5bdef146887d8720c647fd</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>box.cpp</name>
    <path>src/phasicFlow/structuredData/box/</path>
    <filename>box_8cpp.html</filename>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
  </compound>
  <compound kind="file">
    <name>box.hpp</name>
    <path>src/phasicFlow/structuredData/box/</path>
    <filename>box_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <class kind="class">pFlow::box</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8f40540d0635b2db27fcbcea4ef245f1</anchor>
      <arglist>(iIstream &amp;is, box &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3a42e5302e4199ae432f608388556cae</anchor>
      <arglist>(iOstream &amp;os, const box &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD box</type>
      <name>extendBox</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1cbf98adb416c288201dec2279ce5747</anchor>
      <arglist>(const box &amp;b, const realx3 &amp;dl)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cylinder.cpp</name>
    <path>src/phasicFlow/structuredData/cylinder/</path>
    <filename>cylinder_8cpp.html</filename>
    <includes id="cylinder_8hpp" name="cylinder.hpp" local="yes" imported="no">cylinder.hpp</includes>
    <includes id="zAxis_8hpp" name="zAxis.hpp" local="yes" imported="no">zAxis.hpp</includes>
  </compound>
  <compound kind="file">
    <name>cylinder.hpp</name>
    <path>src/phasicFlow/structuredData/cylinder/</path>
    <filename>cylinder_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <class kind="class">pFlow::cylinder</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a11e1bf8e738755b5701a8b2916973fc0</anchor>
      <arglist>(iIstream &amp;is, cylinder &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3217909c9fce49566e30897d8a62f15d</anchor>
      <arglist>(iOstream &amp;os, const cylinder &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iBox.cpp</name>
    <path>src/phasicFlow/structuredData/iBox/</path>
    <filename>iBox_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>iBox.hpp</name>
    <path>src/phasicFlow/structuredData/iBox/</path>
    <filename>iBox_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iBox_8cpp" name="iBox.cpp" local="yes" imported="no">iBox.cpp</includes>
    <class kind="class">pFlow::iBox</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5953fc86527c5ed949522cdca56d48e6</anchor>
      <arglist>(iIstream &amp;is, iBox&lt; intType &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18110349cc0c99d8f73e2aaa38de6f81</anchor>
      <arglist>(iOstream &amp;os, const iBox&lt; intType &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iBoxs.cpp</name>
    <path>src/phasicFlow/structuredData/iBox/</path>
    <filename>iBoxs_8cpp.html</filename>
    <includes id="iBox_8hpp" name="iBox.hpp" local="yes" imported="no">iBox.hpp</includes>
  </compound>
  <compound kind="file">
    <name>line.cpp</name>
    <path>src/phasicFlow/structuredData/line/</path>
    <filename>line_8cpp.html</filename>
    <includes id="line_8hpp" name="line.hpp" local="yes" imported="no">line.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>line.hpp</name>
    <path>src/phasicFlow/structuredData/line/</path>
    <filename>line_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <class kind="class">pFlow::line</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>boxRegion.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/boxRegion/</path>
    <filename>boxRegion_8cpp.html</filename>
    <includes id="boxRegion_8hpp" name="boxRegion.hpp" local="yes" imported="no">boxRegion.hpp</includes>
  </compound>
  <compound kind="file">
    <name>boxRegion.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/boxRegion/</path>
    <filename>boxRegion_8hpp.html</filename>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <class kind="class">pFlow::boxRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>cylinderRegion.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/cylinderRegion/</path>
    <filename>cylinderRegion_8cpp.html</filename>
    <includes id="cylinderRegion_8hpp" name="cylinderRegion.hpp" local="yes" imported="no">cylinderRegion.hpp</includes>
  </compound>
  <compound kind="file">
    <name>cylinderRegion.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/cylinderRegion/</path>
    <filename>cylinderRegion_8hpp.html</filename>
    <includes id="cylinder_8hpp" name="cylinder.hpp" local="yes" imported="no">cylinder.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <class kind="class">pFlow::cylinderRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>PeakableRegion.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/PeakableRegion/</path>
    <filename>PeakableRegion_8cpp.html</filename>
  </compound>
  <compound kind="file">
    <name>peakableRegion.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/peakableRegion/</path>
    <filename>peakableRegion_8cpp.html</filename>
    <includes id="peakableRegion_8hpp" name="peakableRegion.hpp" local="yes" imported="no">peakableRegion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>peakableRegion.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/peakableRegion/</path>
    <filename>peakableRegion_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <class kind="class">pFlow::peakableRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>PeakableRegion.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/PeakableRegion/</path>
    <filename>PeakableRegion_8hpp.html</filename>
    <includes id="peakableRegion_8hpp" name="peakableRegion.hpp" local="yes" imported="no">peakableRegion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="PeakableRegion_8cpp" name="PeakableRegion.cpp" local="yes" imported="no">PeakableRegion.cpp</includes>
    <class kind="class">pFlow::PeakableRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>peakableRegionInstantiate.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/</path>
    <filename>peakableRegionInstantiate_8cpp.html</filename>
    <includes id="boxRegion_8hpp" name="boxRegion.hpp" local="yes" imported="no">boxRegion.hpp</includes>
    <includes id="sphereRegion_8hpp" name="sphereRegion.hpp" local="yes" imported="no">sphereRegion.hpp</includes>
    <includes id="cylinderRegion_8hpp" name="cylinderRegion.hpp" local="yes" imported="no">cylinderRegion.hpp</includes>
  </compound>
  <compound kind="file">
    <name>peakableRegions.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/</path>
    <filename>peakableRegions_8cpp.html</filename>
    <includes id="peakableRegions_8hpp" name="peakableRegions.hpp" local="yes" imported="no">peakableRegions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>peakableRegions.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/</path>
    <filename>peakableRegions_8hpp.html</filename>
    <includes id="PeakableRegion_8hpp" name="PeakableRegion.hpp" local="yes" imported="no">PeakableRegion.hpp</includes>
    <includes id="boxRegion_8hpp" name="boxRegion.hpp" local="yes" imported="no">boxRegion.hpp</includes>
    <includes id="sphereRegion_8hpp" name="sphereRegion.hpp" local="yes" imported="no">sphereRegion.hpp</includes>
    <includes id="peakableRegionInstantiate_8cpp" name="peakableRegionInstantiate.cpp" local="yes" imported="no">peakableRegionInstantiate.cpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>PeakableRegion&lt; boxRegion &gt;</type>
      <name>boxPeakableRegion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8d28c1ffb334cccd11261a9150a7a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PeakableRegion&lt; sphereRegion &gt;</type>
      <name>spherePeakableRegion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9fa401242975ad74e08c99986c2d89cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sphereRegion.cpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/sphereRegion/</path>
    <filename>sphereRegion_8cpp.html</filename>
    <includes id="sphereRegion_8hpp" name="sphereRegion.hpp" local="yes" imported="no">sphereRegion.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sphereRegion.hpp</name>
    <path>src/phasicFlow/structuredData/peakableRegion/sphereRegion/</path>
    <filename>sphereRegion_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="sphere_8hpp" name="sphere.hpp" local="yes" imported="no">sphere.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <class kind="class">pFlow::sphereRegion</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>pointStructure.cpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/</path>
    <filename>pointStructure_8cpp.html</filename>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="pointStructureKernels_8hpp" name="pointStructureKernels.hpp" local="yes" imported="no">pointStructureKernels.hpp</includes>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="Time_8hpp" name="Time.hpp" local="yes" imported="no">Time.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pointStructure.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/</path>
    <filename>pointStructure_8hpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="VectorSingles_8hpp" name="VectorSingles.hpp" local="yes" imported="no">VectorSingles.hpp</includes>
    <includes id="VectorDuals_8hpp" name="VectorDuals.hpp" local="yes" imported="no">VectorDuals.hpp</includes>
    <includes id="Fields_8hpp" name="Fields.hpp" local="yes" imported="no">Fields.hpp</includes>
    <includes id="eventSubscriber_8hpp" name="eventSubscriber.hpp" local="yes" imported="no">eventSubscriber.hpp</includes>
    <includes id="indexContainer_8hpp" name="indexContainer.hpp" local="yes" imported="no">indexContainer.hpp</includes>
    <class kind="class">pFlow::pointStructure</class>
    <class kind="class">pFlow::pointStructure::activePointsDevice</class>
    <class kind="class">pFlow::pointStructure::activePointsHost</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>pointStructureKernels.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/</path>
    <filename>pointStructureKernels_8hpp.html</filename>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::pointStructureKernels</namespace>
    <member kind="function">
      <type>int32</type>
      <name>markDeleteOutOfBox</name>
      <anchorfile>namespacepFlow_1_1pointStructureKernels.html</anchorfile>
      <anchor>aa54ffd5f0d26d2c4811749cebc48b7af</anchor>
      <arglist>(box domain, int32 start, int32 end, int8 deleteFlag, deviceViewType1D&lt; realx3 &gt; points, deviceViewType1D&lt; int8 &gt; flags, pointStructure::activePointsDevice activePoint, int32 &amp;minRange, int32 &amp;maxRange)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>scanPointFlag</name>
      <anchorfile>namespacepFlow_1_1pointStructureKernels.html</anchorfile>
      <anchor>a96dd4afd82f8d203643d933832b469cc</anchor>
      <arglist>(int32 start, int32 end, int8 activeFlag, deviceViewType1D&lt; int8 &gt; flags, int32 &amp;minRange, int32 &amp;maxRange)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pStructSelector.cpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/pStructSelector/</path>
    <filename>pStructSelector_8cpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pStructSelector.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/pStructSelector/</path>
    <filename>pStructSelector_8hpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <class kind="class">pFlow::pStructSelector</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>selectBox.cpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectBox/</path>
    <filename>selectBox_8cpp.html</filename>
    <includes id="selectBox_8hpp" name="selectBox.hpp" local="yes" imported="no">selectBox.hpp</includes>
  </compound>
  <compound kind="file">
    <name>selectBox.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectBox/</path>
    <filename>selectBox_8hpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::selectBox</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>selectRandom.cpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectRandom/</path>
    <filename>selectRandom_8cpp.html</filename>
    <includes id="selectRandom_8hpp" name="selectRandom.hpp" local="yes" imported="no">selectRandom.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="uniformRandomInt32_8hpp" name="uniformRandomInt32.hpp" local="yes" imported="no">uniformRandomInt32.hpp</includes>
    <includes id="Set_8hpp" name="Set.hpp" local="yes" imported="no">Set.hpp</includes>
  </compound>
  <compound kind="file">
    <name>selectRandom.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectRandom/</path>
    <filename>selectRandom_8hpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <class kind="class">pFlow::selectRandom</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>selectRange.cpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectRange/</path>
    <filename>selectRange_8cpp.html</filename>
    <includes id="selectRange_8hpp" name="selectRange.hpp" local="yes" imported="no">selectRange.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>selectRange.hpp</name>
    <path>src/phasicFlow/structuredData/pointStructure/selectors/selectRange/</path>
    <filename>selectRange_8hpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <class kind="class">pFlow::selectRange</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>sphere.cpp</name>
    <path>src/phasicFlow/structuredData/sphere/</path>
    <filename>sphere_8cpp.html</filename>
    <includes id="sphere_8hpp" name="sphere.hpp" local="yes" imported="no">sphere.hpp</includes>
  </compound>
  <compound kind="file">
    <name>sphere.hpp</name>
    <path>src/phasicFlow/structuredData/sphere/</path>
    <filename>sphere_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <class kind="class">pFlow::sphere</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeae74018dcb9f2df8de8b613822464bb</anchor>
      <arglist>(iIstream &amp;is, sphere &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a228f83da6a529a41deb02045c61fbfe7</anchor>
      <arglist>(iOstream &amp;os, const sphere &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bitTransfer.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>bitTransfer_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <class kind="class">pFlow::bitTransfer</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>multiTriSurface.cpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>multiTriSurface_8cpp.html</filename>
    <includes id="multiTriSurface_8hpp" name="multiTriSurface.hpp" local="yes" imported="no">multiTriSurface.hpp</includes>
  </compound>
  <compound kind="file">
    <name>multiTriSurface.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>multiTriSurface_8hpp.html</filename>
    <includes id="triSurface_8hpp" name="triSurface.hpp" local="yes" imported="no">triSurface.hpp</includes>
    <includes id="VectorDuals_8hpp" name="VectorDuals.hpp" local="yes" imported="no">VectorDuals.hpp</includes>
    <class kind="class">pFlow::multiTriSurface</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7378c1c75236b0141aadffde524327b9</anchor>
      <arglist>(iIstream &amp;is, multiTriSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7832f3a37e0c2bf2b478ec98cb22f851</anchor>
      <arglist>(iOstream &amp;os, const multiTriSurface &amp;tri)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stlFile.cpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>stlFile_8cpp.html</filename>
    <includes id="stlFile_8hpp" name="stlFile.hpp" local="yes" imported="no">stlFile.hpp</includes>
    <includes id="iFstream_8hpp" name="iFstream.hpp" local="yes" imported="no">iFstream.hpp</includes>
    <includes id="oFstream_8hpp" name="oFstream.hpp" local="yes" imported="no">oFstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>badInput</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a49c49257b0c309a00ffed5e843ed00e9</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkWordToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad763a29d354efbf92abd207ccfb4c238</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok, const word &amp;check)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNumberToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a137d5c2cd72f380dc723d5ba66aeeaa4</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok, real &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stlFile.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>stlFile_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="Lists_8hpp" name="Lists.hpp" local="yes" imported="no">Lists.hpp</includes>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <class kind="class">pFlow::stlFile</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>triangleFunctions.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>triangleFunctions_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::triangleFunctions</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>triangleSurface</name>
      <anchorfile>namespacepFlow_1_1triangleFunctions.html</anchorfile>
      <anchor>a4a5fdcaace8be93ad14d0994bcc2f7be</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triSurface.cpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>triSurface_8cpp.html</filename>
    <includes id="triSurface_8hpp" name="triSurface.hpp" local="yes" imported="no">triSurface.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="triSurfaceKernels_8hpp" name="triSurfaceKernels.hpp" local="yes" imported="no">triSurfaceKernels.hpp</includes>
  </compound>
  <compound kind="file">
    <name>triSurface.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>triSurface_8hpp.html</filename>
    <includes id="eventSubscriber_8hpp" name="eventSubscriber.hpp" local="yes" imported="no">eventSubscriber.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="VectorSingles_8hpp" name="VectorSingles.hpp" local="yes" imported="no">VectorSingles.hpp</includes>
    <includes id="Fields_8hpp" name="Fields.hpp" local="yes" imported="no">Fields.hpp</includes>
    <class kind="class">pFlow::triSurface</class>
    <class kind="class">pFlow::triSurface::triangleAccessor</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac2d6d14bc3cf5505e7872575334e6307</anchor>
      <arglist>(iIstream &amp;is, triSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa98f31101d4a03ad69e2b7d793597d13</anchor>
      <arglist>(iOstream &amp;os, const triSurface &amp;tri)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triSurfaceKernels.hpp</name>
    <path>src/phasicFlow/structuredData/trisurfaceStructure/</path>
    <filename>triSurfaceKernels_8hpp.html</filename>
    <includes id="Fields_8hpp" name="Fields.hpp" local="yes" imported="no">Fields.hpp</includes>
    <includes id="triangleFunctions_8hpp" name="triangleFunctions.hpp" local="yes" imported="no">triangleFunctions.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::triSurfaceKernels</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>calculateArea</name>
      <anchorfile>namespacepFlow_1_1triSurfaceKernels.html</anchorfile>
      <anchor>a605a728f5a58a4205ad0aa9d18178b4f</anchor>
      <arglist>(const realx3Field_D &amp;points, const int32x3Field_D &amp;vertices, realField_D &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>zAxis.cpp</name>
    <path>src/phasicFlow/structuredData/zAxis/</path>
    <filename>zAxis_8cpp.html</filename>
    <includes id="zAxis_8hpp" name="zAxis.hpp" local="yes" imported="no">zAxis.hpp</includes>
  </compound>
  <compound kind="file">
    <name>zAxis.hpp</name>
    <path>src/phasicFlow/structuredData/zAxis/</path>
    <filename>zAxis_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::zAxis</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>void</type>
      <name>MatMul</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0dc3a6e38c4eda1718bb81a1a28e91dd</anchor>
      <arglist>(T(&amp;A)[nRow][nInner], T(&amp;B)[nInner][nCol], T(&amp;C)[nRow][nCol])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignMat</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a93010698fb6068b606d0af3e1f77877c</anchor>
      <arglist>(T(&amp;A)[nRow][nCol], T(&amp;B)[nRow][nCol])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timer.cpp</name>
    <path>src/phasicFlow/Timer/</path>
    <filename>Timer_8cpp.html</filename>
    <includes id="Timer_8hpp" name="Timer.hpp" local="yes" imported="no">Timer.hpp</includes>
    <includes id="Timers_8hpp" name="Timers.hpp" local="yes" imported="no">Timers.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Timer.hpp</name>
    <path>src/phasicFlow/Timer/</path>
    <filename>Timer_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::Timer</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a23b14efdd5860d0f4650c69891aa7057</anchor>
      <arglist>(iOstream &amp;os, const Timer &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca6583353dac3e51144b03e42bb2dfa7</anchor>
      <arglist>(iIstream &amp;is, Timer &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Timers.cpp</name>
    <path>src/phasicFlow/Timer/</path>
    <filename>Timers_8cpp.html</filename>
    <includes id="Timers_8hpp" name="Timers.hpp" local="yes" imported="no">Timers.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Timers.hpp</name>
    <path>src/phasicFlow/Timer/</path>
    <filename>Timers_8hpp.html</filename>
    <includes id="List_8hpp" name="List.hpp" local="yes" imported="no">List.hpp</includes>
    <includes id="Timer_8hpp" name="Timer.hpp" local="yes" imported="no">Timer.hpp</includes>
    <class kind="class">pFlow::Timers</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e362c5ea5f34e63cf60f5b67d471980</anchor>
      <arglist>(iOstream &amp;os, const Timers &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbd3b0e2e4643ff35cc4e22a4e731aea</anchor>
      <arglist>(iIstream &amp;is, Timers &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bTypes.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>bTypes_8hpp.html</filename>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <includes id="bTypesFunctions_8hpp" name="bTypesFunctions.hpp" local="yes" imported="no">bTypesFunctions.hpp</includes>
    <includes id="Logical_8hpp" name="Logical.hpp" local="yes" imported="no">Logical.hpp</includes>
    <includes id="math_8hpp" name="math.hpp" local="yes" imported="no">math.hpp</includes>
  </compound>
  <compound kind="file">
    <name>bTypesFunctions.cpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>bTypesFunctions_8cpp.html</filename>
    <includes id="bTypesFunctions_8hpp" name="bTypesFunctions.hpp" local="yes" imported="no">bTypesFunctions.hpp</includes>
  </compound>
  <compound kind="file">
    <name>bTypesFunctions.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>bTypesFunctions_8hpp.html</filename>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <includes id="numericConstants_8hpp" name="numericConstants.hpp" local="yes" imported="no">numericConstants.hpp</includes>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <includes id="math_8hpp" name="math.hpp" local="yes" imported="no">math.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>const word</type>
      <name>whiteSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c14e09980c6a69931dc984377f457e8</anchor>
      <arglist>(&quot; \t\n\v\f\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>countChar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70fd022fd4f5be45fe00cf268bc4edad</anchor>
      <arglist>(const word &amp;s, const char c)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>countChar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a08fa27802ee4a4258de9d487feffc503</anchor>
      <arglist>(const char *s, const char c)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>toUpper</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85d082a1fd1aa0dd5be3e779502475a7</anchor>
      <arglist>(const word &amp;inStr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isYes</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade4b0a8390425fb1866e9540c27ff4e2</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNo</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a368046a383a0c4ab07960f9acdc46145</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2Fixed</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2468d40e6d50e0ecb071a5a675562faf</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2Word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac031fc8dbe057073f2b5ae5ad986bda4</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>removeDecimalZeros</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8a721cd37f226035a59b780dc7f48194</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2FixedStripZeros</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae474b7f0286e7a2523932f39bddf03fd</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>int322Word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a321d0334d760ce5f842a6269a00c2aa5</anchor>
      <arglist>(const int32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af4e1df8908797640749fa02e2f5db7a7</anchor>
      <arglist>(const word &amp;w1, const word &amp;w2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames2</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afe403b837013166b7f41881dded792a8</anchor>
      <arglist>(const word &amp;base, const word &amp;w1, const word &amp;w2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5604622b0a1df3bcc1b8b872c0b9d5fa</anchor>
      <arglist>(const word &amp;base, const word &amp;w1, const word &amp;w2, const word &amp;w3)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>groupNames</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a12b4d93aa9730629403d73e84386bff5</anchor>
      <arglist>(const word &amp;bw, const word &amp;tw, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>baseName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a16a2137651b2c6b8ea4a8daf1d89ff61</anchor>
      <arglist>(const word &amp;w, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>tailName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af771f81a015bdf8ae8472d37a4d76d0e</anchor>
      <arglist>(const word &amp;w, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a36795508123244e02c49855cd7d5dcd6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWordWithQuote</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab040d9291e355fe8f846e4677dc96e03</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a382590308860701550dd9f325ccb43f1</anchor>
      <arglist>(const word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWordWithQuote</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa0d361c39ae7e7d621d85ede0606bd34</anchor>
      <arglist>(const word &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLabel</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6406b648686498692a55b23534ea8895</anchor>
      <arglist>(const word &amp;w, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLabel</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1d0230fc994c0e88936d13ae3fd7f2d</anchor>
      <arglist>(const char *buf, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c09d609fdab431b8f9cf7bc2f6af9f4</anchor>
      <arglist>(const word &amp;w, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a60d11c9c773378334ab6266d3bc6a093</anchor>
      <arglist>(const char *buf, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9acdc80931dc1f33a613fc4bb301cc7</anchor>
      <arglist>(const word &amp;w, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade0d09fe206cdeb50bf1e3e3b0d88828</anchor>
      <arglist>(const char *buf, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae2271da7154e227782193de61ffc2b9e</anchor>
      <arglist>(const word &amp;w, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a110c29a84b83fce8a6cbf135f76922ef</anchor>
      <arglist>(const char *buf, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a703a5f01363ec784ea0d2b08540d036c</anchor>
      <arglist>(const word &amp;w, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa7da7d853dfdb71dbf539378881499d6</anchor>
      <arglist>(const char *buf, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a534f46532ab400cf3abcbd64b8d01076</anchor>
      <arglist>(const word &amp;w, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8c2dbcf52528852f5272713f511ea848</anchor>
      <arglist>(const char *buf, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readReal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8acdba4ad9d3d292222d853598e90b5b</anchor>
      <arglist>(const word &amp;w, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readReal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaba5935e0e70991c73963de74f4fd166</anchor>
      <arglist>(const char *buf, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBoolian_Str</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad14acab072635ba3fa539283f602b1a5</anchor>
      <arglist>(const word &amp;w, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBoolian_Str</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b21bca45af1cb585025a7953f0de445</anchor>
      <arglist>(const char *buf, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6540794351dd8f67fab4c5132f6eb8d5</anchor>
      <arglist>(const word &amp;w, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab10ec635faaaa011856b44c4df5577ed</anchor>
      <arglist>(const word &amp;w, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a57355b0ba1c496a48b7e6b20514bd564</anchor>
      <arglist>(const word &amp;w, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a16c2739b9be3e448a9630971e5b7a358</anchor>
      <arglist>(const word &amp;w, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aadec1b5606bf7535783a0d95b608b56d</anchor>
      <arglist>(const word &amp;w, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab37c0d087dc3387384d8a3368a578ced</anchor>
      <arglist>(const word &amp;w, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af63694f584a9cbaac903f25431263c4d</anchor>
      <arglist>(const word &amp;w, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>add44cb524ba01de038071c5227ccc304</anchor>
      <arglist>(const word &amp;w, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8527eb6b5dd7b0ff878c7fe009307d11</anchor>
      <arglist>(const real &amp;s1, const real &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac40a32ef42b101fdb9f800fdce151d6d</anchor>
      <arglist>(const int64 &amp;s1, const int64 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9c851a520eb0abb8e9db47b50372e337</anchor>
      <arglist>(const int32 &amp;s1, const int32 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4905ca22677d98ea1a443d3543305b2b</anchor>
      <arglist>(const int16 &amp;s1, const int16 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a23e95878f3ebbf57b0849c572c22a521</anchor>
      <arglist>(const int8 &amp;s1, const int8 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad978ac1bb53a0584564810aabefa8555</anchor>
      <arglist>(const uint32 &amp;s1, const uint32 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a313ccd90e087cb23e53485d2c1e7ed54</anchor>
      <arglist>(const label &amp;s1, const label &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a41c5429e213a3eaeebeb1dec909d8767</anchor>
      <arglist>(const word &amp;s1, const word &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>degree2Radian</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9e670b16ecc01fd78e29a0bde333ebe1</anchor>
      <arglist>(const real &amp;theta)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>radian2Degree</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a84c596f05446b8fac16599796222e826</anchor>
      <arglist>(const real &amp;phi)</arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>zero</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a69f7468c5e958bdc873c8e02d50464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>one</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a198bf8e0d35e416c7c56b33e4fcf168e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>zero32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac1501915b5dce87394aa0172c840457f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>one32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7630ff09ef708c51ccd5c61047b5057a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word</type>
      <name>nullWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa3bcf6b40c03df25c0fbdfbff6be807f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>builtinTypes.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>builtinTypes_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>useDouble</name>
      <anchorfile>builtinTypes_8hpp.html</anchorfile>
      <anchor>aca99d93f8f69d5c9b841703b7cd38f29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>real</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6192191c0e9c178a44ee1ac350fde476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a07fb256c1077eea7a7726e948cc8ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short int</type>
      <name>int16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a209decd2d9a8cd5f1697cdb6e00f1cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aae6ad039f09c0676db11bd114136a3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long int</type>
      <name>int64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a94809bdb48183ff3ef62935d56f5c1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short int</type>
      <name>uint16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab7078bf13036f3e78534da3ad4149dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abd01e8e67e3d94cab04ecaaf4f85ac1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>label</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a39f5f71474553bc78726494fa09dd0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0ebe792a293e8c717bddf60070c0fe99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>floatingPointDescription</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2816afe03086403243c842aab71d5861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>floatingPointType__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a436834590374d8a1c62a0e5177dd6ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>usingDouble__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0aa0e57d6b3e0070b58fcf87a7e439ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Logical.cpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>Logical_8cpp.html</filename>
    <includes id="Logical_8hpp" name="Logical.hpp" local="yes" imported="no">Logical.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
  </compound>
  <compound kind="file">
    <name>Logical.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>Logical_8hpp.html</filename>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <includes id="bTypesFunctions_8hpp" name="bTypesFunctions.hpp" local="yes" imported="no">bTypesFunctions.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <class kind="class">pFlow::Logical</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3317c6444777cc7927e1fab71586c38c</anchor>
      <arglist>(iIstream &amp;is, Logical &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa4c729882ee9c05e504021ba6c0ed08f</anchor>
      <arglist>(iOstream &amp;os, const Logical &amp;L)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>math_8hpp.html</filename>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af5c3201dc66f66e8516c3769bf0a9c72</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac33071888037c59fa7c970065f9c80f8</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad206ee78176e37c1a38f69b7488d0f84</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2652a8adcb3853fc3fc2efc610665d67</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adf843c10827fbe2b15693e8d5bd85e80</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0ffddf5f6d4fd2b7fc48d61843c2417d</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac335fecc3431c55687baacdebae54ddf</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5ff38166aafbd2d1e4fc3c6642a29688</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>remainder</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1da5441ef799ff99fb9271d1c578f9f9</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>exp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9c8165b034f2d37407b1348417b66dc1</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>log</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7ce3408cc7a0ef98e06730526dca6dea</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>log10</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e6a4f3f14c6487adc030f140019d51f</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5f8078437f457cd79584e1a0bca182d5</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sqrt</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8ba019369ee26f79816baedbcf5ab1b</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cbrt</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af0406aca2746ef3d8f09567f3ff086ae</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sin</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaec3d4670bd93130e51fdc1703d4eca7</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cos</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1289d40e1a3f301bc5b2bfca5b9eab49</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>tan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5ab7a371316ac7dead80f9ee74004d0a</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>asin</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af1e9a058098382fe6e67a2f9f4437089</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>acos</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6607d72e440941b45ad1d7a3afc45662</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5e83a7dc3dbc31d8d46eaacc033cedee</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atan2</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9a1f58dc254fb677cf96c8b0ee06e4bd</anchor>
      <arglist>(real y, real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sinh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c74be74564d8f81b52649f09adcfcc4</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cosh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae72356317ae5bd906193eccc57f00207</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>tanh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a99866106e1dc195d1cb44dd9e6756f37</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>asinh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d36a3042b87b76148339f852327a041</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>acosh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b7959529c76cffccb4b563651cbca21</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atanh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a50ddc0fc5f1e2a10bb95afdf60eb9ef5</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a408a64511c91d8f580ff811399c3356e</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbd015eb73fb40b84632dc033eee9ad5</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a10c3e710c08e9f0c29927d8995ee31be</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD label</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8cfd766a28eca7d1f3a4c20a308d265c</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe4457d9f895431c0066e5368bd5708f</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a71cec2d477cf281ce2a29c4c3b8e2a71</anchor>
      <arglist>(uint16 x, uint16 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac22ca81e2ca42d334dfe3ed7d34d6055</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d4d388909669c5de2889a6dfbab3178</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7012838955fdaa0cf26df5c16b079750</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD label</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca68b837b3417fc1f0cbe7d485982f87</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a74427c9beb51f8694e6ba06045445be2</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c1f90bde7b70b3019f64a59fd4d3557</anchor>
      <arglist>(uint16 x, uint16 y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>numericConstants.hpp</name>
    <path>src/phasicFlow/types/basicTypes/</path>
    <filename>numericConstants_8hpp.html</filename>
    <includes id="builtinTypes_8hpp" name="builtinTypes.hpp" local="yes" imported="no">builtinTypes.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>constexpr T</type>
      <name>largestNegative</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8027dc1514971110c285287710cdb4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>epsilonValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20dda42518b4d7efa83894dd8c03837c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>largestPositive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addcdc03bd99ad783ecb6b153618fc16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>Pi</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5fde17044bd1d2599c2e8c5aba9fb346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>smallValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abfbb7af55004f8113864a4da90c43545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>verySmallValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6bfee6221ffe685c9007604c7e71b305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largeValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a66263d59f896f4b8524b0a1f0181f8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>veryLargeValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9d1b590d78ffef4b20c7daa1648bd9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>largestNegInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ee2c88d6e9faceb7ece2b2ccd2942ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>largestPosInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adb5cbd180a96327fd58897cbd8faa670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int64</type>
      <name>largestNegInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af93fb0b34c3207958168f68beb526df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int64</type>
      <name>largestPosInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad91d579ce4d1ed156f09c96be1620393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largestNegREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a332d59fc35731448fa9ae68ae6916cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largestPosREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a612aecd846561dc446c4cf94ffbce115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>epsilonREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac6b82e272ae0e23afb8f0c773a61d4f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quadruple.hpp</name>
    <path>src/phasicFlow/types/quadruple/</path>
    <filename>quadruple_8hpp.html</filename>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="triple_8hpp" name="triple.hpp" local="yes" imported="no">triple.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="token_8hpp" name="token.hpp" local="yes" imported="no">token.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="quadrupleFwd_8hpp" name="quadrupleFwd.hpp" local="yes" imported="no">quadrupleFwd.hpp</includes>
    <includes id="quadrupleI_8hpp" name="quadrupleI.hpp" local="yes" imported="no">quadrupleI.hpp</includes>
    <class kind="class">pFlow::quadruple</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>quadrupleFwd.hpp</name>
    <path>src/phasicFlow/types/quadruple/</path>
    <filename>quadrupleFwd_8hpp.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T</type>
      <name>dot</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a6b8bdd44e6ac0d39b65ebd0eef5d4600</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>ac0847d7dd85323431c2044f93ab7e019</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a8b6597e2ea3411596981de186ac40330</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a1a752fd86cbb937b7564100d7cbeb44d</anchor>
      <arglist>(const T &amp;oprnd2, const quadruple&lt; T &gt; &amp;oprnd1)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>acbee24993c1671812eec81cb66d3c4ce</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>ac07476233169684c6e9c9a36967730e3</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a945eb194e95467f5e54453d60098d3ad</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a5e73c810af7524ce241ac589eeaf1475</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a3bfa1c5d71e01888a5fbc94d0762a30c</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>af06675922c27a3021fefec0e54ea8258</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a5124c3463c4633c0174d2601cfc919c6</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>aa3b59fddf4aed89dfbdfe254e4e832c5</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>ae9513e1ead0645724ed2000cc6e5d730</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator==</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a6ab75f24fa061d6f642e00bc936edf7b</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;opr1, const quadruple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a347fe9d11d2c6b93f43a64ce29f19407</anchor>
      <arglist>(iOstream &amp;str, const quadruple&lt; T &gt; &amp;ov)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>abe16a4e09065b746e1a24cb2d73ceeff</anchor>
      <arglist>(iIstream &amp;str, quadruple&lt; T &gt; &amp;iv)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>readIstream</name>
      <anchorfile>quadrupleFwd_8hpp.html</anchorfile>
      <anchor>a7e11ea9cc5bee9e4bf7026b05639c3ac</anchor>
      <arglist>(iIstream &amp;str, quadruple&lt; T &gt; &amp;iv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quadrupleI.hpp</name>
    <path>src/phasicFlow/types/quadruple/</path>
    <filename>quadrupleI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>quadrupleMath.hpp</name>
    <path>src/phasicFlow/types/quadruple/</path>
    <filename>quadrupleMath_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>Q4Func</name>
      <anchorfile>quadrupleMath_8hpp.html</anchorfile>
      <anchor>a82ae988ad12c163cd785c01fbae5333e</anchor>
      <arglist>(fnName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Q4Func2</name>
      <anchorfile>quadrupleMath_8hpp.html</anchorfile>
      <anchor>a9b684d0038b59f65dfecef1209fa5a1b</anchor>
      <arglist>(fnName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triple.hpp</name>
    <path>src/phasicFlow/types/triple/</path>
    <filename>triple_8hpp.html</filename>
    <includes id="pFlowMacros_8hpp" name="pFlowMacros.hpp" local="yes" imported="no">pFlowMacros.hpp</includes>
    <includes id="numericConstants_8hpp" name="numericConstants.hpp" local="yes" imported="no">numericConstants.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="iOstream_8hpp" name="iOstream.hpp" local="yes" imported="no">iOstream.hpp</includes>
    <includes id="iIstream_8hpp" name="iIstream.hpp" local="yes" imported="no">iIstream.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="tripleFwd_8hpp" name="tripleFwd.hpp" local="yes" imported="no">tripleFwd.hpp</includes>
    <includes id="tripleI_8hpp" name="tripleI.hpp" local="yes" imported="no">tripleI.hpp</includes>
    <includes id="tripleMath_8hpp" name="tripleMath.hpp" local="yes" imported="no">tripleMath.hpp</includes>
    <class kind="struct">pFlow::triple</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool INLINE_FUNCTION_HD</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76cdb691bdbc24f036cfccc1909f8b6</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tripleFwd.hpp</name>
    <path>src/phasicFlow/types/triple/</path>
    <filename>tripleFwd_8hpp.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T</type>
      <name>dot</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a32e00bc9386e10d36483d96f7c34a62f</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ac0bf3f285f32670338c8356c80529c65</anchor>
      <arglist>(const triple&lt; T &gt; &amp;v1, const triple&lt; T &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T</type>
      <name>length</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ae1449f1d56abab2ec4d0f00b685fc478</anchor>
      <arglist>(const triple&lt; T &gt; &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>normalize</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a393914ab47fbf91b6bc6ad8784b1aaac</anchor>
      <arglist>(const triple&lt; T &gt; &amp;v1)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a593d6f3cb7751c669cc75a25d084ffb1</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ab8b4d6c8443bacb1bc7c5d189612fc99</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>aabe1155a2768ac12301e6d6609fcc306</anchor>
      <arglist>(const T &amp;oprnd2, const triple&lt; T &gt; &amp;oprnd1)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a4098e6536a56083e9b2e4a74b6ca7074</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a39e96a441736c01398754fb3cae32844</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>aceb91a7769a6407b206dd825d9ee41ee</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a0eefdad6d1a7b4e65eb632cbe34b7658</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a4032a1f96c8ba66eb4318ae2928a2745</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ab37981301cc20ee21afa0fca5aac1244</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a44d074fbbda5f0c631e15e8b282ddb38</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a7fe515589a3bef79fbed95b4dab7e66f</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>aff97c33fe00b96fbaf97a6a24679099e</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator==</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a9dc23769b58a8540c26f7cef4b784f4c</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator&gt;</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ad1add069b9d6293f8264646365d76659</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator&lt;</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a4f16f14ab55a4a395fc02ffe052dea26</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator&lt;=</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>ab6fe451c4066b183f8a936ca88b58683</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator&gt;=</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a1409d8f7eef818313bfece31775add7e</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a367f665d6ff794be5699bd7ae483c2c4</anchor>
      <arglist>(iOstream &amp;str, const triple&lt; T &gt; &amp;ov)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a88c495c3280f4cb26271ca4cb33682c6</anchor>
      <arglist>(iIstream &amp;str, triple&lt; T &gt; &amp;iv)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION void</type>
      <name>readIstream</name>
      <anchorfile>tripleFwd_8hpp.html</anchorfile>
      <anchor>a0cb89e8549a3c7ccb8147b5d402f200e</anchor>
      <arglist>(iIstream &amp;str, triple&lt; T &gt; &amp;iv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tripleI.hpp</name>
    <path>src/phasicFlow/types/triple/</path>
    <filename>tripleI_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>tripleMath.hpp</name>
    <path>src/phasicFlow/types/triple/</path>
    <filename>tripleMath_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>T3Func</name>
      <anchorfile>tripleMath_8hpp.html</anchorfile>
      <anchor>a100b50a458ede943b573178d00ca43be</anchor>
      <arglist>(fnName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>T3Func2</name>
      <anchorfile>tripleMath_8hpp.html</anchorfile>
      <anchor>a063a658b212daa7375e77de516af1087</anchor>
      <arglist>(fnName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.cpp</name>
    <path>src/phasicFlow/types/</path>
    <filename>types_8cpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="variable">
      <type>const realx3</type>
      <name>zero3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a477d522d35403bd985ae105bd759e9d1</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3</type>
      <name>one3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24fc985ad36c00fec91d6a4dcfb143f2</anchor>
      <arglist>(1.0)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3</type>
      <name>zeroU3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa6af5219042fbe2fd224f0085630be09</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3</type>
      <name>oneU3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad6a179a55c85740ab771170da5dc7824</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3x3</type>
      <name>zero33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac264180ae461c79d1b0daca0236072ca</anchor>
      <arglist>(zero3)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3x3</type>
      <name>one33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeea498891f1be291bb476c4f440fcdbd</anchor>
      <arglist>(one3)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3x3</type>
      <name>zeroU33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac7c77472debb56ed05d3638d8faf6ea9</anchor>
      <arglist>(zeroU3)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3x3</type>
      <name>oneU33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a031b666bdebdb7413bf2abb8690c6092</anchor>
      <arglist>(oneU3)</arglist>
    </member>
    <member kind="variable">
      <type>const real4</type>
      <name>zero4</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac28370ab27e2eb4a22f90e79a7a39ea7</anchor>
      <arglist>(zero)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.hpp</name>
    <path>src/phasicFlow/types/</path>
    <filename>types_8hpp.html</filename>
    <includes id="bTypes_8hpp" name="bTypes.hpp" local="yes" imported="no">bTypes.hpp</includes>
    <includes id="bTypesFunctions_8hpp" name="bTypesFunctions.hpp" local="yes" imported="no">bTypesFunctions.hpp</includes>
    <includes id="triple_8hpp" name="triple.hpp" local="yes" imported="no">triple.hpp</includes>
    <includes id="quadruple_8hpp" name="quadruple.hpp" local="yes" imported="no">quadruple.hpp</includes>
    <includes id="typeInfo_8hpp" name="typeInfo.hpp" local="yes" imported="no">typeInfo.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>triple&lt; int8 &gt;</type>
      <name>int8x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a46dc502a83c2a829b66fce9fa00a9a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int16 &gt;</type>
      <name>int16x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a818e1e51d9eed2dde6622751c453dd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int32 &gt;</type>
      <name>int32x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51afbafe3e3517b4e7755c14959053df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int64 &gt;</type>
      <name>int64x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5b5f4b04dbb58e0f1c0a5764d85acc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint16 &gt;</type>
      <name>uint16x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa9f9c8182c64a3a4dd30939cd115d60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint32 &gt;</type>
      <name>uint32x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac855895a97b710fcd720a106454d0f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; label &gt;</type>
      <name>labelx3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa0ba176e7980e793396a21013d16066b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; real &gt;</type>
      <name>realx3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5164661f6974ad24fa90bf19433e6116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint16x3 &gt;</type>
      <name>uint16x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afe55417bca4bd6ba37385ec4f4218e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint32x3 &gt;</type>
      <name>uint32x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad53055328b135c6bb102771485f536e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int32x3 &gt;</type>
      <name>int32x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a005aaa9029dea35edc607488975436fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; labelx3 &gt;</type>
      <name>labelx3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae774ba7b10a9b5bdca87f75edd90d1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; realx3 &gt;</type>
      <name>realx3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1f679e3de3ea62dfad0ac20f7c992277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadruple&lt; real &gt;</type>
      <name>real4</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6859bf55f23b9280778df47d713840e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int8x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6f3cf7f609a19e6fe31b649db2bfb62b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int16x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbef1e14f97155fe78a4d51b366d5209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int32x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1cc00f5b3bea6807179543041168f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int64x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa73e31985ac01733cc82ce9ba3078f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint16x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeaf8eb316ed6b7edaf24b2615a8b3be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aec7d9b1f395ffb19215ac1efd2e0ea0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; labelx3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2247795cc0391bc7e1741cdc47df307a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; realx3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a77a738816b2f4f66da5a9f4b93078a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint16x3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a658d0964156cb6785b1973553d3ce0e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32x3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae065936299c3ae6b785e0b03d8df931d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; realx3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a53e8e9a9f85f4aac50934b02494f311f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; real4 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a73955c007b74e23e6eb444a08377e434</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typeInfo.hpp</name>
    <path>src/phasicFlow/typeSelection/</path>
    <filename>typeInfo_8hpp.html</filename>
    <includes id="bTypes_8hpp" name="bTypes.hpp" local="yes" imported="no">bTypes.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="define">
      <type>#define</type>
      <name>has_static_member</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a94750d69ccf30b3c34ea77e2fc752471</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfo</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>ade71aa2590b0f90524f5a857d00838ec</anchor>
      <arglist>(tName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoNV</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a47591499911d48141db12f825256b89b</anchor>
      <arglist>(tName)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoTemplate</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a1c0cac7f688d58c903edee68af9e616a</anchor>
      <arglist>(tName, Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoTemplate2</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a58de959e455a72a80eeaf29c2a68bb5f</anchor>
      <arglist>(tName, Type1, Type2)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoTemplate3</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a75c05541f9ff5bfac9eb7216d309a069</anchor>
      <arglist>(tName, Type1, Type2, Type3)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>af110c42aea06a13b161dae473263aeb0</anchor>
      <arglist>(tName, Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>typeInfo_8hpp.html</anchorfile>
      <anchor>a2b02b37b6975439e3b77b191455d9477</anchor>
      <arglist>(tName, Type, tName2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a96a935a241e80c0dd523c89ea24d779a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; word &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0119afd50d7be92bed5ab304a173d6fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int64 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab50f06970285a8f65ac711935f5e2afd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int32 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8371ebdd914139cfaabd65ca652fc297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int16 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a21c8812099ded38623cc7f645ed173a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int8 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af1bf25a53c3993764078aca601dd14df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; label &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9883d9e82782ba1af4554594820b777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa14a780de6cb2ca62a1aeae40531d726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; real &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeb53cd6616f7fa6a1217be479d4fbaee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18d035dcd7688959e87d9b11b1cd7fcd</anchor>
      <arglist>(Type2 *object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1df5c5957e14c4059b71ab59ecebdeeb</anchor>
      <arglist>(Type2 &amp;object)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>virtualConstructor.hpp</name>
    <path>src/phasicFlow/typeSelection/</path>
    <filename>virtualConstructor_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="Map_8hpp" name="Map.hpp" local="yes" imported="no">Map.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>create_vCtor</name>
      <anchorfile>virtualConstructor_8hpp.html</anchorfile>
      <anchor>a8795024d89c61fd4c71d86d890724525</anchor>
      <arglist>(baseClass, selectorName, argList, args)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>add_vCtor</name>
      <anchorfile>virtualConstructor_8hpp.html</anchorfile>
      <anchor>acb09f5be791ae8096c557d54ce99de5d</anchor>
      <arglist>(baseClass, derivedClass, selectorName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>property.cpp</name>
    <path>src/Property/</path>
    <filename>property_8cpp.html</filename>
    <includes id="property_8hpp" name="property.hpp" local="yes" imported="no">property.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
  </compound>
  <compound kind="file">
    <name>property.hpp</name>
    <path>src/Property/</path>
    <filename>property_8hpp.html</filename>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="hashMap_8hpp" name="hashMap.hpp" local="yes" imported="no">hashMap.hpp</includes>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="iFstream_8hpp" name="iFstream.hpp" local="yes" imported="no">iFstream.hpp</includes>
    <class kind="class">pFlow::property</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>finalize.hpp</name>
    <path>src/setHelpers/</path>
    <filename>finalize_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>initialize.hpp</name>
    <path>src/setHelpers/</path>
    <filename>initialize_8hpp.html</filename>
    <member kind="function">
      <type></type>
      <name>REPORT</name>
      <anchorfile>initialize_8hpp.html</anchorfile>
      <anchor>aa8ebce378c609df4a3c14262d4565609</anchor>
      <arglist>(0)&lt;&lt;&quot;Initializing host/device execution spaces . . . \n&quot;</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>initialize_Control.hpp</name>
    <path>src/setHelpers/</path>
    <filename>initialize__Control_8hpp.html</filename>
    <includes id="initialize_8hpp" name="initialize.hpp" local="yes" imported="no">initialize.hpp</includes>
    <member kind="function">
      <type></type>
      <name>REPORT</name>
      <anchorfile>initialize__Control_8hpp.html</anchorfile>
      <anchor>ade8c9f01a0d3b64030083276b6b23dc5</anchor>
      <arglist>(0)&lt;&lt;&quot;\nCreating Control repository . . .&quot;&lt;&lt; endREPORT</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>if</name>
      <anchorfile>initialize__Control_8hpp.html</anchorfile>
      <anchor>a1523b33abc50381afdaf093a953c6fa6</anchor>
      <arglist>(isCoupling)</arglist>
    </member>
    <member kind="variable">
      <type>pFlow::uniquePtr&lt; pFlow::systemControl &gt;</type>
      <name>ControlPtr</name>
      <anchorfile>initialize__Control_8hpp.html</anchorfile>
      <anchor>a07d85a0914cbf91a000f993a3e62117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type></type>
      <name>else</name>
      <anchorfile>initialize__Control_8hpp.html</anchorfile>
      <anchor>a0544c3fe466e421738dae463968b70ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>auto &amp;</type>
      <name>Control</name>
      <anchorfile>initialize__Control_8hpp.html</anchorfile>
      <anchor>a4f5e4e852648762473ecd75a907417ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>setPointStructure.hpp</name>
    <path>src/setHelpers/</path>
    <filename>setPointStructure_8hpp.html</filename>
    <member kind="variable">
      <type>auto &amp;</type>
      <name>pStruct</name>
      <anchorfile>setPointStructure_8hpp.html</anchorfile>
      <anchor>a385e32971df44b131e4498181a949a91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>setProperty.hpp</name>
    <path>src/setHelpers/</path>
    <filename>setProperty_8hpp.html</filename>
    <member kind="function">
      <type></type>
      <name>REPORT</name>
      <anchorfile>setProperty_8hpp.html</anchorfile>
      <anchor>a1a3e0d42c5c87616718bc92f0aa24993</anchor>
      <arglist>(0)&lt;&lt;&quot;\nReading proprties . . . &quot;&lt;&lt; endREPORT</arglist>
    </member>
    <member kind="variable">
      <type>auto</type>
      <name>proprties</name>
      <anchorfile>setProperty_8hpp.html</anchorfile>
      <anchor>ab0e7d0f9466a55a6fdb2417bc44ca707</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>setSurfaceGeometry.hpp</name>
    <path>src/setHelpers/</path>
    <filename>setSurfaceGeometry_8hpp.html</filename>
    <member kind="function">
      <type></type>
      <name>REPORT</name>
      <anchorfile>setSurfaceGeometry_8hpp.html</anchorfile>
      <anchor>a6cf18a82db4624ca17adf6cbe3882395</anchor>
      <arglist>(0)&lt;&lt; &quot;\nCreating surface geometry . . . &quot;&lt;&lt; endREPORT</arglist>
    </member>
    <member kind="variable">
      <type>auto</type>
      <name>surfGeometryPtr</name>
      <anchorfile>setSurfaceGeometry_8hpp.html</anchorfile>
      <anchor>acb7300299351efe8155f701b743a7b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>auto &amp;</type>
      <name>surfGeometry</name>
      <anchorfile>setSurfaceGeometry_8hpp.html</anchorfile>
      <anchor>a195e279064ba2595c36f5f8d504822cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>checkPhasicFlow.cpp</name>
    <path>utilities/checkPhasicFlow/</path>
    <filename>checkPhasicFlow_8cpp.html</filename>
    <includes id="KokkosTypes_8hpp" name="KokkosTypes.hpp" local="yes" imported="no">KokkosTypes.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="initialize_8hpp" name="initialize.hpp" local="yes" imported="no">initialize.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>checkPhasicFlow_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometryPhasicFlow.cpp</name>
    <path>utilities/geometryPhasicFlow/</path>
    <filename>geometryPhasicFlow_8cpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="multiTriSurface_8hpp" name="multiTriSurface.hpp" local="yes" imported="no">multiTriSurface.hpp</includes>
    <includes id="geometryMotion_8hpp" name="geometryMotion.hpp" local="yes" imported="no">geometryMotion.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="setProperty_8hpp" name="setProperty.hpp" local="yes" imported="no">setProperty.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>geometryPhasicFlow_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>empty.cpp</name>
    <path>utilities/particlesPhasicFlow/empty/</path>
    <filename>particlesPhasicFlow_2empty_2empty_8cpp.html</filename>
    <includes id="particlesPhasicFlow_2empty_2empty_8hpp" name="empty.hpp" local="yes" imported="no">empty.hpp</includes>
  </compound>
  <compound kind="file">
    <name>empty.cpp</name>
    <path>utilities/positionParticles_notnow/empty/</path>
    <filename>positionParticles__notnow_2empty_2empty_8cpp.html</filename>
    <includes id="positionParticles__notnow_2empty_2empty_8hpp" name="empty.hpp" local="yes" imported="no">empty.hpp</includes>
  </compound>
  <compound kind="file">
    <name>empty.hpp</name>
    <path>utilities/particlesPhasicFlow/empty/</path>
    <filename>particlesPhasicFlow_2empty_2empty_8hpp.html</filename>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::empty</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>empty.hpp</name>
    <path>utilities/positionParticles_notnow/empty/</path>
    <filename>positionParticles__notnow_2empty_2empty_8hpp.html</filename>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::empty</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>particlesPhasicFlow.cpp</name>
    <path>utilities/particlesPhasicFlow/</path>
    <filename>particlesPhasicFlow_8cpp.html</filename>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="particlesPhasicFlow_2setFields_8hpp" name="setFields.hpp" local="yes" imported="no">setFields.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>particlesPhasicFlow_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>positionOrdered.cpp</name>
    <path>utilities/particlesPhasicFlow/positionOrdered/</path>
    <filename>particlesPhasicFlow_2positionOrdered_2positionOrdered_8cpp.html</filename>
    <includes id="particlesPhasicFlow_2positionOrdered_2positionOrdered_8hpp" name="positionOrdered.hpp" local="yes" imported="no">positionOrdered.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>positionOrdered.cpp</name>
    <path>utilities/positionParticles_notnow/positionOrdered/</path>
    <filename>positionParticles__notnow_2positionOrdered_2positionOrdered_8cpp.html</filename>
    <includes id="positionParticles__notnow_2positionOrdered_2positionOrdered_8hpp" name="positionOrdered.hpp" local="yes" imported="no">positionOrdered.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="yes" imported="no">error.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>positionOrdered.hpp</name>
    <path>utilities/particlesPhasicFlow/positionOrdered/</path>
    <filename>particlesPhasicFlow_2positionOrdered_2positionOrdered_8hpp.html</filename>
    <class kind="class">pFlow::positionOrdered</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>positionOrdered.hpp</name>
    <path>utilities/positionParticles_notnow/positionOrdered/</path>
    <filename>positionParticles__notnow_2positionOrdered_2positionOrdered_8hpp.html</filename>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::positionOrdered</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>positionParticles.cpp</name>
    <path>utilities/particlesPhasicFlow/positionParticles/</path>
    <filename>particlesPhasicFlow_2positionParticles_2positionParticles_8cpp.html</filename>
    <includes id="particlesPhasicFlow_2positionParticles_2positionParticles_8hpp" name="positionParticles.hpp" local="yes" imported="no">positionParticles.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <includes id="cylinder_8hpp" name="cylinder.hpp" local="yes" imported="no">cylinder.hpp</includes>
    <includes id="sphere_8hpp" name="sphere.hpp" local="yes" imported="no">sphere.hpp</includes>
    <includes id="cells_8hpp" name="cells.hpp" local="yes" imported="no">cells.hpp</includes>
    <includes id="contactSearchFunctions_8hpp" name="contactSearchFunctions.hpp" local="yes" imported="no">contactSearchFunctions.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>positionParticles.cpp</name>
    <path>utilities/positionParticles_notnow/positionParticles/</path>
    <filename>positionParticles__notnow_2positionParticles_2positionParticles_8cpp.html</filename>
    <includes id="positionParticles__notnow_2positionParticles_2positionParticles_8hpp" name="positionParticles.hpp" local="yes" imported="no">positionParticles.hpp</includes>
    <includes id="cells_8hpp" name="cells.hpp" local="yes" imported="no">cells.hpp</includes>
    <includes id="contactSearchFunctions_8hpp" name="contactSearchFunctions.hpp" local="yes" imported="no">contactSearchFunctions.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>positionParticles.hpp</name>
    <path>utilities/particlesPhasicFlow/positionParticles/</path>
    <filename>particlesPhasicFlow_2positionParticles_2positionParticles_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::regionBase</class>
    <class kind="class">pFlow::region</class>
    <class kind="class">pFlow::positionParticles</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>positionParticles.hpp</name>
    <path>utilities/positionParticles_notnow/positionParticles/</path>
    <filename>positionParticles__notnow_2positionParticles_2positionParticles_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::positionParticles</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>positionRandom.cpp</name>
    <path>utilities/particlesPhasicFlow/positionRandom/</path>
    <filename>particlesPhasicFlow_2positionRandom_2positionRandom_8cpp.html</filename>
    <includes id="particlesPhasicFlow_2positionRandom_2positionRandom_8hpp" name="positionRandom.hpp" local="yes" imported="no">positionRandom.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <includes id="NBSLevel0_8hpp" name="NBSLevel0.hpp" local="yes" imported="no">NBSLevel0.hpp</includes>
    <includes id="unsortedPairs_8hpp" name="unsortedPairs.hpp" local="yes" imported="no">unsortedPairs.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>NBSLevel0&lt; DefaultExecutionSpace &gt;</type>
      <name>SearchType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ada1255f9f9041aab271f918b85829dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsortedPairs&lt; DefaultExecutionSpace, int32 &gt;</type>
      <name>ContainerType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a26a12be4abf424c0f3997813af3bc15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24885cb190423b898df97b7a7e84942a</anchor>
      <arglist>(ContainerType &amp;pairs, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a682fb753426153c0041a7cd7df274e45</anchor>
      <arglist>(int32 num, realx3Vector_HD &amp;points, real diam)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>positionRandom.cpp</name>
    <path>utilities/positionParticles_notnow/positionRandom/</path>
    <filename>positionParticles__notnow_2positionRandom_2positionRandom_8cpp.html</filename>
    <includes id="positionParticles__notnow_2positionRandom_2positionRandom_8hpp" name="positionRandom.hpp" local="yes" imported="no">positionRandom.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <includes id="VectorSingles_8hpp" name="VectorSingles.hpp" local="yes" imported="no">VectorSingles.hpp</includes>
    <includes id="VectorDuals_8hpp" name="VectorDuals.hpp" local="yes" imported="no">VectorDuals.hpp</includes>
    <includes id="NBS_8hpp" name="NBS.hpp" local="yes" imported="no">NBS.hpp</includes>
    <includes id="unsortedPairs_8hpp" name="unsortedPairs.hpp" local="yes" imported="no">unsortedPairs.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>void</type>
      <name>fillPoints</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa503d7002ea275748ff24d927649babc</anchor>
      <arglist>(uint numPoints, realx3 minP, realx3 maxP, realx3Vector_HD &amp;points, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24885cb190423b898df97b7a7e84942a</anchor>
      <arglist>(ContainerType &amp;pairs, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a682fb753426153c0041a7cd7df274e45</anchor>
      <arglist>(int32 num, realx3Vector_HD &amp;points, real diam)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>positionRandom.hpp</name>
    <path>utilities/particlesPhasicFlow/positionRandom/</path>
    <filename>particlesPhasicFlow_2positionRandom_2positionRandom_8hpp.html</filename>
    <includes id="VectorSingles_8hpp" name="VectorSingles.hpp" local="yes" imported="no">VectorSingles.hpp</includes>
    <includes id="VectorDuals_8hpp" name="VectorDuals.hpp" local="yes" imported="no">VectorDuals.hpp</includes>
    <class kind="class">pFlow::positionRandom</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>positionRandom.hpp</name>
    <path>utilities/positionParticles_notnow/positionRandom/</path>
    <filename>positionParticles__notnow_2positionRandom_2positionRandom_8hpp.html</filename>
    <includes id="VectorSingles_8hpp" name="VectorSingles.hpp" local="yes" imported="no">VectorSingles.hpp</includes>
    <includes id="box_8hpp" name="box.hpp" local="yes" imported="no">box.hpp</includes>
    <class kind="class">pFlow::positionRandom</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>setFields.hpp</name>
    <path>utilities/particlesPhasicFlow/</path>
    <filename>particlesPhasicFlow_2setFields_8hpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>applySelector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeef07d636cc2337061942731230363cc</anchor>
      <arglist>(systemControl &amp;control, const pointStructure &amp;pStruct, const dictionary &amp;selDict)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>setFields.hpp</name>
    <path>utilities/setFields_notnow/</path>
    <filename>setFields__notnow_2setFields_8hpp.html</filename>
    <includes id="pStructSelector_8hpp" name="pStructSelector.hpp" local="yes" imported="no">pStructSelector.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="setFieldList_8hpp" name="setFieldList.hpp" local="yes" imported="no">setFieldList.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>applySelector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeef07d636cc2337061942731230363cc</anchor>
      <arglist>(systemControl &amp;control, const pointStructure &amp;pStruct, const dictionary &amp;selDict)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometric.cpp</name>
    <path>utilities/pFlowToVTK/</path>
    <filename>geometric_8cpp.html</filename>
    <includes id="geometric_8hpp" name="geometric.hpp" local="yes" imported="no">geometric.hpp</includes>
  </compound>
  <compound kind="file">
    <name>geometric.hpp</name>
    <path>utilities/pFlowToVTK/</path>
    <filename>geometric_8hpp.html</filename>
    <includes id="vtkFile_8hpp" name="vtkFile.hpp" local="yes" imported="no">vtkFile.hpp</includes>
    <includes id="triSurface_8hpp" name="triSurface.hpp" local="yes" imported="no">triSurface.hpp</includes>
    <includes id="multiTriSurface_8hpp" name="multiTriSurface.hpp" local="yes" imported="no">multiTriSurface.hpp</includes>
    <includes id="IOobject_8hpp" name="IOobject.hpp" local="yes" imported="no">IOobject.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>geomObjectToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7fa0374f49d37b2bc796a915e27fbe9f</anchor>
      <arglist>(IOfileHeader &amp;header, real time, fileSystem destPath, word bName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbba7e0fb8bb2ce9160a18735400db51</anchor>
      <arglist>(vtkFile &amp;vtk, const Type &amp;dataEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaf677e2ac1decf3292aac36c9a1743b8</anchor>
      <arglist>(vtkFile &amp;vtk, const triSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8a8ae6c4e5f37d7ad7d108e2c0d225ff</anchor>
      <arglist>(vtkFile &amp;vtk, const multiTriSurface &amp;surface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pFlowToVTK.cpp</name>
    <path>utilities/pFlowToVTK/</path>
    <filename>pFlowToVTK_8cpp.html</filename>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="pointFieldToVTK_8hpp" name="pointFieldToVTK.hpp" local="yes" imported="no">pointFieldToVTK.hpp</includes>
    <includes id="triSurfaceFieldToVTK_8hpp" name="triSurfaceFieldToVTK.hpp" local="yes" imported="no">triSurfaceFieldToVTK.hpp</includes>
    <includes id="timeFolder_8hpp" name="timeFolder.hpp" local="yes" imported="no">timeFolder.hpp</includes>
    <includes id="ranges_8hpp" name="ranges.hpp" local="yes" imported="no">ranges.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>pFlowToVTK_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pointFieldToVTK.hpp</name>
    <path>utilities/pFlowToVTK/</path>
    <filename>pointFieldToVTK_8hpp.html</filename>
    <includes id="vtkFile_8hpp" name="vtkFile.hpp" local="yes" imported="no">vtkFile.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="IOobject_8hpp" name="IOobject.hpp" local="yes" imported="no">IOobject.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::PFtoVTK</namespace>
    <member kind="function">
      <type>bool</type>
      <name>addInt64PointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ad96f820d5174271fdc60bd7731fb9629</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, int64 *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealPointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a572009305203cb57b4e901247dfae9ba</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, real *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealx3PointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ae537fc84534474c6d7247a36336d174e</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, realx3 *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>regexCheck</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>af9d9dd3c6f90b434218a19e0ba56e351</anchor>
      <arglist>(word TYPENAME, word fieldType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFieldType</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ada516245a68fc176a71ee7453fe0da98</anchor>
      <arglist>(word objectType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertIntTypesPointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a9c45675264f0e208297936f3347254f2</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealTypePointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ae1b9e43ce4080c888751723556d9e31c</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealx3TypePointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a911bb862ce5b6653f30da4dbc97feb23</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addUndstrcuturedGridField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>aea431732ead1015cfefd418b87ece1b3</anchor>
      <arglist>(iOstream &amp;os, int32 numActivePoints, realx3 *position, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderPointFields</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ad077a0ae4cc2645df34c303de5c46fba</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderPointFieldsSelected</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a4ed2bcdce99b0c172ed878986578acd9</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName, wordVector fieldsName, bool mustExist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>triSurfaceFieldToVTK.hpp</name>
    <path>utilities/pFlowToVTK/</path>
    <filename>triSurfaceFieldToVTK_8hpp.html</filename>
    <includes id="vtkFile_8hpp" name="vtkFile.hpp" local="yes" imported="no">vtkFile.hpp</includes>
    <includes id="triSurface_8hpp" name="triSurface.hpp" local="yes" imported="no">triSurface.hpp</includes>
    <includes id="multiTriSurface_8hpp" name="multiTriSurface.hpp" local="yes" imported="no">multiTriSurface.hpp</includes>
    <includes id="triSurfaceFields_8hpp" name="triSurfaceFields.hpp" local="yes" imported="no">triSurfaceFields.hpp</includes>
    <includes id="IOobject_8hpp" name="IOobject.hpp" local="yes" imported="no">IOobject.hpp</includes>
    <namespace>pFlow</namespace>
    <namespace>pFlow::TSFtoVTK</namespace>
    <member kind="function">
      <type>bool</type>
      <name>regexCheck</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>af9d9dd3c6f90b434218a19e0ba56e351</anchor>
      <arglist>(word TYPENAME, word fieldType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFieldType</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>ada516245a68fc176a71ee7453fe0da98</anchor>
      <arglist>(word objectType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a38e01e196068c6975bec0fc1d98bdc51</anchor>
      <arglist>(iOstream &amp;os, const Type &amp;dataEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>aa85f928141cbbf9d5b60573b92aae3ca</anchor>
      <arglist>(iOstream &amp;os, const triSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>aa07efd76ef5cb68615c03e19911e72bf</anchor>
      <arglist>(iOstream &amp;os, const multiTriSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealx3TriSurfaceField</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a6a046c2567ff6cb9fef61c45c3689a1c</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 size, realx3 *field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealx3TypetriSurfaceField</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>ac9a55f8c74fcdebdc6246277c9093156</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const multiTriSurface &amp;tSurface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderTriSurfaceFields</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a1de978df651d8857b01ee3ab363001ca</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>position.cpp</name>
    <path>utilities/positionParticles_notnow/</path>
    <filename>position_8cpp.html</filename>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="uniformRandomReal_8hpp" name="uniformRandomReal.hpp" local="yes" imported="no">uniformRandomReal.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>position_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fieldOperations.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>fieldOperations_8hpp.html</filename>
    <includes id="rectMeshFields_8hpp" name="rectMeshFields.hpp" local="yes" imported="no">rectMeshFields.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="pointRectCell_8hpp" name="pointRectCell.hpp" local="yes" imported="no">pointRectCell.hpp</includes>
    <includes id="includeMask_8hpp" name="includeMask.hpp" local="yes" imported="no">includeMask.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>rectMeshField_H&lt; T &gt;</type>
      <name>sumOp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa132305e9c3dc0b05e974942a9c53adf</anchor>
      <arglist>(const pointField_H&lt; T &gt; field, const pointRectCell &amp;pointToCell)</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField_H&lt; T &gt;</type>
      <name>sumMaksOp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adae0d473692798f767ce9f72165648d4</anchor>
      <arglist>(const pointField_H&lt; T &gt; field, const pointRectCell &amp;pointToCell, const incMask &amp;mask)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>includeMask.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>includeMask_8cpp.html</filename>
    <includes id="includeMask_8hpp" name="includeMask.hpp" local="yes" imported="no">includeMask.hpp</includes>
  </compound>
  <compound kind="file">
    <name>IncludeMask.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>IncludeMask_8hpp.html</filename>
    <includes id="includeMask_8hpp" name="includeMask.hpp" local="yes" imported="no">includeMask.hpp</includes>
    <class kind="struct">pFlow::greaterThanOp</class>
    <class kind="struct">pFlow::greaterThanEqOp</class>
    <class kind="struct">pFlow::lessThanOp</class>
    <class kind="struct">pFlow::lessThanEqOp</class>
    <class kind="struct">pFlow::equalOp</class>
    <class kind="struct">pFlow::betweenOp</class>
    <class kind="struct">pFlow::betweenEqOp</class>
    <class kind="struct">pFlow::allOp</class>
    <class kind="class">pFlow::compareOne</class>
    <class kind="class">pFlow::compareTwo</class>
    <class kind="class">pFlow::compareZero</class>
    <class kind="class">pFlow::IncludeMask</class>
    <class kind="class">pFlow::IncludeMask&lt; T, allOp&lt; T &gt; &gt;</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>includeMask.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>includeMask_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="readFromTimeFolder_8hpp" name="readFromTimeFolder.hpp" local="yes" imported="no">readFromTimeFolder.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::includeMask</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>IncludeMasks.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>IncludeMasks_8cpp.html</filename>
    <includes id="IncludeMask_8hpp" name="IncludeMask.hpp" local="yes" imported="no">IncludeMask.hpp</includes>
  </compound>
  <compound kind="file">
    <name>pointRectCell.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>pointRectCell_8hpp.html</filename>
    <includes id="mapperNBS_8hpp" name="mapperNBS.hpp" local="yes" imported="no">mapperNBS.hpp</includes>
    <includes id="rectMeshFields_8hpp" name="rectMeshFields.hpp" local="yes" imported="no">rectMeshFields.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <class kind="class">pFlow::pointRectCell</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>postprocess.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>postprocess_8cpp.html</filename>
    <includes id="postprocess_8hpp" name="postprocess.hpp" local="yes" imported="no">postprocess.hpp</includes>
    <includes id="timeFolder_8hpp" name="timeFolder.hpp" local="yes" imported="no">timeFolder.hpp</includes>
    <includes id="pointStructure_8hpp" name="pointStructure.hpp" local="yes" imported="no">pointStructure.hpp</includes>
    <includes id="vocabs_8hpp" name="vocabs.hpp" local="yes" imported="no">vocabs.hpp</includes>
    <includes id="vtkFile_8hpp" name="vtkFile.hpp" local="yes" imported="no">vtkFile.hpp</includes>
  </compound>
  <compound kind="file">
    <name>postprocess.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>postprocess_8hpp.html</filename>
    <includes id="MapPtr_8hpp" name="MapPtr.hpp" local="yes" imported="no">MapPtr.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="pointRectCell_8hpp" name="pointRectCell.hpp" local="yes" imported="no">pointRectCell.hpp</includes>
    <includes id="processField_8hpp" name="processField.hpp" local="yes" imported="no">processField.hpp</includes>
    <class kind="class">pFlow::postprocess</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>postprocessPhasicFlow.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>postprocessPhasicFlow_8cpp.html</filename>
    <includes id="KokkosUtilities_8hpp" name="KokkosUtilities.hpp" local="yes" imported="no">KokkosUtilities.hpp</includes>
    <includes id="systemControl_8hpp" name="systemControl.hpp" local="yes" imported="no">systemControl.hpp</includes>
    <includes id="timeFolder_8hpp" name="timeFolder.hpp" local="yes" imported="no">timeFolder.hpp</includes>
    <includes id="ranges_8hpp" name="ranges.hpp" local="yes" imported="no">ranges.hpp</includes>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="postprocess_8hpp" name="postprocess.hpp" local="yes" imported="no">postprocess.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>postprocessPhasicFlow_8cpp.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>processField.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>processField_8cpp.html</filename>
    <includes id="processField_8hpp" name="processField.hpp" local="yes" imported="no">processField.hpp</includes>
    <includes id="pointRectCell_8hpp" name="pointRectCell.hpp" local="yes" imported="no">pointRectCell.hpp</includes>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
    <includes id="twoPartEntry_8hpp" name="twoPartEntry.hpp" local="yes" imported="no">twoPartEntry.hpp</includes>
  </compound>
  <compound kind="file">
    <name>ProcessField.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>ProcessField_8hpp.html</filename>
    <includes id="processField_8hpp" name="processField.hpp" local="yes" imported="no">processField.hpp</includes>
    <includes id="rectMeshFields_8hpp" name="rectMeshFields.hpp" local="yes" imported="no">rectMeshFields.hpp</includes>
    <includes id="twoPartEntry_8hpp" name="twoPartEntry.hpp" local="yes" imported="no">twoPartEntry.hpp</includes>
    <includes id="fieldOperations_8hpp" name="fieldOperations.hpp" local="yes" imported="no">fieldOperations.hpp</includes>
    <includes id="rectMeshFieldToVTK_8hpp" name="rectMeshFieldToVTK.hpp" local="yes" imported="no">rectMeshFieldToVTK.hpp</includes>
    <class kind="class">pFlow::ProcessField</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>processField.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>processField_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <includes id="readFromTimeFolder_8hpp" name="readFromTimeFolder.hpp" local="yes" imported="no">readFromTimeFolder.hpp</includes>
    <includes id="includeMask_8hpp" name="includeMask.hpp" local="yes" imported="no">includeMask.hpp</includes>
    <includes id="pointRectCell_8hpp" name="pointRectCell.hpp" local="yes" imported="no">pointRectCell.hpp</includes>
    <class kind="class">pFlow::processField</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>ProcessFields.cpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>ProcessFields_8cpp.html</filename>
    <includes id="ProcessField_8hpp" name="ProcessField.hpp" local="yes" imported="no">ProcessField.hpp</includes>
  </compound>
  <compound kind="file">
    <name>rectangleMesh.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>rectangleMesh_8hpp.html</filename>
    <includes id="cells_8hpp" name="cells.hpp" local="yes" imported="no">cells.hpp</includes>
    <class kind="class">pFlow::rectangleMesh</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>rectMeshField.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>rectMeshField_8hpp.html</filename>
    <includes id="rectangleMesh_8hpp" name="rectangleMesh.hpp" local="yes" imported="no">rectangleMesh.hpp</includes>
    <includes id="baseAlgorithms_8hpp" name="baseAlgorithms.hpp" local="yes" imported="no">baseAlgorithms.hpp</includes>
    <class kind="class">pFlow::rectMeshField</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>rectMeshFields.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>rectMeshFields_8hpp.html</filename>
    <includes id="rectMeshField_8hpp" name="rectMeshField.hpp" local="yes" imported="no">rectMeshField.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="typedef">
      <type>rectMeshField&lt; T, HostSpace &gt;</type>
      <name>rectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa023d97d4596bc01e96478c08a308fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int8, HostSpace &gt;</type>
      <name>int8RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a47722b5fb2a9fb3b496a3f687f448949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int32, HostSpace &gt;</type>
      <name>int32RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a795d0af2419bf2de1f52f16090eff73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int64, HostSpace &gt;</type>
      <name>int64RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0646fc8a15110657a7abe2b83489e0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; real, HostSpace &gt;</type>
      <name>realRectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abddccc452594991b690b6121af7df45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; realx3, HostSpace &gt;</type>
      <name>realx3RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad84841028cb1e691e0baad98dbb9f0e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rectMeshFieldToVTK.hpp</name>
    <path>utilities/postprocessPhasicFlow/</path>
    <filename>rectMeshFieldToVTK_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abadb5056881c5015a1737b35a693874b</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; T &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1466b874acbb83c78b033fbe6f8b9653</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; real &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab95d54e8b89f59941d32a4babd78139e</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; realx3 &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af9ef7add050361760dd515e40326d3b6</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; int32 &gt; &amp;field)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>setFields.cpp</name>
    <path>utilities/setFields_notnow/</path>
    <filename>setFields_8cpp.html</filename>
    <includes id="setFields__notnow_2setFields_8hpp" name="setFields.hpp" local="yes" imported="no">setFields.hpp</includes>
    <includes id="initialize__Control_8hpp" name="initialize_Control.hpp" local="yes" imported="no">initialize_Control.hpp</includes>
    <includes id="finalize_8hpp" name="finalize.hpp" local="yes" imported="no">finalize.hpp</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>setFields_8cpp.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cuboidWall.cpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/cuboidWall/</path>
    <filename>cuboidWall_8cpp.html</filename>
    <includes id="cuboidWall_8hpp" name="cuboidWall.hpp" local="yes" imported="no">cuboidWall.hpp</includes>
    <includes id="planeWall_8hpp" name="planeWall.hpp" local="yes" imported="no">planeWall.hpp</includes>
  </compound>
  <compound kind="file">
    <name>cuboidWall.hpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/cuboidWall/</path>
    <filename>cuboidWall_8hpp.html</filename>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::cuboidWall</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>cylinderWall.cpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/cylinderWall/</path>
    <filename>cylinderWall_8cpp.html</filename>
    <includes id="cylinderWall_8hpp" name="cylinderWall.hpp" local="yes" imported="no">cylinderWall.hpp</includes>
    <includes id="Vectors_8hpp" name="Vectors.hpp" local="yes" imported="no">Vectors.hpp</includes>
    <includes id="line_8hpp" name="line.hpp" local="yes" imported="no">line.hpp</includes>
  </compound>
  <compound kind="file">
    <name>cylinderWall.hpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/cylinderWall/</path>
    <filename>cylinderWall_8hpp.html</filename>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <includes id="zAxis_8hpp" name="zAxis.hpp" local="yes" imported="no">zAxis.hpp</includes>
    <class kind="class">pFlow::cylinderWall</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>planeWall.cpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/planeWall/</path>
    <filename>planeWall_8cpp.html</filename>
    <includes id="planeWall_8hpp" name="planeWall.hpp" local="yes" imported="no">planeWall.hpp</includes>
    <includes id="line_8hpp" name="line.hpp" local="yes" imported="no">line.hpp</includes>
  </compound>
  <compound kind="file">
    <name>planeWall.hpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/planeWall/</path>
    <filename>planeWall_8hpp.html</filename>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::planeWall</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>stlWall.cpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/stlWall/</path>
    <filename>stlWall_8cpp.html</filename>
    <includes id="stlWall_8hpp" name="stlWall.hpp" local="yes" imported="no">stlWall.hpp</includes>
    <includes id="stlFile_8hpp" name="stlFile.hpp" local="yes" imported="no">stlFile.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
  </compound>
  <compound kind="file">
    <name>stlWall.hpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/stlWall/</path>
    <filename>stlWall_8hpp.html</filename>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <class kind="class">pFlow::stlWall</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>Wall.cpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/Wall/</path>
    <filename>Wall_8cpp.html</filename>
    <includes id="Wall_8hpp" name="Wall.hpp" local="yes" imported="no">Wall.hpp</includes>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkNormalVec</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addeddcb2e5fbe6fdcc653fefa7106bf5</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, realx3 &amp;norm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>Wall.hpp</name>
    <path>utilities/Utilities/geometryPhasicFlow/Wall/</path>
    <filename>Wall_8hpp.html</filename>
    <includes id="virtualConstructor_8hpp" name="virtualConstructor.hpp" local="yes" imported="no">virtualConstructor.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="yes" imported="no">dictionary.hpp</includes>
    <class kind="class">pFlow::Wall</class>
    <namespace>pFlow</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkNormalVec</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addeddcb2e5fbe6fdcc653fefa7106bf5</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, realx3 &amp;norm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>readControlDict.cpp</name>
    <path>utilities/Utilities/</path>
    <filename>readControlDict_8cpp.html</filename>
    <includes id="readControlDict_8hpp" name="readControlDict.hpp" local="yes" imported="no">readControlDict.hpp</includes>
    <includes id="iFstream_8hpp" name="iFstream.hpp" local="yes" imported="no">iFstream.hpp</includes>
    <includes id="timeFolder_8hpp" name="timeFolder.hpp" local="yes" imported="no">timeFolder.hpp</includes>
  </compound>
  <compound kind="file">
    <name>readControlDict.hpp</name>
    <path>utilities/Utilities/</path>
    <filename>readControlDict_8hpp.html</filename>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <class kind="class">pFlow::readControlDict</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>readFromTimeFolder.cpp</name>
    <path>utilities/Utilities/</path>
    <filename>readFromTimeFolder_8cpp.html</filename>
    <includes id="readFromTimeFolder_8hpp" name="readFromTimeFolder.hpp" local="yes" imported="no">readFromTimeFolder.hpp</includes>
  </compound>
  <compound kind="file">
    <name>readFromTimeFolder.hpp</name>
    <path>utilities/Utilities/</path>
    <filename>readFromTimeFolder_8hpp.html</filename>
    <includes id="repository_8hpp" name="repository.hpp" local="yes" imported="no">repository.hpp</includes>
    <includes id="pointFields_8hpp" name="pointFields.hpp" local="yes" imported="no">pointFields.hpp</includes>
    <includes id="utilityFunctions_8hpp" name="utilityFunctions.hpp" local="yes" imported="no">utilityFunctions.hpp</includes>
    <class kind="class">pFlow::readFromTimeFolder</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="file">
    <name>utilityFunctions.hpp</name>
    <path>utilities/Utilities/</path>
    <filename>utilityFunctions_8hpp.html</filename>
    <namespace>pFlow</namespace>
    <namespace>pFlow::utilities</namespace>
    <member kind="function">
      <type>bool</type>
      <name>pointFieldGetType</name>
      <anchorfile>namespacepFlow_1_1utilities.html</anchorfile>
      <anchor>acf75553dd9a47eb72613c04b98a1ee7d</anchor>
      <arglist>(std::string TYPENAME, std::string &amp;fieldType, std::string &amp;fieldSpace)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vtkFile.cpp</name>
    <path>utilities/Utilities/vtkFile/</path>
    <filename>vtkFile_8cpp.html</filename>
    <includes id="vtkFile_8hpp" name="vtkFile.hpp" local="yes" imported="no">vtkFile.hpp</includes>
  </compound>
  <compound kind="file">
    <name>vtkFile.hpp</name>
    <path>utilities/Utilities/vtkFile/</path>
    <filename>vtkFile_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="uniquePtr_8hpp" name="uniquePtr.hpp" local="yes" imported="no">uniquePtr.hpp</includes>
    <includes id="fileSystem_8hpp" name="fileSystem.hpp" local="yes" imported="no">fileSystem.hpp</includes>
    <includes id="streams_8hpp" name="streams.hpp" local="yes" imported="no">streams.hpp</includes>
    <class kind="class">pFlow::vtkFile</class>
    <namespace>pFlow</namespace>
  </compound>
  <compound kind="struct">
    <name>pFlow::AB3History</name>
    <filename>structpFlow_1_1AB3History.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1AB3History.html</anchorfile>
      <anchor>ad542852c8da95d45b6a6014d9f42a663</anchor>
      <arglist>(&quot;AB3History&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy1_</name>
      <anchorfile>structpFlow_1_1AB3History.html</anchorfile>
      <anchor>a419568ee851e74f5356a30fc5ce2eddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy2_</name>
      <anchorfile>structpFlow_1_1AB3History.html</anchorfile>
      <anchor>a63d020867c10f8f3fde329eb526a066b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::AB4History</name>
    <filename>structpFlow_1_1AB4History.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1AB4History.html</anchorfile>
      <anchor>a8a588b9f1b4c4b66c2f3d025548fdd8e</anchor>
      <arglist>(&quot;AB4History&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy1_</name>
      <anchorfile>structpFlow_1_1AB4History.html</anchorfile>
      <anchor>a419568ee851e74f5356a30fc5ce2eddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy2_</name>
      <anchorfile>structpFlow_1_1AB4History.html</anchorfile>
      <anchor>a63d020867c10f8f3fde329eb526a066b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy3_</name>
      <anchorfile>structpFlow_1_1AB4History.html</anchorfile>
      <anchor>a63473eb8257f38bf8863a5c7bd03a330</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::AB5History</name>
    <filename>structpFlow_1_1AB5History.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1AB5History.html</anchorfile>
      <anchor>a5de7b6e3fd724f7ef57a928b5eef18f7</anchor>
      <arglist>(&quot;AB5History&quot;)</arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy1_</name>
      <anchorfile>structpFlow_1_1AB5History.html</anchorfile>
      <anchor>a419568ee851e74f5356a30fc5ce2eddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy2_</name>
      <anchorfile>structpFlow_1_1AB5History.html</anchorfile>
      <anchor>a63d020867c10f8f3fde329eb526a066b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy3_</name>
      <anchorfile>structpFlow_1_1AB5History.html</anchorfile>
      <anchor>a63473eb8257f38bf8863a5c7bd03a330</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>dy4_</name>
      <anchorfile>structpFlow_1_1AB5History.html</anchorfile>
      <anchor>a5025c11bc753cdbe183c1c61d2687762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pointStructure::activePointsDevice</name>
    <filename>classpFlow_1_1pointStructure_1_1activePointsDevice.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>activePointsDevice</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a2632a4b5cf555881566e4de22964f253</anchor>
      <arglist>(bool allActive, range active, const ViewType1D&lt; int8 &gt; &amp;flag)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>activePointsDevice</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a31b4288907a411258e99788b5f6547b6</anchor>
      <arglist>(const activePointsDevice &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD activePointsDevice &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a2979359fc6951474ee38c59c68d66161</anchor>
      <arglist>(const activePointsDevice &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a8be4c2ee9aebc488f90bfb46488da70c</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>activeRange</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>ab69643c53a15814ee4a4c368e7dc62e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>allActive</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a06a0021d8c87a93ad8aab3d9f1d6ea07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int8 &gt;</type>
      <name>flag_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a66b83ffe30c5d029d9da5021e8338559</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>allActive_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a24c6df75de7ec5977ac4fa9c450955ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>range</type>
      <name>activeRange_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsDevice.html</anchorfile>
      <anchor>a6c02c190c595dadd863a3ecad6ccf4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pointStructure::activePointsHost</name>
    <filename>classpFlow_1_1pointStructure_1_1activePointsHost.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>activePointsHost</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a0f5f9a163cb0d86c165ce2742c251979</anchor>
      <arglist>(bool allActive, range active, const ViewType1D&lt; int8, HostSpace &gt; &amp;flag)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>activePointsHost</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a120560205a14b6d4da24022cf10c36cb</anchor>
      <arglist>(const activePointsHost &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H activePointsHost &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>ac2929028cc63f53467b9f80b9a104649</anchor>
      <arglist>(const activePointsHost &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>ab91680c38456f7919e23d442e0fa2a94</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>activeRange</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a74a6b2b65059d7ca887bb2d78fe49ce2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>allActive</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>aab9550b3f59f76a254d15a2d537bb395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int8, HostSpace &gt;</type>
      <name>flag_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a55ea2c8deeed6e46962a301e3cca8bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>allActive_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a24c6df75de7ec5977ac4fa9c450955ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>range</type>
      <name>activeRange_</name>
      <anchorfile>classpFlow_1_1pointStructure_1_1activePointsHost.html</anchorfile>
      <anchor>a6c02c190c595dadd863a3ecad6ccf4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsBashforth2</name>
    <filename>classpFlow_1_1AdamsBashforth2.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>af1bd37f05c0a6093752c49fcaf0f82b1</anchor>
      <arglist>(&quot;AdamsBashforth2&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsBashforth2</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>af6c1981009eb42d2e97eea2ec46cbac1</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsBashforth2</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a2bc3925e09474b1a2c094668a16b9515</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a3f4d930dbe074e5170da8b9a74f3c8b8</anchor>
      <arglist>(integration, AdamsBashforth2, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>afb1938bc6cfc199cbd70f224040d4afc</anchor>
      <arglist>(real UNUSED(dt), realx3Vector_D &amp;UNUSED(y), realx3Vector_D &amp;UNUSED(dy)) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy1_</name>
      <anchorfile>classpFlow_1_1AdamsBashforth2.html</anchorfile>
      <anchor>a46c37b69200a2f4faef9c149a25bab60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsBashforth3</name>
    <filename>classpFlow_1_1AdamsBashforth3.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>af73af994d6bfc50ff9bda4606cac960b</anchor>
      <arglist>(&quot;AdamsBashforth3&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsBashforth3</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a1f266356c0127865641500aea4aca002</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsBashforth3</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>aaef6f6937fdab620942909e86c18cb3a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a9626dd5e2e9be37e395ace9fc484d879</anchor>
      <arglist>(integration, AdamsBashforth3, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>afb1938bc6cfc199cbd70f224040d4afc</anchor>
      <arglist>(real UNUSED(dt), realx3Vector_D &amp;UNUSED(y), realx3Vector_D &amp;UNUSED(dy)) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>pointField&lt; VectorSingle, AB3History &gt;</type>
      <name>HistoryFieldType</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>ad6c0b8fdabb4f83524d8a02f7fc7cc52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistoryFieldType &amp;</type>
      <name>history_</name>
      <anchorfile>classpFlow_1_1AdamsBashforth3.html</anchorfile>
      <anchor>a8b9d3d4f27dbf4e202508336c5b96a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsBashforth4</name>
    <filename>classpFlow_1_1AdamsBashforth4.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a7962c8cac5d82d0793dfeaba6c162f4d</anchor>
      <arglist>(&quot;AdamsBashforth4&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsBashforth4</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a69029aec4bfcd45b781d1cfc65359fcb</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsBashforth4</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a8c3fff8fec7e5ef08cea578fed2e5fae</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a1084909fe2f0dbd8f2af68ab4e94692a</anchor>
      <arglist>(integration, AdamsBashforth4, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>afb1938bc6cfc199cbd70f224040d4afc</anchor>
      <arglist>(real UNUSED(dt), realx3Vector_D &amp;UNUSED(y), realx3Vector_D &amp;UNUSED(dy)) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>pointField&lt; VectorSingle, AB4History &gt;</type>
      <name>HistoryFieldType</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a23fd99cb5ba560942a1489234caae6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistoryFieldType &amp;</type>
      <name>history_</name>
      <anchorfile>classpFlow_1_1AdamsBashforth4.html</anchorfile>
      <anchor>a8b9d3d4f27dbf4e202508336c5b96a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsBashforth5</name>
    <filename>classpFlow_1_1AdamsBashforth5.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a3807bf6f59fc7de37ab4af95364335f2</anchor>
      <arglist>(&quot;AdamsBashforth5&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsBashforth5</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a129b1fb5fcc9dfcc9c803d8b13758cbc</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsBashforth5</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a889e2aac594d1f14b8d243497b521cb8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a12a13b4372ff9e69e5e921529b13ac17</anchor>
      <arglist>(integration, AdamsBashforth5, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>afb1938bc6cfc199cbd70f224040d4afc</anchor>
      <arglist>(real UNUSED(dt), realx3Vector_D &amp;UNUSED(y), realx3Vector_D &amp;UNUSED(dy)) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>pointField&lt; VectorSingle, AB5History &gt;</type>
      <name>HistoryFieldType</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a478eed23c13cf21b2e24874affaf494e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HistoryFieldType &amp;</type>
      <name>history_</name>
      <anchorfile>classpFlow_1_1AdamsBashforth5.html</anchorfile>
      <anchor>a8b9d3d4f27dbf4e202508336c5b96a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsMoulton3</name>
    <filename>classpFlow_1_1AdamsMoulton3.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a6cac55f7ea7995badad5929266adf2f0</anchor>
      <arglist>(&quot;AdamsMoulton3&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsMoulton3</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>ad0d8f6814b44931c5a758e93505e0a6e</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsMoulton3</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>ad838a4787dffad965f30e939d10c4c57</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a932382285aa9c91af3a87cabdde3b7d0</anchor>
      <arglist>(integration, AdamsMoulton3, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a565b658e8641f9fd9a6a5c8e93089d5d</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>aa601d0785e68d2298567b2861996f956</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>aaa8ac3ebc39d8702e08e1f71c5843974</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>y0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a6c02e0d25a1b849255e67e72d1a9d026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a698a75833834ae70210d306e047cb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy1_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton3.html</anchorfile>
      <anchor>a46c37b69200a2f4faef9c149a25bab60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsMoulton4</name>
    <filename>classpFlow_1_1AdamsMoulton4.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>aa27f90dad5682f0c6030f30fdf4883ef</anchor>
      <arglist>(&quot;AdamsMoulton4&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsMoulton4</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a34d4c804534cb2f04fc68174b7282653</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsMoulton4</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a80fc8a7c8acde6389ab03a63d2c7ec9b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>aa46de8b6c155f9145790ef1434c6da09</anchor>
      <arglist>(integration, AdamsMoulton4, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a565b658e8641f9fd9a6a5c8e93089d5d</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>aa601d0785e68d2298567b2861996f956</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>aaa8ac3ebc39d8702e08e1f71c5843974</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>y0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a6c02e0d25a1b849255e67e72d1a9d026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a698a75833834ae70210d306e047cb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy1_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a46c37b69200a2f4faef9c149a25bab60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy2_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton4.html</anchorfile>
      <anchor>a09e936a903a062f6d1d045eb4fdbd8a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::AdamsMoulton5</name>
    <filename>classpFlow_1_1AdamsMoulton5.html</filename>
    <base>pFlow::integration</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a93700041b6e609e429801e569f554e4c</anchor>
      <arglist>(&quot;AdamsMoulton5&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdamsMoulton5</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a84c490b65587b21f5666766e94a945bc</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdamsMoulton5</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a205b69055b5aebe5b9c924e435365169</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>aa18e539a33004e6d10e69a19ef0c5ddb</anchor>
      <arglist>(integration, AdamsMoulton5, word)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a565b658e8641f9fd9a6a5c8e93089d5d</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>ac755e4bf02c3732d1eb89de9e903ebdb</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a8da2088458d635dfa1fbe1823a3bfd6d</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>aceb0c803bb6e5c46a1695c4e5b6e641f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>af04716a60b799182ca23292910be6c80</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>aa601d0785e68d2298567b2861996f956</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predictRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>aaa8ac3ebc39d8702e08e1f71c5843974</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intAll</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a152b752a6b7b37e70fa5e7c99a484783</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, range activeRng)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intRange</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a191dc9197b587f09bb5ee7989b0ba43e</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy, activeFunctor activeP)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpIntegration</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>ace46ff4fbe3c001c816dbc4f9f67606f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>y0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a6c02e0d25a1b849255e67e72d1a9d026</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy0_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a698a75833834ae70210d306e047cb196</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy1_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a46c37b69200a2f4faef9c149a25bab60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy2_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a09e936a903a062f6d1d045eb4fdbd8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>dy3_</name>
      <anchorfile>classpFlow_1_1AdamsMoulton5.html</anchorfile>
      <anchor>a79d535ef8716acc040282ffd37196ac6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::allOp</name>
    <filename>structpFlow_1_1allOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1allOp.html</anchorfile>
      <anchor>a0b1b78367e4ddda99b2b93ab8b44c7f9</anchor>
      <arglist>(&quot;all&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1allOp.html</anchorfile>
      <anchor>ac07d93c2c80e51349f3dec89a2e45c84</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::betweenEqOp</name>
    <filename>structpFlow_1_1betweenEqOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1betweenEqOp.html</anchorfile>
      <anchor>acc60e8e7f39682a75c2e9ebf60244bf7</anchor>
      <arglist>(&quot;betweenEq&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1betweenEqOp.html</anchorfile>
      <anchor>a0a598e109c2263654174e9ce222d2aa9</anchor>
      <arglist>(const T &amp;compVal1, const T &amp;compVal2, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::betweenOp</name>
    <filename>structpFlow_1_1betweenOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1betweenOp.html</anchorfile>
      <anchor>acf1a3c953ef26ee6f8b562a154aeaaed</anchor>
      <arglist>(&quot;between&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1betweenOp.html</anchorfile>
      <anchor>a0a598e109c2263654174e9ce222d2aa9</anchor>
      <arglist>(const T &amp;compVal1, const T &amp;compVal2, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::bitsetHD</name>
    <filename>classpFlow_1_1bitsetHD.html</filename>
    <templarg>typename blockType</templarg>
    <templarg>typename MemorySpace</templarg>
    <member kind="typedef">
      <type>blockType</type>
      <name>BlockType</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a59d38f5304ad46f22ea05c721a8bf6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; BlockType *, Kokkos::LayoutLeft, MemorySpace &gt;</type>
      <name>blockViewType</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a9b16822c6e50cf869402f54667b84b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename blockViewType::device_type</type>
      <name>deviceType</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a2a4a9c587069dbf6113c06cab868c8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename blockViewType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>aa03d9afe4cc0611cfb39924bb100d70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename blockViewType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a87d554ce3e0c0d35ec11d95f257224aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bitsetHD</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a5549ec77e46011cea01bb32af5225208</anchor>
      <arglist>(const word &amp;name, int32 numBits)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bitsetHD</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>abc71b34999dc4542d4372154e6e54cf4</anchor>
      <arglist>(const bitsetHD &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bitsetHD</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a1bd445f9c1ac5f9dd8fa6783bfe699ab</anchor>
      <arglist>(bitsetHD &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bitsetHD &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a5e6a70ca60b7567fc53da750e6ee88fe</anchor>
      <arglist>(const bitsetHD &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>bitsetHD &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a83c432bf029983c5294d25d63c38ea0d</anchor>
      <arglist>(bitsetHD &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a62bbebcdc34a8056c32d0b1a26026717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a66807f930d9a491277e464bfa1cb58a0</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>unset</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a2904c29a18e6d441ddf3f1a3eed7595b</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>reset</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>acef420129713d76a10c5e0af0d1e8924</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>flip</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a74a8cd0990eeea3de23632bb76da49dd</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSet</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>af15ab299f1b6ce01d415cd9e3ad90d18</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isUnset</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a32e73e8df923921bb1e99e53f87c73c8</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSetReset</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>ab6b736b307b35826adc6c1cb86dbb0ce</anchor>
      <arglist>(int32 pos) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numBlocks</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a46a353f1bc096ea4a3c4343454ecd639</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numBits</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>af03d6b03127a8a03987961a57bd13d66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a0fed21f49ffeaa77eaf1071b5c8a9a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a8a5676bc3adbb5c5740e3cdccd9ee9af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>realloc</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a6812ae07aea501030a75388256ef230a</anchor>
      <arglist>(int32 numBits)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_HD int32</type>
      <name>blockIndex</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a74a241d6cabce51c7cf4d1cad680f1a3</anchor>
      <arglist>(int32 pos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_HD BlockType</type>
      <name>bitIndex</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>adee525ba2d97cb538509883805bb7fad</anchor>
      <arglist>(int32 pos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_HD BlockType</type>
      <name>blockMask</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a5cbc3cc752de6d18944471e72bfd16c5</anchor>
      <arglist>(int32 pos)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_HD int32</type>
      <name>calculateBlockSize</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>aaddef7a5ec84f7b7037eb32a68ab3b24</anchor>
      <arglist>(int32 numBits)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numBlocks_</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a7491e858ec041047e4fef861a798885b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numBits_</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>aa7133c3e9eec115d722454317e272a60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>blockViewType</type>
      <name>blocks_</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a3baf25ee5e5e87bca066a0eefd272ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32</type>
      <name>bitsPerBlock_</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>ad8f3115466371f90ff1773d7fe8da4c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int32</type>
      <name>blockMask_</name>
      <anchorfile>classpFlow_1_1bitsetHD.html</anchorfile>
      <anchor>a24a7a10cb9a3ef5373e273b91ddaafa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::bitTransfer</name>
    <filename>classpFlow_1_1bitTransfer.html</filename>
    <member kind="function">
      <type></type>
      <name>bitTransfer</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a42e1e28c03fe21ce6e5f7c1d83b02f7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a1b1b2b0ded7afe4ae57bad9f5c6bebfc</anchor>
      <arglist>(const unit3 &amp;int3)</arglist>
    </member>
    <member kind="function">
      <type>unit3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>ab9c90dfdef3d1b19b4b2f722d9579173</anchor>
      <arglist>(const unsigned long &amp;ul)</arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>numBits_</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a19da95c59109cb04d7ca455ffbc5bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>numBits2_</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a80db50e5c10165949f1e5c35ef148731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned long</type>
      <name>mask1_</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a785c36f8d99f0ef5c3ad93e324646bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned long</type>
      <name>mask2_</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>ae99c146a6a128157b865cebe376973e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const unsigned long</type>
      <name>mask3_</name>
      <anchorfile>classpFlow_1_1bitTransfer.html</anchorfile>
      <anchor>a95facdcb88cd0d2c38573f971e6b6b40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::box</name>
    <filename>classpFlow_1_1box.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a3c722e2f8dd1287de5cc2cbac3ea52d7</anchor>
      <arglist>(&quot;box&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>aa2a9a0877ad8125ec95a3c69f6ed88ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a45a4f20f8660dbe758c5d6c1ffe9c025</anchor>
      <arglist>(const realx3 &amp;minP, const realx3 &amp;maxP)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>adce7742633b229c776b66930923a075d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>afbef9cd91fe90a1d98d27735f6045769</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a94a747b42dc5a710f9cf258d7a324778</anchor>
      <arglist>(const box &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a0533a15914ae4f3f290da5258acd2f25</anchor>
      <arglist>(box &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD box &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a53b97436ee17657bbd387babf662f321</anchor>
      <arglist>(const box &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD box &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a4e87673dbc71067a6f4b911bf80d44be</anchor>
      <arglist>(box &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~box</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a7ac02901885f54462b91c3d36f2e24d4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a898603c1e4e433d2f304d86f1a22c53c</anchor>
      <arglist>(const realx3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a67424c452a87ed7ff748b65374f89e54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a22e25e0baa24f79d1fa113c2a84f00f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>min_</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>acaa859f3dc98e5afead6007175a9d47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>max_</name>
      <anchorfile>classpFlow_1_1box.html</anchorfile>
      <anchor>a4caae70957c688b90b3596656bd20b9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::boxRegion</name>
    <filename>classpFlow_1_1boxRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a7738719f366d4d8f7778b80d1c8e8eeb</anchor>
      <arglist>(&quot;boxRegion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>boxRegion</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a837963842fca9d81a7e2c4845d69a628</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~boxRegion</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a66c49023a41a748e1f69ca1954186c06</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>aaa6340380ab7af3599579f49f62308da</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a742999f822100111462c25118a0ce0fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>box_</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>aefb81f563e3df7617831459d0ab0b5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniformRandomReal</type>
      <name>random_</name>
      <anchorfile>classpFlow_1_1boxRegion.html</anchorfile>
      <anchor>a809105944d87bd27bb8fa71167a86e14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::mapperNBS::cellIterator</name>
    <filename>classpFlow_1_1mapperNBS_1_1cellIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>af1d0f2a64cf301e1e590780a67e69512</anchor>
      <arglist>(ViewType3D&lt; int32, memory_space &gt; head, ViewType1D&lt; int32, memory_space &gt; next)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD Cells</type>
      <name>cellsSize</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>a1395a623fc0dab2cbdfc0816e62587b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>start</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>a2ad08b818030473afe881d2e760fa040</anchor>
      <arglist>(IndexType i, IndexType j, IndexType k) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>getNext</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>ac0c595919110e1bd81d4c050e35f6e61</anchor>
      <arglist>(int32 n) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>HeadType</type>
      <name>head_</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>a1a236c86d026feedc50038ea68070ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>NextType</type>
      <name>next_</name>
      <anchorfile>classpFlow_1_1mapperNBS_1_1cellIterator.html</anchorfile>
      <anchor>a228408038960e3e74a4dc525ca643e9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cellMapping</name>
    <filename>classpFlow_1_1cellMapping.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>cellsWallLevel0&lt; executionSpace &gt;</type>
      <name>cellsWallLevel0Type</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>aea93ffa7f2f71a92e641169784a5486d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>ab7da9ad90b0959810d8f7b53f4a21ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>af3f56b54b904aad6e266657cd440f800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a45e8eff03f89ed6ff2313ec3c9b34832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a1e76bf654e24a1c7f07817404d2b5ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>aaec8edb2e19eca233a24e6ec33d4cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iBox&lt; IndexType &gt;</type>
      <name>iBoxType</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a5e63edb05d6b5a08f98f8c077c391b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>aed44bdbc2868a6222e31d57f372b7fa6</anchor>
      <arglist>(&quot;cellMapping&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cellMapping</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a5ecb7369b58fe45fcf38a93eb0a96650</anchor>
      <arglist>(const dictionary &amp;dict, int32 numLevels, const Vector&lt; Cells &gt; &amp;ppCells, int32 numPoints, int32 numElements, const ViewType1D&lt; realx3, memory_space &gt; &amp;points, const ViewType1D&lt; int32x3, memory_space &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enterBoadSearch</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a48871efcbcaed0e589764bbbd933d3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>performedSearch</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a2f3fca6830cd43510c731216bcf9dd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>abba428befc17327c2b4398dd3792cfe5</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap, bool force=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>updateFrequency_</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>ae8aa0db7f2d2c19eefe46e3108bdebea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>cellExtent_</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>ae37c17021aa06dd9bcf5e7a187d6babf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>currentIter_</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>af11548cfec6dd4efe0c8702395cf8ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>performedSearch_</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a0fe252c95c374cf51d37d954d6ecc2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cellsWallLevel0Type</type>
      <name>cellsWallLevle_</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a5dc9561b78c2f31840f9a7e347f88e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>performSearch</name>
      <anchorfile>classpFlow_1_1cellMapping.html</anchorfile>
      <anchor>a369db5c233d2929a6a016b99e1033901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cells</name>
    <filename>classpFlow_1_1cells.html</filename>
    <templarg>typename indexType</templarg>
    <member kind="typedef">
      <type>triple&lt; indexType &gt;</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>aa9e4fb31c9788931c99bc7251b5dd86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>cells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ad3d63298d5caff2151c5f668739dded6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>cells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a616df0d63575c19a901ea6923147cd33</anchor>
      <arglist>(const box &amp;domain, real cellSize)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>cells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a6fb05e2360d79abab0ac460ca04ad50e</anchor>
      <arglist>(const box &amp;domain, int32 nx, int32 ny, int32 nz)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>cells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ab044ceeb1abca27318a836d4f15cb567</anchor>
      <arglist>(const cells &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD cells &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>af50d80f1dfb475be58c3ef5e102e5aab</anchor>
      <arglist>(const cells &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>cells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a1e417a2f66123d555e24c4e241641472</anchor>
      <arglist>(cells &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD cells &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ab39e57f7df4a7b3d447269c4a2fa805c</anchor>
      <arglist>(cells &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>cells</type>
      <name>getCells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>aab4957227ae46b934b9f779363e6c83c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>setCellSize</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ac85134d434244d9392bf9e85409e0dbc</anchor>
      <arglist>(real cellSize)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>setCellSize</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>adf72965b7f6214b7401db0a0171db764</anchor>
      <arglist>(realx3 cellSize)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>cellSize</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a6507d41c8151540f5972661c7a3f8d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const CellType &amp;</type>
      <name>numCells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>aa82656b252c2eb7c3cd9d8491949cde4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD indexType</type>
      <name>nx</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a103c0d44baf9aa23e9f2fc151678905f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD indexType</type>
      <name>ny</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>aa70433dff70a92ca9c74616c1e3b48e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD indexType</type>
      <name>nz</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a5e549f8b31612df62519b37e65954fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>totalCells</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a30407b0f1d3278ff34800ef45997cb84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>domain</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a25d2c2852f47af4814d68e76611441d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD CellType</type>
      <name>pointIndex</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a6a5c6423585a7ad6ad55f6df56c459bd</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>pointIndexInDomain</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ae16870dd025bb71d3dafdc755cedd946</anchor>
      <arglist>(const realx3 p, CellType &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>inDomain</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>afddde66f6a63e9dc2b78c740cc4c0949</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInRange</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a35eb36ff8390e5ad23a70f2a304a326d</anchor>
      <arglist>(const CellType &amp;cell) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInRange</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a1755e19f5555acc13bed60cbe4952283</anchor>
      <arglist>(indexType i, indexType j, indexType k) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>extendBox</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a4bb4067c00c519c5a613dbc1c076dd0f</anchor>
      <arglist>(const CellType &amp;p1, const CellType &amp;p2, const CellType &amp;p3, indexType extent, CellType &amp;minP, CellType &amp;maxP) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>extendBox</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a989eee28d3bba158140e994c9cf6ccf7</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, real extent, realx3 &amp;minP, realx3 &amp;maxP) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD CellType</type>
      <name>bound</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a109e8d4c8c126b11cc22366416628515</anchor>
      <arglist>(CellType p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>bound</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>ab10317c14e2180777a6d745a2427a2bc</anchor>
      <arglist>(realx3 p) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>calculate</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a192000f430504a4772f7bbc5895ae850</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>domain_</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>aab1dcc2ee3915125ba5aa7e66678d2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>cellSize_</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a0b9d14b08f72f5e11d83d1c065e23bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellType</type>
      <name>numCells_</name>
      <anchorfile>classpFlow_1_1cells.html</anchorfile>
      <anchor>a53f28b84a7bbd7b06110e9f35df5119a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cellsWallLevel0</name>
    <filename>classpFlow_1_1cellsWallLevel0.html</filename>
    <templarg>typename executionSpace</templarg>
    <base>cells&lt; int32 &gt;</base>
    <class kind="class">pFlow::cellsWallLevel0::TagFindCellRange2</class>
    <member kind="typedef">
      <type>int32</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a200e2b36a2cd413a512279c0089c6b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>ae73570f5a8fa6f2a0123b6a44eadca22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cells&lt; IndexType &gt;</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>aeddf2432738cfab3cda287d6fb96e048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>executionSpace</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a268a0b77c6f89665e5ef14307a3f1731</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename execution_space::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>ac5b08fe17cf30c7c64a5ee12370133e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iBox&lt; IndexType &gt;</type>
      <name>iBoxType</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a5e63edb05d6b5a08f98f8c077c391b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a71190a5b10fc975584fe951c981795c8</anchor>
      <arglist>(&quot;cellsWallLevel0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>cellsWallLevel0</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>afb081ee364207ac9b1b6831329a4366f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>cellsWallLevel0</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>adcaf45c5f96cd518bab40edc7e975a5f</anchor>
      <arglist>(const Cells &amp;ppCells, real cellExtent, int32 numPoints, int32 numElements, const ViewType1D&lt; realx3, memory_space &gt; &amp;points, const ViewType1D&lt; int32x3, memory_space &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>resetElements</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a15363cafe68ebc68b0b50110e3492433</anchor>
      <arglist>(int32 numElements, int32 numPoints, ViewType1D&lt; realx3, memory_space &gt; &amp;points, ViewType1D&lt; int32x3, memory_space &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD iBoxType</type>
      <name>elementBox</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a0dbdc2c647dbecb842e2ac7063da6ee6</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numElements</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a6a45631adf2182157aba9efdde94058e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a5cbdc8f9467a44e7ca4cd7f7a443c7c6</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a5c6e5792787e3b52834c24fc84a1e7bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>particleWallFindPairs</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a0bd39ea5c4205c7c8471c5a3dd772c2d</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findPairsElementRangeCount</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a5e6b458dfceee06a7fcaab14b3f1222a</anchor>
      <arglist>(PairsContainer &amp;pairs, CellIteratorType cellIter)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a9fe71c59eec21bd5c30fd45ba5f1d545</anchor>
      <arglist>(TagFindCellRange2, int32 i) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::TeamPolicy&lt; execution_space, Kokkos::Schedule&lt; Kokkos::Dynamic &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>tpPWContactSearch</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a72915a4a6f954d43cf6e71a323679363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; TagFindCellRange2, execution_space, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpFindCellRange2Type</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a394952448a965e98eddf3b183a7a60e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H void</type>
      <name>allocateArrays</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a328744b8a25238f746b939e7be7b6703</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>cellExtent_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>ae37c17021aa06dd9bcf5e7a187d6babf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numElements_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a48ae0ae4c180d88b2d9bc0ad3daf6ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numPoints_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a61a0f26a4b3be1a60036235413c1520a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int32x3, memory_space &gt;</type>
      <name>vertices_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>aa1a4b87eac80fb8b5d90c50c75987f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; realx3, memory_space &gt;</type>
      <name>points_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>a88ca4b3e1f86cb55b9758cd2c504a867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; iBoxType, memory_space &gt;</type>
      <name>elementBox_</name>
      <anchorfile>classpFlow_1_1cellsWallLevel0.html</anchorfile>
      <anchor>aa0f6ffd4d8ca569e301a71927d024c78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cellsWallLevels</name>
    <filename>classpFlow_1_1cellsWallLevels.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>cellsWallLevel0&lt; executionSpace &gt;</type>
      <name>cellsWallLevel0Type</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>aea93ffa7f2f71a92e641169784a5486d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>ab7da9ad90b0959810d8f7b53f4a21ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>af3f56b54b904aad6e266657cd440f800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a45e8eff03f89ed6ff2313ec3c9b34832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a1e76bf654e24a1c7f07817404d2b5ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename cellsWallLevel0Type::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>aaec8edb2e19eca233a24e6ec33d4cc92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iBox&lt; IndexType &gt;</type>
      <name>iBoxType</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a5e63edb05d6b5a08f98f8c077c391b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a269f2599880c33c12e56b3f5040339c4</anchor>
      <arglist>(&quot;cellsWallLevels&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>cellsWallLevels</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a9db45b11b8ef1116c90041f728ea28af</anchor>
      <arglist>(int32 numLevels, const Vector&lt; Cells &gt; &amp;cellsLevels, real cellExtent, int32 numPoints, int32 numElements, const ViewType1D&lt; realx3, memory_space &gt; &amp;points, const ViewType1D&lt; int32x3, memory_space &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a5cbdc8f9467a44e7ca4cd7f7a443c7c6</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>particleWallFindPairs</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a0bd39ea5c4205c7c8471c5a3dd772c2d</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numLevles_</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>a1497726a0bf80fdb9d9e481c0b96de97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; cellsWallLevel0Type &gt;</type>
      <name>cellsWallLevels_</name>
      <anchorfile>classpFlow_1_1cellsWallLevels.html</anchorfile>
      <anchor>aeac9630252fe748c6280779fa32ea9d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::combinedRange</name>
    <filename>classpFlow_1_1combinedRange.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>stridedRange&lt; T &gt;</type>
      <name>StridedRangeType</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a6a4261d2bfdf55a03206cd358f1518ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; T &gt;</type>
      <name>IntervalRangeType</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a649f34f2837d7dfd4b07fc29af94939a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>combinedRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a8c798d9aa1b7ae340589bb9574b0b78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>combinedRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a107f494afd1b456c2659468157d69d5f</anchor>
      <arglist>(const std::vector&lt; word &gt; &amp;strRanges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRanges</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>adbbd1401a0edfb24f13accc47e8c85b9</anchor>
      <arglist>(const std::vector&lt; word &gt; &amp;strRanges)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStridedRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a2174415fd682f88846895dafefee9d31</anchor>
      <arglist>(const word &amp;strRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addStridedRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a7a0d90a77dd06f2b1cde85ce12c47c9d</anchor>
      <arglist>(T begin, T end, T stride)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIntervalRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a59ec953d3d9b171d79c9f11b16f9c26d</anchor>
      <arglist>(const word &amp;strRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIntervalRange</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>ac028c434f72c1cb5fe0bfae4dcc3f069</anchor>
      <arglist>(T begin, T end)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIndividual</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a3a79e0cba51ba81ae2b0b13faeb00c3d</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addIndividual</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a504ecdaa95ec099d8d9d90f11e361141</anchor>
      <arglist>(const word &amp;strVal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a5a3c06690014c015f02ad827514b8954</anchor>
      <arglist>(T val) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; StridedRangeType &gt;</type>
      <name>sRanges_</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a765d9fc5e52a483564b9b2dc80b08db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; IntervalRangeType &gt;</type>
      <name>iRanges_</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>a1943dfafc917454e5d303cc9721d12c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Set&lt; T &gt;</type>
      <name>individuals_</name>
      <anchorfile>classpFlow_1_1combinedRange.html</anchorfile>
      <anchor>aadfbb6c22305cf1e35b4beaf382aca5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::compareOne</name>
    <filename>classpFlow_1_1compareOne.html</filename>
    <templarg>typename T</templarg>
    <templarg>template&lt; class &gt; class Operator</templarg>
    <member kind="typedef">
      <type>Operator&lt; T &gt;</type>
      <name>opertorType</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>a70aeb9dbd262f6e14634dfcb1bc9607a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>ae5b4c9cc5f15fd14e7bef2136025d22e</anchor>
      <arglist>(Operator&lt; T &gt;::TYPENAME())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compareOne</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>a677eafbd2f0d7e355d0022b9e5e95958</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>a959617eb88ef5b9a23aad7c00775ac69</anchor>
      <arglist>(const T &amp;value) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>compValue_</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>a90c18ef1c15f75e81cb14975589f5c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opertorType</type>
      <name>operator_</name>
      <anchorfile>classpFlow_1_1compareOne.html</anchorfile>
      <anchor>ab69ecda75e2a1ea153958dae11f986d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::compareTwo</name>
    <filename>classpFlow_1_1compareTwo.html</filename>
    <templarg>typename T</templarg>
    <templarg>template&lt; class &gt; class Operator</templarg>
    <member kind="typedef">
      <type>Operator&lt; T &gt;</type>
      <name>opertorType</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>a70aeb9dbd262f6e14634dfcb1bc9607a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>aeb8daf4459039f4440da2f472857ea31</anchor>
      <arglist>(opertorType::TYPENAME())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compareTwo</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>a1f48d648603e6927d482ccb5e41a9fd6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>a959617eb88ef5b9a23aad7c00775ac69</anchor>
      <arglist>(const T &amp;value) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>compValue1_</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>aa194c19afbb3e5d39d773bdf7f51d23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>compValue2_</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>a90b4e9387fc252b078d1c25d58fe2e8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>opertorType</type>
      <name>operator_</name>
      <anchorfile>classpFlow_1_1compareTwo.html</anchorfile>
      <anchor>ab69ecda75e2a1ea153958dae11f986d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::compareZero</name>
    <filename>classpFlow_1_1compareZero.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Operator</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1compareZero.html</anchorfile>
      <anchor>a5db383755ec84cdd49a0fa0f9ee82e15</anchor>
      <arglist>(Operator::TYPENAME())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>compareZero</name>
      <anchorfile>classpFlow_1_1compareZero.html</anchorfile>
      <anchor>a078d5679b4d1bd7d35cfc6014a2a652f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1compareZero.html</anchorfile>
      <anchor>a959617eb88ef5b9a23aad7c00775ac69</anchor>
      <arglist>(const T &amp;value) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>operator_</name>
      <anchorfile>classpFlow_1_1compareZero.html</anchorfile>
      <anchor>a7a783a4ad2478110c9c7903ee1895d35</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::linear::contactForceStorage</name>
    <filename>structpFlow_1_1cfModels_1_1linear_1_1contactForceStorage.html</filename>
    <member kind="variable">
      <type>realx3</type>
      <name>overlap_t_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1contactForceStorage.html</anchorfile>
      <anchor>a58fa740702b78c8fa486c4af355d26db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::nonLinear::contactForceStorage</name>
    <filename>structpFlow_1_1cfModels_1_1nonLinear_1_1contactForceStorage.html</filename>
    <member kind="variable">
      <type>realx3</type>
      <name>overlap_t_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1contactForceStorage.html</anchorfile>
      <anchor>a58fa740702b78c8fa486c4af355d26db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::nonLinearMod::contactForceStorage</name>
    <filename>structpFlow_1_1cfModels_1_1nonLinearMod_1_1contactForceStorage.html</filename>
    <member kind="variable">
      <type>realx3</type>
      <name>overlap_t_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1contactForceStorage.html</anchorfile>
      <anchor>a58fa740702b78c8fa486c4af355d26db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::ContactSearch</name>
    <filename>classpFlow_1_1ContactSearch.html</filename>
    <templarg>template&lt; class &gt; class BaseMethod</templarg>
    <templarg>template&lt; class &gt; class WallMapping</templarg>
    <base>pFlow::contactSearch</base>
    <member kind="typedef">
      <type>typename contactSearch::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a59de05442955ddd63952713a9d655716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename contactSearch::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a9dac94b784a34f73a9914cfeafa43aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename contactSearch::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a4143177ad2b52b85b57d2c1045feda2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename contactSearch::PairContainerType</type>
      <name>PairContainerType</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>ab419de71a36b363a7e9356a7c0886ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseMethod&lt; ExecutionSpace &gt;</type>
      <name>ParticleContactSearchType</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>af5ab3e5212ac477c212caf938be40636</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>WallMapping&lt; ExecutionSpace &gt;</type>
      <name>WallMappingType</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>aedf4939d9db5048436565ef23fa7076a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate2</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>af653754e90879fdf4d62b2f1de11ee84</anchor>
      <arglist>(&quot;ContactSearch&quot;, ParticleContactSearchType, WallMappingType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContactSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a15494562c2391a794970ad53eb4a6cb6</anchor>
      <arglist>(const dictionary &amp;csDict, const box &amp;domain, const particles &amp;prtcl, const geometry &amp;geom, Timers &amp;timers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a05f191978ffcabf5af6bacb4c6d35ebf</anchor>
      <arglist>(contactSearch, ContactSearch, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a74b5f8af7998301e828e444a58c020e1</anchor>
      <arglist>(PairContainerType &amp;ppPairs, PairContainerType &amp;pwPairs, bool force=false) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ppEnterBroadSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a579eec7b109fce3e3000063b2b96b285</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pwEnterBroadSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a1ad567357a0d9f55d25753b274faed95</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ppPerformedBroadSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>af2a3475e197aa6c0d2e1b74ecbc671e0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pwPerformedBroadSearch</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a7110554d7f2d9f975ad7e9c969230fb2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; ParticleContactSearchType &gt;</type>
      <name>particleContactSearch_</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a102dff6274131ee69494d7e9f83d04ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; WallMappingType &gt;</type>
      <name>wallMapping_</name>
      <anchorfile>classpFlow_1_1ContactSearch.html</anchorfile>
      <anchor>a62c821325549aa61643a6e44a5911915</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::contactSearch</name>
    <filename>classpFlow_1_1contactSearch.html</filename>
    <base>pFlow::interactionBase</base>
    <member kind="typedef">
      <type>typename interactionBase::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a3af07639d0071df31d0741a89d85ea76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interactionBase::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a4876646545c04fef726061070b4e9a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interactionBase::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a18d3281d135de549b69af821b3fef223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsortedPairs&lt; ExecutionSpace, IdType &gt;</type>
      <name>PairContainerType</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>ac727a42239cda225bf9aee921906e41b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>af00f5591b2b70d676103efc88e1e8d6c</anchor>
      <arglist>(&quot;contactSearch&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>contactSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a05141932b299f625ad1892aa65c8410c</anchor>
      <arglist>(const dictionary &amp;dict, const box &amp;domain, const particles &amp;prtcl, const geometry &amp;geom, Timers &amp;timers)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~contactSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>ad5cce7d60a1c5ca70040cfd1a9127389</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a7035bb9f3d9dbace03ddc8acff866fa1</anchor>
      <arglist>(contactSearch, dictionary,(const dictionary &amp;dict, const box &amp;domain, const particles &amp;prtcl, const geometry &amp;geom, Timers &amp;timers),(dict, domain, prtcl, geom, timers))</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>domain</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a25d2c2852f47af4814d68e76611441d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>ac741bb08b22b81f1a6a24e7c6309e057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a388525c99c8edeb5b27adc03873ddab7</anchor>
      <arglist>(PairContainerType &amp;ppPairs, PairContainerType &amp;pwPairs, bool force=false)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ppEnterBroadSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a746dd67848aa34a6a7cff89a617ea9d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pwEnterBroadSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a4540ec0a25fdf7106f73c99e3c3b385b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ppPerformedBroadSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a5b5676bc530ad5eab359657bc414ac10</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>pwPerformedBroadSearch</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a768b1593232ef701c11ae1bcdb06093f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; contactSearch &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a64f251a3a217f8917ed1abc6a3aeda95</anchor>
      <arglist>(const dictionary &amp;dict, const box &amp;domain, const particles &amp;prtcl, const geometry &amp;geom, Timers &amp;timers)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a2f728de88d0dabf004e04a0ce806edaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const box &amp;</type>
      <name>domain_</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>ae98f7831215a27c62eacf4793b066d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>dict_</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a5c644b0ad2ff77590a77fb0198c4a785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>sphereSphereTimer_</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>a2eea15253d49700ea50ef429658547e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>sphereWallTimer_</name>
      <anchorfile>classpFlow_1_1contactSearch.html</anchorfile>
      <anchor>ae164d3c654a8e342553fa8748329c63e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>pFlow::token::content</name>
    <filename>unionpFlow_1_1token_1_1content.html</filename>
    <member kind="variable">
      <type>int64_t</type>
      <name>int64Val</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>a8df13a55bf8b7d262daedc3e008f88fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>flagVal</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>abf58dcabdf3e74c7c665cd1db8deb113</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>punctuationToken</type>
      <name>punctuationVal</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>a5c6f58e572dddc2d0238f7c3d986af3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>floatVal</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>a8a7e6b9eebd2a34141d7f02fbf610eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>doubleVal</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>a50f6ffc18b148552c1612eeefc7ceea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>word *</type>
      <name>wordPtr</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>aefbbe71654300a9a11a71fbe23ce9131</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>word *</type>
      <name>stringPtr</name>
      <anchorfile>unionpFlow_1_1token_1_1content.html</anchorfile>
      <anchor>a8f591cc0431357f374590b1c63e699f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cuboidWall</name>
    <filename>classpFlow_1_1cuboidWall.html</filename>
    <base>pFlow::Wall</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1cuboidWall.html</anchorfile>
      <anchor>a7d2549f6b1807d4532960c5b57afe563</anchor>
      <arglist>(&quot;cuboidWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cuboidWall</name>
      <anchorfile>classpFlow_1_1cuboidWall.html</anchorfile>
      <anchor>a8fc60c58c21fed0f4142b6ceb78b38cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cuboidWall</name>
      <anchorfile>classpFlow_1_1cuboidWall.html</anchorfile>
      <anchor>a035807baa673d41c7161fa717aad8443</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1cuboidWall.html</anchorfile>
      <anchor>a93a521502d0e234b6b9d39a126c7f2d9</anchor>
      <arglist>(Wall, cuboidWall, dictionary)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readcuboidWall</name>
      <anchorfile>classpFlow_1_1cuboidWall.html</anchorfile>
      <anchor>a55e30af1f42fec1e6e19ff11aae7821b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cylinder</name>
    <filename>classpFlow_1_1cylinder.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>ad9af219cafd2d0ebd06c3681b611c4ad</anchor>
      <arglist>(&quot;cylinder&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a2868b48c479be15180c43297e0b8d350</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const real radius)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>aeb891021cbf6cf208d35a6a4ffcd9a4e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a6f4f6dc4ed761ed37b22c8c7cd549a96</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a7627be041b0e01a6a14165ef48b0c2bc</anchor>
      <arglist>(const cylinder &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a4fb2ea6ab9ebae5de129c4e9261d829e</anchor>
      <arglist>(cylinder &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD cylinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>af52299626c64879d14ecc09540fc26e3</anchor>
      <arglist>(const cylinder &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD cylinder &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a7aaa96dcd66b3fcf96576cd9c0350ade</anchor>
      <arglist>(cylinder &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cylinder</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a7b0a4c401a81c6e9d8639f62713235aa</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a898603c1e4e433d2f304d86f1a22c53c</anchor>
      <arglist>(const realx3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const realx3 &amp;</type>
      <name>p1</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a481d7fb3fe1d0687c84baf63119f3a14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const realx3 &amp;</type>
      <name>p2</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>aec8ab57dc37cc2df6f5507068f1503c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a67424c452a87ed7ff748b65374f89e54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a22e25e0baa24f79d1fa113c2a84f00f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>radius</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a4611c0bbd5b552873706e6d361f8b43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H bool</type>
      <name>calculateParams</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a60aa71a9e81fe0fd36ea435a9ec0e0aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>p1_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a3dbbeee301e1c6cf679b8f2bbbb9ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>p2_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a0c834510e42988cef9d46bac7d78c307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>radius2_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a498f87a6a3bd75c3036c49da59c964a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>axisVector_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>aab01b4d0369205b08db8e1b42aa5d1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>axisVector2_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a3bef7ec8ee674aaf0715b07e34d57e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>minPoint_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>a9d40ea465ed9c32be4efd09cba85f627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>maxPoint_</name>
      <anchorfile>classpFlow_1_1cylinder.html</anchorfile>
      <anchor>ab2507e8c26d324f9d93ca3c09a72a08f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cylinderRegion</name>
    <filename>classpFlow_1_1cylinderRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a75398cbe25a26a9d3c19d41b50b79715</anchor>
      <arglist>(&quot;cylinderRegion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cylinderRegion</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>aef69c348e1ab314e7bdb6900b032de03</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cylinderRegion</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>ae531a974df35c0d37a4a3c7fc9eb5213</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>aaa6340380ab7af3599579f49f62308da</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a742999f822100111462c25118a0ce0fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cylinder</type>
      <name>cylinder_</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a9c49944ff14b819d1c2c0e34a7362067</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniformRandomReal</type>
      <name>random_</name>
      <anchorfile>classpFlow_1_1cylinderRegion.html</anchorfile>
      <anchor>a809105944d87bd27bb8fa71167a86e14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cylinderWall</name>
    <filename>classpFlow_1_1cylinderWall.html</filename>
    <base>pFlow::Wall</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>a5b382f4894edebf7145123760f924143</anchor>
      <arglist>(&quot;cylinderWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cylinderWall</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>a5c0a36af3f504b685e8d4fb823fa54df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cylinderWall</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>a9514b2bd7fbb80e6466b569d874a815c</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>ae5787e4210a143212c4d77876bb99964</anchor>
      <arglist>(Wall, cylinderWall, dictionary)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readCylinderWall</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>a563569591f8b215615788f0f7547c515</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>createCylinder</name>
      <anchorfile>classpFlow_1_1cylinderWall.html</anchorfile>
      <anchor>a9b3466f78d2e5f857c033324c8e311a6</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, real rad1, real rad2, int32 numDiv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::dataEntry</name>
    <filename>classpFlow_1_1dataEntry.html</filename>
    <base>pFlow::iEntry</base>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a11137fa1981cd8a32fe7ff5edb606fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aa7f024590d2e3f1e0b2f3f1ed407a2e2</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a26a41763c723cfc672c5ed4ca9c6f546</anchor>
      <arglist>(const word &amp;keyWord, const dictionary &amp;parDict, const iTstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a9ab8c2767c7e28e08d2cfa1dd6320794</anchor>
      <arglist>(const word &amp;keyWord, const dictionary &amp;parDict, iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a2b9396ae92eb82853eabd89c17549fb3</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>afc423114f2030ef34706ad3f8aeb7773</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aec3097656a08bf53e28008428fa9020b</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict, const dataEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a3b66448b426e9c688f52b309b559853d</anchor>
      <arglist>(const dataEntry &amp;src)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>globalName</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a85c3c1fce0c14d36030092df2f27b632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iTstream &amp;</type>
      <name>stream</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aec6909dffed34a3c8c286c344e4cf656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a4b263b6f79a49eb7bf008715b8707b01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a3618f31bf36cfb2e1ac37f35053df77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDictionary</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aed15599ef76092b99a4f4241816eff02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary &amp;</type>
      <name>parrentDict</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a69904924abd50610c0a078515c9d39ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a56faff4a7a8331912ea1ecbfa69de211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a67f05bfd0612dd010f4e55f920fc7c15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>afc71ebfe0388847de8017552d16e4c90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a5581674fad3e61d4e5391091517d9380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a3c3dc0b7894ea5e5edd90bb2d53ab802</anchor>
      <arglist>(const dictionary &amp;parDict) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aa1fc207186d99ebe18d2394c751c65aa</anchor>
      <arglist>(const dictionary &amp;parDict) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static dataEntry</type>
      <name>nullDataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a69b422672deb33016b466d4f7ac204ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a12a2f078710c7419e84afd6cdd58ac70</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDataEntry</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aad22b29fba434ea640dcf3dcf1beb293</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>parDict_</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>aa915306f87921d86b69eaeb8032015f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iTstream</type>
      <name>tokenStream_</name>
      <anchorfile>classpFlow_1_1dataEntry.html</anchorfile>
      <anchor>a79c4b8a30c00f40c6ae2334fab4f9ec0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::demComponent</name>
    <filename>classpFlow_1_1demComponent.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a3145c3f3cba34861e279260ada91e0de</anchor>
      <arglist>(&quot;demComponent&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>demComponent</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a73e3f3cd6a8eca86e6862f02e416dba2</anchor>
      <arglist>(const word &amp;name, systemControl &amp;control)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~demComponent</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a9ab4d5fa34944c13f3a07ec25b4fd666</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>control</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>aeca9d1afdda24d9cd2fd31afe481dcbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>control</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a9a0450e326db3576eb3d8ea86d468562</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>dt</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a4fc823022c8f0175108f10a42e7b858f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>currentTime</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a476763249b99b131d7116430896cd44e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>timers</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>afdac5c1eb99c13f8840ccf28ecbedc3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>timers</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>aea1e4abf8361799f6c20486177cdb14e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a87d9b39a0e924bb21ed4a165140836de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>iterate</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>ad9e44c3349e7a9a5b6ba72c9db344b96</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>afterIteration</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>ac7d2399b393b6dfa6f00ad9bcd524437</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>componentName_</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a3ce96806ed72189c4d9a24e9429d0420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>systemControl &amp;</type>
      <name>control_</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>abfbc3debb472c661c30cf9fe782bb076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timers</type>
      <name>timers_</name>
      <anchorfile>classpFlow_1_1demComponent.html</anchorfile>
      <anchor>a0c29ef9514a77bce5b8f4ece533bcf8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::demGeometry</name>
    <filename>classpFlow_1_1demGeometry.html</filename>
    <base>pFlow::demComponent</base>
    <member kind="function">
      <type></type>
      <name>demGeometry</name>
      <anchorfile>classpFlow_1_1demGeometry.html</anchorfile>
      <anchor>a807e1de7e5eeef57df20a3d5bd1a09a3</anchor>
      <arglist>(systemControl &amp;control)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::demInteraction</name>
    <filename>classpFlow_1_1demInteraction.html</filename>
    <base>pFlow::property</base>
    <base>pFlow::demComponent</base>
    <member kind="function">
      <type></type>
      <name>demInteraction</name>
      <anchorfile>classpFlow_1_1demInteraction.html</anchorfile>
      <anchor>a960d480de90f6077cfd41b44dde4e021</anchor>
      <arglist>(systemControl &amp;control)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>demInteraction</name>
      <anchorfile>classpFlow_1_1demInteraction.html</anchorfile>
      <anchor>aadecbb16ca94ff98a5e1da49f3837373</anchor>
      <arglist>(systemControl &amp;control, const fileSystem &amp;file)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::demParticles</name>
    <filename>classpFlow_1_1demParticles.html</filename>
    <base>pFlow::demComponent</base>
    <member kind="function">
      <type></type>
      <name>demParticles</name>
      <anchorfile>classpFlow_1_1demParticles.html</anchorfile>
      <anchor>a8c1c091fd33ba565c919cc8624a89345</anchor>
      <arglist>(systemControl &amp;control)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::DeviceSide</name>
    <filename>classpFlow_1_1DeviceSide.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::dictionary</name>
    <filename>classpFlow_1_1dictionary.html</filename>
    <base>pFlow::iEntry</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>adff16d6c3da2e1199388053bae31bbf9</anchor>
      <arglist>(&quot;dictionary&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a4cea470990d165a35c1b2333a569b586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aa8a49a7d5e7029074abd597dc0d9f21e</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a964a1065e85c422af8186f1554fcabaa</anchor>
      <arglist>(const word &amp;keyword, bool global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a5de3e57e04d59bc11f6c540fa5e84ea2</anchor>
      <arglist>(const word &amp;keyword, const fileSystem &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a9e7fb4c5d840d5130fb407dee3285d5d</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ab68249035485cfb12593cf0038debe1a</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict, iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a9ca28113d055c2924fb27986bd57282e</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;parDict, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a19acef968da8dec8f647a633445eb997</anchor>
      <arglist>(const dictionary &amp;)</arglist>
    </member>
    <member kind="function">
      <type>dictionary &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>adc0d9e77818c0cbe8dc3b9d70626d65c</anchor>
      <arglist>(const dictionary &amp;rhs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a4b263b6f79a49eb7bf008715b8707b01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a3618f31bf36cfb2e1ac37f35053df77c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aed15599ef76092b99a4f4241816eff02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>globalName</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a85c3c1fce0c14d36030092df2f27b632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary &amp;</type>
      <name>parrentDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a69904924abd50610c0a078515c9d39ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a56faff4a7a8331912ea1ecbfa69de211</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a67f05bfd0612dd010f4e55f920fc7c15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFileDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a9d7fc6701df5e2f0e274d35f2a2ce864</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a855a11e053a7beb86f8f23b2efc3de9e</anchor>
      <arglist>(const word &amp;keyword, uniquePtr&lt; iEntry &gt; &amp;etry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a6ae2ea14b8b5e5661c2f207aae2d4bdc</anchor>
      <arglist>(const word &amp;keyword, const float &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ae8b6306cb1144bc3603b6b6ba0e7081b</anchor>
      <arglist>(const word &amp;keyword, const double &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ac293ebdbdd91b7651946a305b96f89b4</anchor>
      <arglist>(const word &amp;keyword, const word &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aafd207d98ece7aaa22e903c422f35d4d</anchor>
      <arglist>(const word &amp;keyword, const int64 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a2707879e620bd58acf800b9919a0983c</anchor>
      <arglist>(const word &amp;keyword, const int32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>adea47d7df2731cbd298504da4f416ed8</anchor>
      <arglist>(const word &amp;keyword, const int16 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a0dccc72efda67a15dd1aa5aacad9dafd</anchor>
      <arglist>(const word &amp;keyword, const int8 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>abaf8144cc5552fb6dc6e88d629fd23ff</anchor>
      <arglist>(const word &amp;keyword, const label &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>addd2626c7e078616a657c23b036f389f</anchor>
      <arglist>(const word &amp;keyword, const uint32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a884a981ad2a220efcd7f6e8bf6cd94e2</anchor>
      <arglist>(const word &amp;keyword, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ab2e3c2edb29c3068d7be477b82a6a27b</anchor>
      <arglist>(const word &amp;keyword, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>dictionary *</type>
      <name>subDictPtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ac2e8b8b4980850686b61c0e9755d7bf9</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>dictionary &amp;</type>
      <name>subDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a630c840647a3ebefe33336cc25a8b15d</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>const dictionary &amp;</type>
      <name>subDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a4f24020f1698335648cd79fa3adf06cf</anchor>
      <arglist>(const word &amp;keyword) const</arglist>
    </member>
    <member kind="function">
      <type>dataEntry *</type>
      <name>dataEntryPtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ad65f9c5bdcaa4a6d3690863d5f43e7c9</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>dataEntry &amp;</type>
      <name>dataEntryRef</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a713abeb5a65a5982d48bebb237e19722</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>const dataEntry &amp;</type>
      <name>dataEntryRef</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a6e7e19901d46515ea5da62e684250690</anchor>
      <arglist>(const word &amp;keyword) const</arglist>
    </member>
    <member kind="function">
      <type>dictionary &amp;</type>
      <name>subDictOrCreate</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aa4d7322eaead3c887a9283546628de96</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getVal</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a523bcff98ab38f3c5961e56eeb0b1d47</anchor>
      <arglist>(const word &amp;keyword) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValOrSet</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a5585dc9a8b971fbfe2c99fdb75c5d647</anchor>
      <arglist>(const word &amp;keyword, const T &amp;setVal) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numEntries</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a11637363d5043d0cff4e85d54581ada0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numDataEntries</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a84ad7f4914a81375bf795a459911e26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numDictionaries</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aec915adbf764f8fa9e30fbc16299b3da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>allKeywords</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a013d55c9f22dfd9bbe81bd8890ea5929</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>dataEntryKeywords</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a4ec29cc19fce60018543fdd6d7ebf971</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>dictionaryKeywords</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a19ffc40573d3199c2368b9aac1b8129c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsDictionay</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>ac17b017ed4e1be84fa2e9144946603e0</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsDataEntry</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a7ca8222c7de98177fe1e8e9d2615f77d</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a5581674fad3e61d4e5391091517d9380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>afc71ebfe0388847de8017552d16e4c90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aa1fc207186d99ebe18d2394c751c65aa</anchor>
      <arglist>(const dictionary &amp;parDict) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a3c3dc0b7894ea5e5edd90bb2d53ab802</anchor>
      <arglist>(const dictionary &amp;parDict) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static dictionary</type>
      <name>nullDict</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a547cb1f4ce564ef3a22a8942ab7bf88a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iEntry *</type>
      <name>findEntry</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aa7381535b14d85e166f4fd9f522b9e88</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>iEntry *</type>
      <name>findEntry</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a529cc22b90a55c8695950050eeb34cce</anchor>
      <arglist>(const word &amp;keyword) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDataEntry</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a12735deb0a772333cdf4a4001bdce045</anchor>
      <arglist>(const word &amp;keyword, T &amp;val) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a8943dec8dd658ffb5d0c1da773f37d9d</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a177356b3dd247e48fdc2c715a68dce21</anchor>
      <arglist>(iOstream &amp;os, bool withBlock=true) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordOrderedMapPtr&lt; iEntry &gt;</type>
      <name>entries_</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>af840c50afcef1f94a6eceea0408dc7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; iEntry * &gt;</type>
      <name>orderedEntries_</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>a8a0ae40ed4ddfc34371027fff32a0659</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const dictionary &amp;</type>
      <name>parDict_</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>aa915306f87921d86b69eaeb8032015f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isGlobal_</name>
      <anchorfile>classpFlow_1_1dictionary.html</anchorfile>
      <anchor>af5d8276df77d26e40b61be99942cdec8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::dynamicLinkLibs</name>
    <filename>classpFlow_1_1dynamicLinkLibs.html</filename>
    <member kind="function">
      <type></type>
      <name>dynamicLinkLibs</name>
      <anchorfile>classpFlow_1_1dynamicLinkLibs.html</anchorfile>
      <anchor>acd99b0a201ee4830e87164945077d9ff</anchor>
      <arglist>(const dictionary &amp;dict, word libList=&quot;libs&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~dynamicLinkLibs</name>
      <anchorfile>classpFlow_1_1dynamicLinkLibs.html</anchorfile>
      <anchor>a50cf59949b8a18ac16364a2ae3700368</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>open</name>
      <anchorfile>classpFlow_1_1dynamicLinkLibs.html</anchorfile>
      <anchor>ae1659a2a86d7e045f9f4a4483427d7d5</anchor>
      <arglist>(word libName)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordHashMap&lt; void * &gt;</type>
      <name>libs_</name>
      <anchorfile>classpFlow_1_1dynamicLinkLibs.html</anchorfile>
      <anchor>a8fdc16479233e2680939a03baf67d470</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::dynamicPointStructure</name>
    <filename>classpFlow_1_1dynamicPointStructure.html</filename>
    <base>pFlow::eventObserver</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>ac519d5843321d28718031bb71639d72d</anchor>
      <arglist>(&quot;dynamicPointStructure&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dynamicPointStructure</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a10d4d223c37affe812c8910ca9851c3f</anchor>
      <arglist>(Time &amp;time, const word &amp;integrationMethod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dynamicPointStructure</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a6c172bdba2aad8b9eaa31c6e8d318035</anchor>
      <arglist>(const dynamicPointStructure &amp;ps)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dynamicPointStructure</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>afbe8d88ef670b4cca3b997c442c052b7</anchor>
      <arglist>(dynamicPointStructure &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>dynamicPointStructure &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a86ad09c00e1a2509a01bf4c059e19be6</anchor>
      <arglist>(const dynamicPointStructure &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dynamicPointStructure &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a24624e0b5e3b8bc62e04792acd942015</anchor>
      <arglist>(dynamicPointStructure &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~dynamicPointStructure</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a9ca49f0393ad0c485158ea0b42e11c36</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>pointStructure &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a8f131fc5ff44504b3b70a20c6797a369</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const pointStructure &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a6dce327cc1a5fe386ab2912d8a72d237</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const realx3PointField_D &amp;</type>
      <name>velocity</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a1442d354333a42ef178bf21dae43fabe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>velocityHostAll</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>ab70615d8a2b0aa175589cf4da9164e1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pointPositionHostAll</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>ae465f6f4c1d4ed64dd49566f68d05df8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>markDeleteOutOfBox</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>ae7e26ea07014ff5bd1119588dbb77709</anchor>
      <arglist>(const box &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a21a26eb192452a95406ac398ab2ed189</anchor>
      <arglist>(real dt, realx3PointField_D &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a6d5c3945958cbde4e61f1cec4f374023</anchor>
      <arglist>(real dt, realx3PointField_D &amp;acceleration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a98372d2b87e1c67d4b2eb0517336abf7</anchor>
      <arglist>(const eventMessage &amp;msg) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Time &amp;</type>
      <name>time_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a97d6a106e35c444e647a69f8a8ba7f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>integrationMethod_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a999faac6d1827e8ab8e816a6c9042256</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pointStructure &amp;</type>
      <name>pStruct_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a8b6bae6de91cd5e6e59c9c9423854cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>velocity_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>ae79ee5d82b6c7ae8e5c5dbdb226ec673</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>integrationPos_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>a6a8d13534e5f09a9c8d6f194d7bda6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>integrationVel_</name>
      <anchorfile>classpFlow_1_1dynamicPointStructure.html</anchorfile>
      <anchor>abdf3b7db5e8d8b96f6d58cab4d715858</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::empty</name>
    <filename>classpFlow_1_1empty.html</filename>
    <base>pFlow::positionParticles</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>aa52aeb800a29319e07a22569ec6043ae</anchor>
      <arglist>(&quot;empty&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a5b48a983fe5f1d314c54a7ab2e8f4ba8</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>aaec3c50bfb67f4edcefb66feaac7529b</anchor>
      <arglist>(positionParticles, empty, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~empty</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>af683c1d8d221ef9e80a483e4db2991a1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>aa52aeb800a29319e07a22569ec6043ae</anchor>
      <arglist>(&quot;empty&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a5b48a983fe5f1d314c54a7ab2e8f4ba8</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>aaec3c50bfb67f4edcefb66feaac7529b</anchor>
      <arglist>(positionParticles, empty, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~empty</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>af683c1d8d221ef9e80a483e4db2991a1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>emptyDict_</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>acdb7c1d684604e51b9a60648ca48e125</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3Vector</type>
      <name>position_</name>
      <anchorfile>classpFlow_1_1empty.html</anchorfile>
      <anchor>a56f883f3aedea00c95a16c93d6a245ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::equalOp</name>
    <filename>structpFlow_1_1equalOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1equalOp.html</anchorfile>
      <anchor>af1ee202d0ce5d5efbcd80a70567e4bc6</anchor>
      <arglist>(&quot;equal&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1equalOp.html</anchorfile>
      <anchor>a0d60eb080f65e9375741f050031ad1f1</anchor>
      <arglist>(const T &amp;compVal, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::eventMessage</name>
    <filename>classpFlow_1_1eventMessage.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>event</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETE</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aa9d61e82a9a12752f10aece1b22183913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSERT</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aaa15c451953b2d2a93403afe786930d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REARRANGE</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aae36ef497367232ae09a9439e01165e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aac455066f4d2132a3e1dcd414d4db3f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAP_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aa110cf5385e827397c5b50cbd59391654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANGE_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aad42d4e65313ad09ab5a38764524364b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETE</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aa9d61e82a9a12752f10aece1b22183913</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INSERT</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aaa15c451953b2d2a93403afe786930d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REARRANGE</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aae36ef497367232ae09a9439e01165e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aac455066f4d2132a3e1dcd414d4db3f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAP_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aa110cf5385e827397c5b50cbd59391654</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANGE_CHANGED</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a98ebfffbea52eb8a67326335b2ca8f9aad42d4e65313ad09ab5a38764524364b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eventMessage</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a5d3dd1d5e17947b6762f63d12bf65249</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eventMessage</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a51c8575e954d86d486c21e86eb79f09a</anchor>
      <arglist>(unsigned int msg)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>get</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>abfcf69bb151aaad5278ad4eaaf7dc891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a4abf51503fb6899f0dc791f76a8f57f4</anchor>
      <arglist>(unsigned int msg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a16b5d7d13bf51d2ff4c0fba174666941</anchor>
      <arglist>(unsigned int msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equivalentTo</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a3a9af101dfae0f478e334ea5510e74ff</anchor>
      <arglist>(const event &amp;evt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>abada6dfb33f4cbafe1e443a5cf8dc8d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDeleted</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>ac8efc5df207a89f8c9044015074c19d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInsert</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a4571ff36616c9989d4ef0a771e8acef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRearranged</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a9cad61d8f402baa44e4dcd75635f9fc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSizeChanged</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>aae24bd644446ec8086a530935b2468f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCapacityChanged</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>aef5685f4a69f63618ba15899e2405788</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRangeChanged</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a284b491c1bd066879ad2115717434e73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>message_</name>
      <anchorfile>classpFlow_1_1eventMessage.html</anchorfile>
      <anchor>a0a1e3dca003cdd83e29e6630e34106cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::eventObserver</name>
    <filename>classpFlow_1_1eventObserver.html</filename>
    <member kind="function">
      <type></type>
      <name>eventObserver</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a69e17341cf34a16cf432fe89b5d1e3d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>eventObserver</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a500a83ecd496c5f393e815fd0597b728</anchor>
      <arglist>(const eventSubscriber &amp;subscriber, bool subscribe=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eventObserver</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>ab4a79ac5fa9ae6f5074748fe4b8fc954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subscribed</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a0bbca55d6c8f234990c4f78bf4449288</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subscribe</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a7d5ac42c30174e7700a36b3d05de5747</anchor>
      <arglist>(const eventSubscriber &amp;subscriber)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidateSubscriber</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a6945b636972adfaba66c9ca5f1e68a25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a64730bf40b61714954f7d250702052df</anchor>
      <arglist>(const eventMessage &amp;msg)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const eventSubscriber *</type>
      <name>subscriber_</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>a0fb69aec8e6e5c3f6a27c4ecc724338b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>subscribed_</name>
      <anchorfile>classpFlow_1_1eventObserver.html</anchorfile>
      <anchor>afe38338c2fa622334e0f3d49d455ab47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::eventSubscriber</name>
    <filename>classpFlow_1_1eventSubscriber.html</filename>
    <member kind="function">
      <type></type>
      <name>eventSubscriber</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>ad2c10adc1df71b0ad3daffab23eecbd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~eventSubscriber</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>a4fe17de555051fd4062006af5b54c755</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>subscribe</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>a7d53ce19a500ec6de33f564e36f658df</anchor>
      <arglist>(eventObserver *observer) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>unsubscribe</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>a8ab6c2b69854876b1f5777553cf190ed</anchor>
      <arglist>(eventObserver *observer) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>notify</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>a8be673bd14011c024b47ba6a391e75fc</anchor>
      <arglist>(const eventMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>notify</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>a064ad67bb3dfc6fff5f239149913f61d</anchor>
      <arglist>(const eventMessage &amp;msg, const List&lt; eventObserver * &gt; &amp;exclutionList)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; eventObserver * &gt;</type>
      <name>observerList_</name>
      <anchorfile>classpFlow_1_1eventSubscriber.html</anchorfile>
      <anchor>ac73c100aa0cf2bf7ffc79a739d5f3ab7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Field</name>
    <filename>classpFlow_1_1Field.html</filename>
    <templarg>template&lt; class, class &gt; class VectorField</templarg>
    <templarg>class T</templarg>
    <templarg>class PropType</templarg>
    <member kind="typedef">
      <type>VectorField&lt; T, PropType &gt;</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a17f93ef6c6f1b09493247dc4bfc8034e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorField, T, PropType &gt;</type>
      <name>FieldType</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a9c21898f701f587608a900ee4a709097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a2b8f0ba308c4037e39ec503b9a1e4d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::constIterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a0e58d55cd5bd8a9c53545f1ae89ca05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a24e1cc28757f0776d455faa2a92cc094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::constReference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a8cce8c465d5f59897e0e94fa3d29f816</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::valueType</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a74686019fa98a3db8312edc2c71076ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::pointer</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a15206b415c09500493d38c91b970e958</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename VectorType::constPointer</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a31d8ae42c5b5086aac03094022636a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a85d26f06e18178fb3664d54f7ae9d660</anchor>
      <arglist>(&quot;Field&quot;, T, VectorType::memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a37d975a33e390747a97a453bc0455107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a305695108ec00bbd1b32e77fe4b808cc</anchor>
      <arglist>(const word &amp;fieldKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a677b63b1fe9e5d48118598ccf4ed313d</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>aa645eb887857ae3a79f3fd1fd7e2efe7</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a44a34b82821cdf41eedf6210c043f669</anchor>
      <arglist>(const word &amp;fieldKey, size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>afaf4226f4c67b47e1299c55a54f21733</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey, size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>ad89c215f894a90053549b10f99a31cd2</anchor>
      <arglist>(size_t len, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a67a8ed8e45a1e7647c25fcbd44ecd96d</anchor>
      <arglist>(const word &amp;fieldKey, size_t len, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a677755da27b97125abd8690520e469b3</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey, size_t len, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a55fe65e3cb043fb055af84968c1d3d58</anchor>
      <arglist>(size_t capacity, size_t len, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>aa8f4042ece998abbe22fd5bec836d6e1</anchor>
      <arglist>(const word &amp;fieldKey, size_t capacity, size_t len, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>accde17c10fc753920eb4601eb787791f</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey, size_t capacity, size_t len, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a6db158c4fed7b49e831d5e21b6501512</anchor>
      <arglist>(const Vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a083ef991abc37177cf71c0ed6dcc19fd</anchor>
      <arglist>(const word &amp;fieldKey, const Vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a141267793b0eff81395ebff2d5e4bcce</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey, const Vector&lt; T &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a6e59e2d8ecd94bfcd311d55efe74db71</anchor>
      <arglist>(const word &amp;name, const word &amp;fieldKey, const FieldType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a2079b8d03d8059fed1f207669d9da4a3</anchor>
      <arglist>(const FieldType &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FieldType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a27ec556dddf3c5e23d9f6d7acaa51525</anchor>
      <arglist>(const FieldType &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Field</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a35fed9a3fc29c6bb8dd03c74d219ebaa</anchor>
      <arglist>(FieldType &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FieldType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a6d5db89b716706c78b81d11a3a422076</anchor>
      <arglist>(FieldType &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H uniquePtr&lt; FieldType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>ac824fd046d18f3fb8b98d1d69d0600de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H FieldType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a173f4ba0c061e3a36eb580d3a8703dce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>fieldKey</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a34664a35a384c1c0c19d1010727c84e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readField</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a12716db8ee8e80c16504deb8061f25a9</anchor>
      <arglist>(iIstream &amp;is, const size_t len, bool readLength=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readField</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a352b49008fcb89908214694239113a24</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeField</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>ac550f175fb70daa183a4008bfd790f5f</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readUniform</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a4a088d05c6030840715e4590719ea2f2</anchor>
      <arglist>(iIstream &amp;is, size_t len, bool readLength=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readNonUniform</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a65fb54f18c87499159f30c6d4514c674</anchor>
      <arglist>(iIstream &amp;is, size_t len)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>fieldKey_</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a2b353c24fbd6c2b144cab85ee50b8dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const word</type>
      <name>FKey</name>
      <anchorfile>classpFlow_1_1Field.html</anchorfile>
      <anchor>a7c3f2d5a74856425892835688d908f72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::fileStream</name>
    <filename>classpFlow_1_1fileStream.html</filename>
    <member kind="function">
      <type></type>
      <name>fileStream</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>aa84e42e905cfb3f52afa76ec3074c9d2</anchor>
      <arglist>(const fileSystem &amp;path, bool outStream=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileStream</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a5d86209d8fe5bac3eacf5301cfaf60e0</anchor>
      <arglist>(const fileStream &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>fileStream &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>aaf3ac13ebb8c294891d89df615e0dde7</anchor>
      <arglist>(const fileStream &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~fileStream</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a5fe998970d1259a6c509c88724a8a599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ifstream &amp;</type>
      <name>inStream</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a3bcd8dda96066183fbf2024b67915655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ofstream &amp;</type>
      <name>outStream</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>af3458b34a937eb333ae314095c7725d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>openInFile</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a2202773d095b6ad3bd8186c6b4ef1458</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>openOutFile</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a8d6b427b76776c3ef060ad31d8ea44fd</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>close</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a5ae591df94fc66ccb85cbb6565368bca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; std::ifstream &gt;</type>
      <name>inStream_</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>a85cc66c39570389f63084c1b0a8c065b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; std::ofstream &gt;</type>
      <name>outStream_</name>
      <anchorfile>classpFlow_1_1fileStream.html</anchorfile>
      <anchor>af4210b27304c9ab2813b41ae934328d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::fileSystem</name>
    <filename>classpFlow_1_1fileSystem.html</filename>
    <member kind="typedef">
      <type>std::filesystem::path</type>
      <name>pathType</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a8b70327415b7e2434c6f1ff520c37f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>adbf52d64f89e6579932a2d97a410865f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>aa8df3461916f4b035188fbd0aec0ed12</anchor>
      <arglist>(const word &amp;dir, const word &amp;file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a44c26d5923333c4aa46f52ad0ba2cc57</anchor>
      <arglist>(const char *dir, const char *file=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>af76d52f75b39a3dd3d7b2556e3bae2db</anchor>
      <arglist>(const pathType &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a05d40e2dd9525a695fc871f9138b3667</anchor>
      <arglist>(const fileSystem &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a5cfff670375a98435e86ae538868a74a</anchor>
      <arglist>(fileSystem &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>fileSystem &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>aa1455dd1dd6201c577a2acc0da9d127e</anchor>
      <arglist>(const fileSystem &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>fileSystem &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>abc3bfc743e9f13110cfadc41ddf6ec29</anchor>
      <arglist>(fileSystem &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fileSystem</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ac357149baa7c7a8cde1b30005f1ef89c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDir</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ac7c1954c9ef4e06b185ea9971217068c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const pathType &amp;</type>
      <name>path</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a78e630a19291b6d64dd3aebfae5203f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>wordPath</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ad7cad1b82e1afeea66c2f0649de5d93f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>dirPath</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>aa38071b32f7e36ac484ba59b2c0b0eec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>fileName</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a06b8851f8e2610ba100d6dbe7c28e42a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>absolute</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>af60e3745d0ba90eaec6169d2fedf3672</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>canonical</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ae314be4455ae76c73ce660e840d0e5cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dirExist</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a50adcf11cea516a2e8756eadafab8da3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exist</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a549f0056414942b1ff25b23cdeac92ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>createDirs</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a7f33187e671f9c2fc6f189bf7005e067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ad5a6ed25a46487bf8b9c148769ad9ead</anchor>
      <arglist>(const word &amp;fileName)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a68e72d3af85bf1d216834e8e5c616072</anchor>
      <arglist>(const fileSystem &amp;fs)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a867f8148e9b99b53b87b79fe200acff4</anchor>
      <arglist>(bool retDir=true) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static fileSystem</type>
      <name>CWD</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ae786060b60772fb23941d9f391bf6835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>validFileName</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a42d00f7345430ad04ae025feab49bc18</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>checkFileName</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>abeb262ada284c78abee69fd64c1700f6</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::filesystem::path</type>
      <name>path_</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>ae085158a530fc969b1c42c36f43c08d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isDir_</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a665273dc06598e5f2a675e4ea9464770</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static word</type>
      <name>notPermittedCharsFile</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>adc6d0ca8012efebb617c63f6b406324a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend fileSystem</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a39940fd65d47ee21b31888a9ae6597ac</anchor>
      <arglist>(const fileSystem &amp;fs1, const fileSystem &amp;fs2)</arglist>
    </member>
    <member kind="friend">
      <type>friend iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a7ad0363307b5323476398ae31c82c591</anchor>
      <arglist>(iOstream &amp;os, fileSystem fs)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1fileSystem.html</anchorfile>
      <anchor>a561119659a57977cfa140aac28d157eb</anchor>
      <arglist>(std::ostream &amp;os, fileSystem fs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::fixedWall</name>
    <filename>classpFlow_1_1fixedWall.html</filename>
    <class kind="class">pFlow::fixedWall::Model</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ae8f7bcb52c808abbf3357af6bfa0c510</anchor>
      <arglist>(&quot;fixedWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixedWall</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ad913d1760d10df18a4e86f565c8a9596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixedWall</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a8e7eec7ac17bb9d1f3fda92b7efed0d4</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixedWall</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ad5fc75c107c27aecafd92542950c6773</anchor>
      <arglist>(const fixedWall &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixedWall</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ae0ebed07aaa047141da72dac3e60f253</anchor>
      <arglist>(fixedWall &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>fixedWall &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a5d343749067c1e0980f8350f542a007f</anchor>
      <arglist>(const fixedWall &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>fixedWall &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a33d6ee3bcaae211a4317edfee59ac66f</anchor>
      <arglist>(fixedWall &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~fixedWall</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a1c6f880fba7c5d7aa47fea3832218671</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getModel</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a3058fdf81ac29297d8d55af5785f465e</anchor>
      <arglist>(real t) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ac8c3f014834cc9f4624fc72549a0b852</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>indexToName</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>afeceeb1f38a2a1761fb49e01622dbf01</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a6a68e2066fedf398ac9614958059169f</anchor>
      <arglist>(label n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a6f913cb3f30d8c93334b0872662bd925</anchor>
      <arglist>(label n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a6cd80308d425051d690e508b2dd164dd</anchor>
      <arglist>(label n, realx3 *pVec, size_t numP, real dt)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isMoving</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a226a2b5e6b2e18ee8a990c2c357bb036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>move</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a375f8854edf6e80df5a1991563054284</anchor>
      <arglist>(real t, real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1fixedWall.html</anchorfile>
      <anchor>afd780271a9c45061cfdc62f5c3fc9929</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::geometry</name>
    <filename>classpFlow_1_1geometry.html</filename>
    <base>pFlow::demGeometry</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ab011cb0b8d92100d9e30bf9b043e22ec</anchor>
      <arglist>(&quot;geometry&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ac25e8dbd64a3856d6689171eff4efa66</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a45821ed469c5b0e50991c961cfa5c7a1</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a546dab9ad55ee8ff19f014fd4bcd51d8</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop, const dictionary &amp;dict, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~geometry</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a1501b61d9cbfeb44a1a8b4296d9d2efe</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a61626d28ba7a75a00e366996bc67a9bb</anchor>
      <arglist>(geometry, systemControl,(systemControl &amp;control, const property &amp;prop),(control, prop))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>adbb907dea32f7c223cac730a70b1235c</anchor>
      <arglist>(geometry, dictionary,(systemControl &amp;control, const property &amp;prop, const dictionary &amp;dict, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName),(control, prop, dict, triSurface, motionCompName, propName))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a10efdf47ffedbdc720f71c2f72b98d98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>abb74207a2d63f7250901157fdb8a7e91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>numTriangles</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>af8b4cc518ac3e2a143decb528f10a89c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>points</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>acff90946de2621702b623aab94747a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>vertices</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>af5e159cf744342f304ad099482f86600</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getTriangleAccessor</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a87ba6f8c358a11dfd2b456d8e488f69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>surface</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a691cad8eccc36e64a7c3ffef7a031cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>surface</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a1be98d4bbe874c305c8598dc65253b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realx3TriSurfaceField_D &amp;</type>
      <name>contactForceWall</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a4de5a0898ba77379ce9da0b0de18805f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realx3TriSurfaceField_D &amp;</type>
      <name>contactForceWall</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a524d7584abddae26de48e39ac9522d7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>wallProperty</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a04eec391eaad167b22b2c0c28ac87a68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>aa8fb16eb3688ff1614ccfbdfc6272379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ad8cee1fa3a0b6bf22770cc4b44ca87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>path</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>af00b73c2f24f880c8f6c46918702401f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual word</type>
      <name>motionModelTypeName</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>aca4d470de05b9b43b7a27da45c6d7ec0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int8Vector_HD &amp;</type>
      <name>triMotionIndex</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a72d9184ff0b35a32888e7737ec9da298</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int8Vector_HD &amp;</type>
      <name>pointMotionIndex</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ab8202ea8d9e57fce1a7727d505a8c097</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const int8TriSurfaceField_D &amp;</type>
      <name>propertyId</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a283bb237e55fbf30c931eb4574cf0e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ada71b97666fe3f66b31690bf12633c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterIteration</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a5ab4b6c611c3256e54f51bbfc484d58e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ad48b7b943e88478c15879659cce7aebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; geometry &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>aa51dfdf2226a32f80d368186cae16e2b</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; geometry &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>af5d20d2e719097eb65b54156f2708097</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop, const dictionary &amp;dict, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findPropertyId</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ac1e82192333bcb3aeac1641a41a002f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>zeroForce</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>aee1fb957af9d737605b6e8701e6d14f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const property &amp;</type>
      <name>wallProperty_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a7aafd9ebf592394a9fab0ff0d8b9517e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository &amp;</type>
      <name>geometryRepository_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>ad2d3f68ad5a1b979ef26a689ec69e032</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>multiTriSurface &amp;</type>
      <name>triSurface_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a35bbaade8b00b35f758262aea8b816a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordField &amp;</type>
      <name>motionComponentName_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a215e85dcdcab552f632067ab3f1cb829</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordField &amp;</type>
      <name>materialName_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a28073d92f57130dd0934216923d03556</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8TriSurfaceField_D &amp;</type>
      <name>propertyId_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a184b6b49eae94722a5e34f195ac0df77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3TriSurfaceField_D &amp;</type>
      <name>contactForceWall_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>aeea83dc1105f12f46323b6d1657ed991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3TriSurfaceField_D &amp;</type>
      <name>stressWall_</name>
      <anchorfile>classpFlow_1_1geometry.html</anchorfile>
      <anchor>a781b9ac9e5dda4e44e4d37dc6c6d6d73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::geometryMotion</name>
    <filename>classpFlow_1_1geometryMotion.html</filename>
    <templarg>typename MotionModelType</templarg>
    <base>pFlow::geometry</base>
    <member kind="typedef">
      <type>MotionModelType</type>
      <name>MotionModel</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>aa9e07d97b52977c430296b2c3388a3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>af734451fe09f29bc73f088a1165cd9c8</anchor>
      <arglist>(&quot;geometry&quot;, MotionModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometryMotion</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>aadd6768683cbd8b10f793e2af30a2d11</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometryMotion</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a1d627b8ad6221788d08e9f36864e69dc</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName, const MotionModel &amp;motionModel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>geometryMotion</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>af26a65d569c0bec37e2d7c508446c186</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop, const dictionary &amp;dict, const multiTriSurface &amp;triSurface, const wordVector &amp;motionCompName, const wordVector &amp;propName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>aba2169cbf27fa162285c89ae00effd86</anchor>
      <arglist>(geometry, geometryMotion, systemControl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>ab29742cc7fc1c712e53db02bebb202db</anchor>
      <arglist>(geometry, geometryMotion, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getModel</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a732cf929502a91dd8ec6d2bf7b457ed1</anchor>
      <arglist>(real t) const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>motionModelTypeName</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a873dc8b9ece45d64a0643cc1cdc23f9d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const int8Vector_HD &amp;</type>
      <name>triMotionIndex</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a752f4b9ff00f776b44c4a7eafb354fc3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const int8Vector_HD &amp;</type>
      <name>pointMotionIndex</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a3a2b08ca853fe5ccb5e1b378295e042f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>ada71b97666fe3f66b31690bf12633c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterate</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>afa767bddda52eb71cea18f755e17d559</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterIteration</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a5ab4b6c611c3256e54f51bbfc484d58e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>moveGeometry</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a2a724ed55f42bb7cbfa076aaa5a4afe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findMotionIndex</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a22d1078b36a1ec1706a4a4837496889b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MotionModel &amp;</type>
      <name>motionModel_</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>ae26eb9566376b8f8f2ff892fa5b9cf38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector_HD</type>
      <name>motionIndex_</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>ad84c1814d97b2fa65caf25f1583836ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8Vector_HD</type>
      <name>triMotionIndex_</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a616962d07668bb8841579132c4192d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8Vector_HD</type>
      <name>pointMotionIndex_</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>ad334d2260702d0fc65031ab7349e7ce4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>moveGeomTimer_</name>
      <anchorfile>classpFlow_1_1geometryMotion.html</anchorfile>
      <anchor>a8b3558548f98d360765a7583a59a7cfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::algorithms::greater</name>
    <filename>structpFlow_1_1algorithms_1_1greater.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1algorithms_1_1greater.html</anchorfile>
      <anchor>afca043ab59c8cecec0be5b0c5837cf46</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::greaterThanEqOp</name>
    <filename>structpFlow_1_1greaterThanEqOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1greaterThanEqOp.html</anchorfile>
      <anchor>af456aa64072cd41ea6b1881e28a89a7f</anchor>
      <arglist>(&quot;greaterThanEq&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1greaterThanEqOp.html</anchorfile>
      <anchor>a0d60eb080f65e9375741f050031ad1f1</anchor>
      <arglist>(const T &amp;compVal, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::greaterThanOp</name>
    <filename>structpFlow_1_1greaterThanOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1greaterThanOp.html</anchorfile>
      <anchor>acc947d5e8d26ea88c1a0c5bb589ac9ef</anchor>
      <arglist>(&quot;greaterThan&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1greaterThanOp.html</anchorfile>
      <anchor>a0d60eb080f65e9375741f050031ad1f1</anchor>
      <arglist>(const T &amp;compVal, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::hashMap</name>
    <filename>classpFlow_1_1hashMap.html</filename>
    <templarg>class Key</templarg>
    <templarg>class T</templarg>
    <templarg>class Hash</templarg>
    <member kind="typedef">
      <type>hashMap&lt; Key, T, Hash &gt;</type>
      <name>hashMapType</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a491cd8d6428a151d1a622993486aa083</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unordered_map&lt; Key, T, Hash &gt;</type>
      <name>hashmapType</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a4c4a11f0b3f45430a0a8f36778bd5758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a71aee24bad6a6add6b26eaafb56c71b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::const_iterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>ae7fb59fc82e6a38b070d8c5baf6e3085</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a6246c84dfd5c5293f075c3448bc64e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::const_reference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a313c8d6dba69a409bee27287031bcdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::initializer_list&lt; T &gt;</type>
      <name>initList</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a6a8a2c26f8314992bb4ca80b6504f7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::key_type</type>
      <name>keyType</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a9299b11c33beadd0ebdb30b6d45a4cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::mapped_type</type>
      <name>mappedType</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>af8b2aecccb34293f92964b6872c7d873</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hashmapType::value_type</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>af9f2e59176f40e683a6ff88fe8c69775</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a3c7ab127bdb504e2029343e034fd096a</anchor>
      <arglist>(&quot;hashMap&quot;, Key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashMap</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>aab5779807da20837ded2f66a138440b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashMap</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a2a2b5ec455120a9554ca407010367a1e</anchor>
      <arglist>(initList lst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashMap</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>aa474e8d7b97dfc146b43c2da64c179cc</anchor>
      <arglist>(const hashMapType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hashMap</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a360669caa44b0eeb538ced8817368323</anchor>
      <arglist>(hashMapType &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>hashMapType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a71dba282864de8303152fc4046ef587a</anchor>
      <arglist>(const hashMapType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>hashMapType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>ac5d3d61d5d0c0b7e9f6f330dc94739bf</anchor>
      <arglist>(hashMapType &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; hashMapType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a98e63eb6b9c0a3e7a21b16f4b71ce2e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>hashMapType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>aca1e241bb9c81571188ba23b8715216c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~hashMap</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>aef59c53f236b4b3e9b7a3cf10fdbe558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertIf</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a9124a8fcf228c945283648e8ea27b4ee</anchor>
      <arglist>(const keyType &amp;k, const mappedType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertIf</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>af6bed5254ae7ffe8095707eb9b4320e6</anchor>
      <arglist>(keyType &amp;&amp;k, mappedType &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>search</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a40819b514a7a94b605efc48b79d18a94</anchor>
      <arglist>(const keyType k) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>findIf</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a0dd1151e9b36cecaac0608be87cecf52</anchor>
      <arglist>(const keyType &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; constIterator, bool &gt;</type>
      <name>findIf</name>
      <anchorfile>classpFlow_1_1hashMap.html</anchorfile>
      <anchor>a8bcf2e9f4f0a09394dd45d812deed011</anchor>
      <arglist>(const keyType &amp;k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::HostSide</name>
    <filename>classpFlow_1_1HostSide.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::iBox</name>
    <filename>classpFlow_1_1iBox.html</filename>
    <templarg>typename intType</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a659124b97a82c30d419af55cb266e8d8</anchor>
      <arglist>(&quot;iBox&quot;, intType)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ae9499b86a1343b94876b6d7d35721fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>abd298a61f04d61c7ba8bc267e81d66db</anchor>
      <arglist>(const triple&lt; intType &gt; &amp;minP, const triple&lt; intType &gt; &amp;maxP)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ab2d7e19e02ce00a10b1684c5eed8441a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>aa7fff19cac1a58f5846ababa9b4f6eb9</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a60a8a8e461afa4be238f0c48973d431d</anchor>
      <arglist>(const iBox &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a63b57fe7640f35fab48892fd48a0013b</anchor>
      <arglist>(iBox &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD iBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ae51bfd5c4bc0ef25ee443aa500bbe49d</anchor>
      <arglist>(const iBox &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD iBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a5cb41c44efec7f3cb1ded2384c4e5b0e</anchor>
      <arglist>(iBox &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~iBox</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ad796a7d95f5fbbb60a532fe06b9ec88a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>acd2bf1af18af116a0d710489223f46ff</anchor>
      <arglist>(const triple&lt; intType &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const triple&lt; intType &gt; &amp;</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a431d8275bf131d87d40967c04e2cd41a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const triple&lt; intType &gt; &amp;</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a920ea8c2d65fe606d3a8cab565e1a71d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>triple&lt; intType &gt;</type>
      <name>min_</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a9ee45a92a0d5fcfd2537b10cc602c15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>triple&lt; intType &gt;</type>
      <name>max_</name>
      <anchorfile>classpFlow_1_1iBox.html</anchorfile>
      <anchor>a8e9e08fd06bc533ec3029f18e544b354</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::iEntry</name>
    <filename>classpFlow_1_1iEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a5317c146866ff850f4644b839d6aa241</anchor>
      <arglist>(&quot;iEntry&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iEntry</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a57eb355bec2bed42f50a52f950e791cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iEntry</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a30a41178e219d1c64b3de665f619efb9</anchor>
      <arglist>(const word &amp;key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iEntry</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>aa52ecdf0ca86efbc18ab7299fd01ca9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const word &amp;</type>
      <name>keyword</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>afc2aa522a75215c221a897f5d5713b55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word &amp;</type>
      <name>keyword</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>ac66ed44c3881a3fd32a3948cdc266b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual word</type>
      <name>globalName</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>abca01eb1ed0463a6be67601f31810220</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>ac411cc06a1789dd7d7ebd983a6835ea9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const dictionary *</type>
      <name>dictPtr</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a3270ae69d703baef27731c8ae0ff7e47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDictionary</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>ae3d50a8c753a4a6454f2b85613857bbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const dictionary &amp;</type>
      <name>parrentDict</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a2cff62443211da068cef97aa18c2ad68</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a7eef37542388d807434691c3d3946f39</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const dictionary &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>acad14e227ff6fd8be86f91025e6ac382</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>ae64c70e7a9f07a678a8b9b13303bca44</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>aa96f526b81775c19cd792a94c56ea79f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iEntry *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a36faef89af5eaeb2867968ea104eebb4</anchor>
      <arglist>(const dictionary &amp;parDict) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uniquePtr&lt; iEntry &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a5621ff036f527831254107866a590724</anchor>
      <arglist>(const dictionary &amp;parDict) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a70add3b10fc1217ec5b9f30d261bda27</anchor>
      <arglist>(iIstream &amp;is)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>afa17f5989b1af05e5ed08234f217a59c</anchor>
      <arglist>(iOstream &amp;os) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>readKeyword</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>adaf3255a26893f538d0e891e77d0d6c7</anchor>
      <arglist>(iIstream &amp;is, word &amp;keyword, token &amp;tok)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>createEntry</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a133f34e170bc1f28e7439fe87043ce2f</anchor>
      <arglist>(dictionary &amp;parDict, iIstream &amp;is, bool hasBlockToken=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeKeyword</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>a41b87eb2ffa631b3685fed7694f2c7ed</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>keyword_</name>
      <anchorfile>classpFlow_1_1iEntry.html</anchorfile>
      <anchor>ad81489d7813a3c0e2d9219cb6f40be52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::iFstream</name>
    <filename>classpFlow_1_1iFstream.html</filename>
    <base>pFlow::fileStream</base>
    <base>pFlow::Istream</base>
    <member kind="function">
      <type></type>
      <name>iFstream</name>
      <anchorfile>classpFlow_1_1iFstream.html</anchorfile>
      <anchor>a145f81c90956fa0b8c9f2e695955407e</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iFstream</name>
      <anchorfile>classpFlow_1_1iFstream.html</anchorfile>
      <anchor>a5dbc45cb2b9c2ef4862b861ce7756a9a</anchor>
      <arglist>(const iFstream &amp;src)=delete</arglist>
    </member>
    <member kind="function">
      <type>iFstream &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iFstream.html</anchorfile>
      <anchor>a1f78e033fe5272968d1577208ee76e03</anchor>
      <arglist>(const iFstream &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iFstream</name>
      <anchorfile>classpFlow_1_1iFstream.html</anchorfile>
      <anchor>a1bd497f969d87155b8dd9c3bc4c8520a</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::iIstream</name>
    <filename>classpFlow_1_1iIstream.html</filename>
    <base>pFlow::IOstream</base>
    <member kind="function">
      <type></type>
      <name>iIstream</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a491a667af35a18f38b195789371e340b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iIstream</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aeb259a4f962ddef4d3f0ee6291c011d2</anchor>
      <arglist>(const iIstream &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iIstream</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a7d655d719335af32c3bfd785add8fef5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putBack</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aeecefbf648ad32c20134e67c4fa35597</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBack</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a2fa0de349bf86cba54424c4a512e1e49</anchor>
      <arglist>(token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>peekBack</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a0b2651d76dbb5d411250017f8fbe1649</anchor>
      <arglist>(token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetPutBack</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a13fa5dc14b25a1e1414e26d4d6473c7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a32d4ae73dad73a3706e2b3426e03a5f6</anchor>
      <arglist>(token &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aec511b6042e22c1e4b02ba65c26665a7</anchor>
      <arglist>(char &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a808573c75074cfda94d1f1b88daedfdd</anchor>
      <arglist>(word &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>readString</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a496800408ec3401b4acff4b1a53351ff</anchor>
      <arglist>(word &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a28dafaef6c77c0546c3520aa69c77b94</anchor>
      <arglist>(int64 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aad67521a6638a46e8d20552a4cd6ad9c</anchor>
      <arglist>(int32 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a5c4cba0bcab2a90bf5343c01050f6aff</anchor>
      <arglist>(int16 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a64379ecd23b05adf0ec4141dffa1a1e1</anchor>
      <arglist>(int8 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a7d0813f4a5800101d9fa4c207ad59251</anchor>
      <arglist>(label &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a1a5c10f98a688235167801a09448b5ae</anchor>
      <arglist>(uint32 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>acb5f0497834917a3b096c316395a4d8a</anchor>
      <arglist>(uint16 &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>af9f456b7df39210a36e99914f87a926e</anchor>
      <arglist>(float &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a652b2b9c8d8fb7ffdb01a028af03c510</anchor>
      <arglist>(double &amp;)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rewind</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>acbf88ac063eb4598338671e603f36332</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findToken</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a5f238bd4e73ce3b43b8a737a8f30ab78</anchor>
      <arglist>(const word &amp;w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findTokenSilent</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a6492693f26c93565e98d42c8eae7b902</anchor>
      <arglist>(const word &amp;w, int32 limitLine=100)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findTokenAndNext</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a734799e36d009aecd57d246eb3aeb421</anchor>
      <arglist>(const word &amp;w, word &amp;nextW, bool checkEndStatement=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>findTokenAndNextSilent</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>ae74a624bbb0665ed381b67cbda681031</anchor>
      <arglist>(const word &amp;w, word &amp;nextW, int32 limitLine=100)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findKeywordAndVal</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>afb1243cec5833e96e8446abed4e3656c</anchor>
      <arglist>(const word &amp;keyword, T &amp;val, bool checkEndStatement=true)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lookupData</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a214b65eedf74268aed639e4d9b36fe08</anchor>
      <arglist>(const word &amp;keyword)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lookupDataOrSet</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a6b741dd8443f554f5de5b98897f2eb77</anchor>
      <arglist>(const word &amp;keyword, const T &amp;setVal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nextData</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a2240995351ba90efed8943099847069e</anchor>
      <arglist>(const word &amp;keyword, T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBegin</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aecfc9cc0a499c7d44de6a7562bcfea3f</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEnd</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a8d82c951160ac1444ee2a2d9ae1ecb11</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBeginSquare</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a82106c627eb5a496726f0829a62e38bb</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readEndSquare</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a17598aa2666f2552b651085a5c6dfb23</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readBeginList</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>adb9b1a5ac1aacc94b9998439303acfa7</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readEndList</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a3fbb1d26a1c975ed5be8df0056c863dd</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>readEndStatement</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>aca8c209dd4920ea633336742d8a874e0</anchor>
      <arglist>(const char *funcName)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>ac40c323341736604b5bf6a67f39bce85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>bool</type>
      <name>putBack_</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>afd40ff1d1c90dafaef1e905997b197c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>token</type>
      <name>putBackToken_</name>
      <anchorfile>classpFlow_1_1iIstream.html</anchorfile>
      <anchor>a43def3417e296e9f41ef52206eb2d54b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::includeMask</name>
    <filename>classpFlow_1_1includeMask.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a68b501eeb8345be33aa1d6ebd7933eb5</anchor>
      <arglist>(&quot;includeMask&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>includeMask</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a70bbe45140906680c8e4a0041fdcd6cb</anchor>
      <arglist>(const dictionary &amp;dict, const word &amp;opType, readFromTimeFolder &amp;timeFolder)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~includeMask</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>ab2bd1a75721c3189b5e52590e5fdb948</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>ac8dc126e97da735936f890b077612f52</anchor>
      <arglist>(includeMask, dictionary,(const dictionary &amp;dict, const word &amp;opType, readFromTimeFolder &amp;timeFolder),(dict, opType, timeFolder))</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>fieldName</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>ac4481cd842be39c13e6a725d8a1ec0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>fieldType</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>ac5511b70b9508ac76e6ccf5dfa6771a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>operatorType</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a360295877cf6a9d51a73406b897fa64d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>timeFolder</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a1eecd18366e72131de590976c1af6df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isIncluded</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a5a10e8220d7eafbc617b1b1614cc4994</anchor>
      <arglist>(int32 n) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a84a44bb3dbfa00e7c5ae635b1eb1bd9e</anchor>
      <arglist>(int32 n) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; includeMask &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a2d6fa293e543267f3139df717b643ca9</anchor>
      <arglist>(const dictionary &amp;dict, const word &amp;opType, readFromTimeFolder &amp;timeFolder)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>getFieldType</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>ac79c0ce5bab11b4b49996bc8f642d295</anchor>
      <arglist>(const dictionary &amp;dict, readFromTimeFolder &amp;timeFolder, word &amp;fName, word &amp;fType)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>fieldName_</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a84505e826985ad10d53f4063d43128ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>fieldType_</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a885fb6d2cc1add5cb4edb4acf05e0485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>operatorType_</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a97a35203fea8b2d860cac627e9305914</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>readFromTimeFolder &amp;</type>
      <name>timeFolder_</name>
      <anchorfile>classpFlow_1_1includeMask.html</anchorfile>
      <anchor>a386c1f96fff1ed15624e9d6a80149173</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IncludeMask</name>
    <filename>classpFlow_1_1IncludeMask.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Operator</templarg>
    <base>pFlow::includeMask</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate2</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>a987babac16091c970f2cc833d91b3323</anchor>
      <arglist>(&quot;IncludeMask&quot;, T, Operator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncludeMask</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>a7f679d1acbad477b836fa28c7290d7d5</anchor>
      <arglist>(const dictionary &amp;dict, const word &amp;opType, readFromTimeFolder &amp;timeFolder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>a32e97523f38d476c86349e806ba3263d</anchor>
      <arglist>(includeMask, IncludeMask, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIncluded</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>a521bdd7b143fd354716eb8dd62d5cf95</anchor>
      <arglist>(int32 n) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Operator</type>
      <name>operator_</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>a7a783a4ad2478110c9c7903ee1895d35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pointField_H&lt; T &gt;</type>
      <name>field_</name>
      <anchorfile>classpFlow_1_1IncludeMask.html</anchorfile>
      <anchor>aa7484adb662fefbf7a44511753787f13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IncludeMask&lt; T, allOp&lt; T &gt; &gt;</name>
    <filename>classpFlow_1_1IncludeMask_3_01T_00_01allOp_3_01T_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <base>pFlow::includeMask</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate2</name>
      <anchorfile>classpFlow_1_1IncludeMask_3_01T_00_01allOp_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a2783154c0fb1eb6dd6ec1ac878580ef7</anchor>
      <arglist>(&quot;IncludeMask&quot;, T, allOp&lt; int8 &gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncludeMask</name>
      <anchorfile>classpFlow_1_1IncludeMask_3_01T_00_01allOp_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a7f679d1acbad477b836fa28c7290d7d5</anchor>
      <arglist>(const dictionary &amp;dict, const word &amp;opType, readFromTimeFolder &amp;timeFolder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1IncludeMask_3_01T_00_01allOp_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a32e97523f38d476c86349e806ba3263d</anchor>
      <arglist>(includeMask, IncludeMask, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIncluded</name>
      <anchorfile>classpFlow_1_1IncludeMask_3_01T_00_01allOp_3_01T_01_4_01_4.html</anchorfile>
      <anchor>a521bdd7b143fd354716eb8dd62d5cf95</anchor>
      <arglist>(int32 n) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::indexContainer::IndexAccessor</name>
    <filename>classpFlow_1_1indexContainer_1_1IndexAccessor.html</filename>
    <templarg>typename ViewType</templarg>
    <member kind="function">
      <type></type>
      <name>IndexAccessor</name>
      <anchorfile>classpFlow_1_1indexContainer_1_1IndexAccessor.html</anchorfile>
      <anchor>a351934fde32badb19e21dab839d7fc3d</anchor>
      <arglist>(ViewType v)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD IndexType</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1indexContainer_1_1IndexAccessor.html</anchorfile>
      <anchor>a4057f2d865ef535c3cfdc7591b68c396</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType</type>
      <name>view_</name>
      <anchorfile>classpFlow_1_1indexContainer_1_1IndexAccessor.html</anchorfile>
      <anchor>ab70db270f1fd70ba39084a449b29bbd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::indexContainer</name>
    <filename>classpFlow_1_1indexContainer.html</filename>
    <templarg>typename IndexType</templarg>
    <class kind="class">pFlow::indexContainer::IndexAccessor</class>
    <member kind="typedef">
      <type>Kokkos::DualView&lt; IndexType * &gt;</type>
      <name>DualViewType</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>ac16302a81f0d7c1ce7e41edd798fc9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename DualViewType::t_dev</type>
      <name>DeviceViewType</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a5e8c0e0e7c8466a94fcc66eef8c12b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename DualViewType::t_host</type>
      <name>HostViewType</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a56dacd6fb9a2da1919e8dc155a5e2b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>indexContainer</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>ae7c043057ecdd004f61d780acebcc58e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>indexContainer</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a1adfb266809541cd795990a522817429</anchor>
      <arglist>(IndexType begin, IndexType end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>indexContainer</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a15e46ceffd1d4f18c390a090e6000971</anchor>
      <arglist>(IndexType *data, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>indexContainer</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>addeb28c36f98f790c129cb67a66ae2e1</anchor>
      <arglist>(const indexContainer &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>indexContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a1b96437a270b10f9696b614d95cc524d</anchor>
      <arglist>(const indexContainer &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~indexContainer</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a02d71b92d2c27de91b53d7877b704127</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a7bb1be8d14aca7330e90c5b60493061b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD size_t</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a357c86d427ba736b27fbfab57197ed64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD IndexType</type>
      <name>min</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>afc62db27358117c2848f2a40034d9c76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD IndexType</type>
      <name>max</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a21012fa7fe940b14c018bbd241eda750</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD IndexType</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a880710c6f5ffae88c7e0baf24d7929c9</anchor>
      <arglist>(selectSide&lt; executionSpace &gt;, int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>const HostViewType &amp;</type>
      <name>hostView</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a1dd2538bb4650a64a5d8f7487bf5aa65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DeviceViewType &amp;</type>
      <name>deviceView</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a84ac3b09ce43a6ffcbfa53f98cd3a57a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>indicesHost</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>afc2c6b6e3530d1a891d4b2e94b94ff0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>indicesDevice</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a841cfe71aab271b7dcaf54f932f25178</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>min_</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a92e0ba7ef23e87944d17c213fa2dbc0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>max_</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a138d93a14ab42323cc70f74a817f5993</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a5f31775800bbb46b35b5791def1f3acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DualViewType</type>
      <name>views_</name>
      <anchorfile>classpFlow_1_1indexContainer.html</anchorfile>
      <anchor>a3740b5bc130288c0eaa990e972b4080d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::insertion</name>
    <filename>classpFlow_1_1insertion.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>aea02534373c01c4a30b461eca70bb011</anchor>
      <arglist>(&quot;insertion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>insertion</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a16ace43248b6bd6c1ba20e56f8e785e8</anchor>
      <arglist>(particles &amp;prtcl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~insertion</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>ad7eb8b19eee60b58b8438701e71c4cfc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a354c7d206ec624b9bdbb81f3b788f826</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a70add3b10fc1217ec5b9f30d261bda27</anchor>
      <arglist>(iIstream &amp;is)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>afa17f5989b1af05e5ed08234f217a59c</anchor>
      <arglist>(iOstream &amp;os) const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readInsertionDict</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a43b207ca2a0b2f0b1aedd32b0888b512</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeInsertionDict</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a0a48f031a06d7bb9bbf6db921501e4b3</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>active_</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>ab4b9b810dce908775f2dcb12e77ff4ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>checkForCollision_</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>a57b82829710afa1fd6045b8e16f646bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>particles &amp;</type>
      <name>particles_</name>
      <anchorfile>classpFlow_1_1insertion.html</anchorfile>
      <anchor>ad8ad379b9c7750208abd8b9aa6f54ad0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Insertion</name>
    <filename>classpFlow_1_1Insertion.html</filename>
    <templarg>typename ShapeType</templarg>
    <base>pFlow::insertion</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>ad6c9b30b9f4da31b01f881f58d9e0f8d</anchor>
      <arglist>(&quot;Insertion&quot;, ShapeType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Insertion</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a512dad8922caa0f17a2d075fe433e158</anchor>
      <arglist>(particles &amp;prtcl, const ShapeType &amp;shapes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Insertion</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a3f9338a5d0ba121e46363bdeccbc3904</anchor>
      <arglist>(fileSystem file, particles &amp;prtcl, const ShapeType &amp;shapes)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertParticles</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>ade7faca5a778c285e00c20175e9c3815</anchor>
      <arglist>(real currentTime, real dt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a8148f2b6c694e069c67183105cf17ce4</anchor>
      <arglist>(iIstream &amp;is) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>aac753ee6ead0ddcdfb9e74f169c6bcec</anchor>
      <arglist>(iOstream &amp;os) const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readInsertionDict</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a43b207ca2a0b2f0b1aedd32b0888b512</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeInsertionDict</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a0a48f031a06d7bb9bbf6db921501e4b3</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ShapeType &amp;</type>
      <name>shapes_</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>a2930483c30fb6c335a8a9a70b485f0fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListPtr&lt; InsertionRegion&lt; ShapeType &gt; &gt;</type>
      <name>regions_</name>
      <anchorfile>classpFlow_1_1Insertion.html</anchorfile>
      <anchor>ace531f6d9ebaa933bd37f79f89ec76c2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::insertionRegion</name>
    <filename>classpFlow_1_1insertionRegion.html</filename>
    <base>pFlow::timeFlowControl</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a2f6fa523f8b578780851796118cd1339</anchor>
      <arglist>(&quot;insertionRegion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>insertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a6a584c29486dcdcffe29aad303313bf2</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>insertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>aa88946badc7fec0a74d87e12c3af96c5</anchor>
      <arglist>(const insertionRegion &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>insertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a1d3747d5b6da01d087026ed3b36d7b51</anchor>
      <arglist>(insertionRegion &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>insertionRegion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>afa380e4b94afa07580a93e670ee73488</anchor>
      <arglist>(const insertionRegion &amp;)</arglist>
    </member>
    <member kind="function">
      <type>insertionRegion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a308ab075212f8fddb86de4880f5adcc2</anchor>
      <arglist>(insertionRegion &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~insertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>ad3cf9dd715e172184050bd4b4a5a6051</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>setFields</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a7dc0ad2c77c665956a2d5355fec53dda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a109193c13fbc7691e3aed4d47119330d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readInsertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>adcd85aab41f3f4715afb2d17e5f8d53d</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeInsertionRegion</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>aa364cd422ed5085c750de4a19a321f7f</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>type_</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>addee41d6ac047acd59c85e776d4e6fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; peakableRegion &gt;</type>
      <name>pRegion_</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>af5c2a2fe246051f18b23a3fd1bf23249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; shapeMixture &gt;</type>
      <name>mixture_</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a4d3dfef53630882b1fe95583bd46d4c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; setFieldList &gt;</type>
      <name>setFields_</name>
      <anchorfile>classpFlow_1_1insertionRegion.html</anchorfile>
      <anchor>a1669e69306d7e94fa98270dfa5a024cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::InsertionRegion</name>
    <filename>classpFlow_1_1InsertionRegion.html</filename>
    <templarg>typename ShapeType</templarg>
    <base>pFlow::insertionRegion</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a61a91dc0a6702ccc073c635c6c8cfbb8</anchor>
      <arglist>(&quot;insertionRegion&quot;, ShapeType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InsertionRegion</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a1bb3e9d2da5b4a5c9c9f09b1304be566</anchor>
      <arglist>(const dictionary &amp;dict, const ShapeType &amp;shapes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InsertionRegion</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>adf4ca3a49e4b5294e52f42c0c9291a2d</anchor>
      <arglist>(const InsertionRegion&lt; ShapeType &gt; &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InsertionRegion</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>ad6955fe0e1f275d2b382fd7fdc887a0d</anchor>
      <arglist>(InsertionRegion&lt; ShapeType &gt; &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>InsertionRegion&lt; ShapeType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a49d33d42e913ba273c5f0eb1f7c4c5db</anchor>
      <arglist>(const InsertionRegion&lt; ShapeType &gt; &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>InsertionRegion&lt; ShapeType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a5e6f0bf9ddbf0faf680bebda17aea00b</anchor>
      <arglist>(InsertionRegion&lt; ShapeType &gt; &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>acc863d85d662202ba8b08e691372887b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a29ec0c24a53d9f0f38289002f302848e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertParticles</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a7aca664f39c4a6e73d6666a36ad687ce</anchor>
      <arglist>(real currentTime, real dt, wordVector &amp;names, realx3Vector &amp;pos, bool &amp;insertionOccured)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>checkForContact</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a7e637e102a6242c3b999828e73d0ea1c</anchor>
      <arglist>(const realx3Vector &amp;pos, const realVector &amp;diams, const realx3 &amp;p, const real &amp;d)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ShapeType &amp;</type>
      <name>shapes_</name>
      <anchorfile>classpFlow_1_1InsertionRegion.html</anchorfile>
      <anchor>a2930483c30fb6c335a8a9a70b485f0fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::integration</name>
    <filename>classpFlow_1_1integration.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>aa44247873627282e4f01578c6bc53426</anchor>
      <arglist>(&quot;integration&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>integration</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>ad1193beca9b8485866c972ed9faea6d5</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~integration</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a9a87be54ea9981257a8149088723c433</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a23da7cbc93e6d9968fcbe57cb08f78f3</anchor>
      <arglist>(integration, word,(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method),(baseName, owner, pStruct, method))</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>ae7e78c902046f401afebcacdf5a647e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>predict</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>aee7d33216d5d180758eae4342235822d</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>correct</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a24e7a2413d17e739a6fa143b18346f02</anchor>
      <arglist>(real dt, realx3Vector_D &amp;y, realx3Vector_D &amp;dy)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setInitialVals</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a6818fcc44008244dcd95c07d9df760fc</anchor>
      <arglist>(const int32IndexContainer &amp;newIndices, const realx3Vector &amp;y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>needSetInitialVals</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>aeec9758e3ff149eb4837c2be8d4e6214</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uniquePtr&lt; integration &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a158b76fa93f440fd155902876e25f76a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>baseName</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>ae2e829e73d768c8c0760bd73aac39536</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>ad8cee1fa3a0b6bf22770cc4b44ca87f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; integration &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>abdb160904a366a4bf1704ceb1746775a</anchor>
      <arglist>(const word &amp;baseName, repository &amp;owner, const pointStructure &amp;pStruct, const word &amp;method)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository &amp;</type>
      <name>owner_</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>af892b00fd39b71350cc908cd0e608264</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>baseName_</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>aa4cf93fd25765a9c0816f3ace4e3b009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const pointStructure &amp;</type>
      <name>pStruct_</name>
      <anchorfile>classpFlow_1_1integration.html</anchorfile>
      <anchor>a5c62d7bde0e3c333317fabe4b8806bef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::interaction</name>
    <filename>classpFlow_1_1interaction.html</filename>
    <base>pFlow::demInteraction</base>
    <base>pFlow::eventObserver</base>
    <base>pFlow::interactionBase</base>
    <member kind="typedef">
      <type>typename interactionBase::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a3af07639d0071df31d0741a89d85ea76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interactionBase::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a4876646545c04fef726061070b4e9a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interactionBase::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a18d3281d135de549b69af821b3fef223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a3461578f76960920a84ae538b6ba5678</anchor>
      <arglist>(&quot;interaction&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interaction</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a294c1c45a208f3c389bfba81e904686f</anchor>
      <arglist>(systemControl &amp;control, const particles &amp;prtcl, const geometry &amp;geom)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~interaction</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a1dac41149a6513066b16227dd1a7219d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>aeca8feeb170582d6f6e70ace5bfa4b39</anchor>
      <arglist>(interaction, systemControl,(systemControl &amp;control, const particles &amp;prtcl, const geometry &amp;geom),(control, prtcl, geom))</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>contactSearchPtr</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>af16062516002f88530dd48eae83d01b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>contactSearchRef</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a2b4be238562877d51aa0085b71f6fc49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>fileDict</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a13bad281b9f33b5875304d6510b2279c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; interaction &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a4719440c5da75bf4bc6776501d106bf9</anchor>
      <arglist>(systemControl &amp;control, const particles &amp;prtcl, const geometry &amp;geom)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary &amp;</type>
      <name>fileDict_</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>ac2723a135fbf65195efce62aea6ef03d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; contactSearch &gt;</type>
      <name>contactSearch_</name>
      <anchorfile>classpFlow_1_1interaction.html</anchorfile>
      <anchor>a8c210b9197467ebb4878ea56cb1d3270</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::interactionBase</name>
    <filename>classpFlow_1_1interactionBase.html</filename>
    <member kind="typedef">
      <type>CELL_INDEX_TYPE</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>a6078531b253c79950378ee57fad9698c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ID_TYPE</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>ac05133d7ee454c11b6e7452ea273a5b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>aafbc6c11862daeac07d73494aa73377a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>interactionBase</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>a1c2dab8f1a1994726c11acb940e1c94f</anchor>
      <arglist>(const particles &amp;prtcl, const geometry &amp;geom)</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>ae7e78c902046f401afebcacdf5a647e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>surface</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>a1be98d4bbe874c305c8598dc65253b14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>Particles</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>a9a159bd3c20ec93f4a2eb87e113f4337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>Geometry</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>ae688ed846bdd519145a9e2240e80ad96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const particles &amp;</type>
      <name>particles_</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>aa9c6fe00ccb69057bc113796f134b81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const geometry &amp;</type>
      <name>geometry_</name>
      <anchorfile>classpFlow_1_1interactionBase.html</anchorfile>
      <anchor>a0ca39596f183e9a3ac8974cdb9a99921</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::intervalRange</name>
    <filename>classpFlow_1_1intervalRange.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a79125bf5832cdbb40b4c88542009c042</anchor>
      <arglist>(&quot;intervalRange&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>intervalRange</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>ac1e7c3fc2d25d4799611f05f3e84728f</anchor>
      <arglist>(T begin, T end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>intervalRange</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a9b46a02bd78c55579b31768abe0b5081</anchor>
      <arglist>(T beginEnd, bool openEnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>intervalRange</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>ae8dcd038c69080bc2dbba983c701eb6a</anchor>
      <arglist>(const word &amp;rangeString)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a5a3c06690014c015f02ad827514b8954</anchor>
      <arglist>(T val) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseRange</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a7ac715f3b53f18c60bd73169fe9be2bc</anchor>
      <arglist>(const word &amp;rangeString, T &amp;begin, T &amp;end)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>begin_</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>ad543e853981e56c8ae28a8b8b8ca01ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>end_</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a2c7d06a54745697d21bed0107ce26432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const T</type>
      <name>maxVal</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>afda6cc7253daf42d2e083c4232237ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const T</type>
      <name>minVal</name>
      <anchorfile>classpFlow_1_1intervalRange.html</anchorfile>
      <anchor>a9232c7f0c9938e0d3d5dbeaeb4521e5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IOobject::iObject</name>
    <filename>classpFlow_1_1IOobject_1_1iObject.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iObject</name>
      <anchorfile>classpFlow_1_1IOobject_1_1iObject.html</anchorfile>
      <anchor>a0f45fd6684c1173e7de3d344a35f9967</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uniquePtr&lt; iObject &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1IOobject_1_1iObject.html</anchorfile>
      <anchor>abb5dbd5c7825d0771540e00135ef7a61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual word</type>
      <name>typeName</name>
      <anchorfile>classpFlow_1_1IOobject_1_1iObject.html</anchorfile>
      <anchor>a9521838a2604fc381c2b4d8227615246</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read_object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1iObject.html</anchorfile>
      <anchor>a8165d6de31ac20289519d262720b3dea</anchor>
      <arglist>(iIstream &amp;is)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write_object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1iObject.html</anchorfile>
      <anchor>acf2f75d89144d08deff2a16d5eccfbfa</anchor>
      <arglist>(iOstream &amp;os) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IOfileHeader</name>
    <filename>classpFlow_1_1IOfileHeader.html</filename>
    <base>pFlow::objectFile</base>
    <member kind="function">
      <type></type>
      <name>IOfileHeader</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>aeb8db62c8360b96bf8aa002da3f6085d</anchor>
      <arglist>(const objectFile &amp;objf, const repository *owner=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>objectName</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a7d2c1316ea78834c022c5db54d316e2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>objectType</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>ae6affb08abe9199b18dd9896046247cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const repository *</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a0202773a37e762d7435418725da6368f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>path</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>ae1921a7f20c43d1438221946e607c488</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>headerOk</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a1a248aa0488b774d5160449992ad31e5</anchor>
      <arglist>(bool silent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>implyRead</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>aac13e923e67df5e79d9a75f592b97da3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>implyWrite</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>adfb03998f9b3b981631dc794cffd05a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fileExist</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>ac38363de350016ce974d10db7d4d0753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readIfPresent</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>aad1bd18bfebe1913d2b10785c0aff822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeHeader</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>aa4249f7a47b0674a7697f67fff575591</anchor>
      <arglist>(iOstream &amp;os, const word &amp;typeName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeHeader</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>ad9e20c6f6c7394efbb5ce993cf2936e0</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readHeader</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>ad3e735fcc23f3717d149728c03f5074a</anchor>
      <arglist>(iIstream &amp;is, bool silent=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeBanner</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a935aedcbc2d9fc4e32646d718eaec1f4</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeSeparator</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a7724614a5d68ca0d55beead4b79f6051</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uniquePtr&lt; iFstream &gt;</type>
      <name>inStream</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a770eebd1866493c91efe18ab806d9568</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>uniquePtr&lt; oFstream &gt;</type>
      <name>outStream</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>aadf02aad5ab9dd4c10306e74510f4dd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const repository *</type>
      <name>owner_</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a7bb1f0bd1b5e54b7983dfafe4270b6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>objectName_</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>a0fc09585fc6fa997b81807dff8b8236d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>objectType_</name>
      <anchorfile>classpFlow_1_1IOfileHeader.html</anchorfile>
      <anchor>adf7afc3ea2cc179930f4e4f4ca48797c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IOobject</name>
    <filename>classpFlow_1_1IOobject.html</filename>
    <base>pFlow::IOfileHeader</base>
    <class kind="class">pFlow::IOobject::iObject</class>
    <class kind="class">pFlow::IOobject::object_t</class>
    <member kind="function">
      <type>word</type>
      <name>typeName</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>ac8499eaa33318f1ef132c1f57350cbcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOobject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a0abd37e236ec0ec02221cb77c95d7867</anchor>
      <arglist>(const objectFile &amp;objf, const repository *owner, uniquePtr&lt; iObject &gt; &amp;&amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOobject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>af6de7f3d4377de48e5ca06dcab4b8586</anchor>
      <arglist>(const objectFile &amp;objf, const repository *owner, uniquePtr&lt; IOobject &gt; &amp;&amp;obj)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOobject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a387f9719028f6a7a4b72dbeccdae8e48</anchor>
      <arglist>(const IOobject &amp;src)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOobject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a20e92d3a2493ba9a0543769843137e2d</anchor>
      <arglist>(IOobject &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObjectValid</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a81d6c99fb880c7d7e7c7d4bd107a71bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>getObject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a4cb27dedd5c3df0ca20847c584620480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>getObject</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a0d8c1b9b6f6dd3ab7b3160e95bea32af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a475cf52d5a2d15f82e180529de008fd3</anchor>
      <arglist>(bool rdHdr=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>ad48b7b943e88478c15879659cce7aebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>af5f483943f4316eef8c34efa82abe4be</anchor>
      <arglist>(iIstream &amp;is, bool rdHdr=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>make</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a551af023d7a59f86fffbc8e11f6d6951</anchor>
      <arglist>(const objectFile &amp;objf, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>make_object_t</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a867630ace346abb1f23b7be70690b435</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; iObject &gt;</type>
      <name>object_</name>
      <anchorfile>classpFlow_1_1IOobject.html</anchorfile>
      <anchor>a175d7232fbc4ea640c3dbe9c0aff17a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::iOstream</name>
    <filename>classpFlow_1_1iOstream.html</filename>
    <base>pFlow::IOstream</base>
    <member kind="function">
      <type></type>
      <name>iOstream</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a23526bd51aa20b0822272995e8db1cbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iOstream</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ac0ba482c100b36424e389a81168c2e56</anchor>
      <arglist>(const iOstream &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iOstream</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ab55acff18b8c2779c835f2b6205742c1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a8da7514808d6493ccfd30582fc945aa1</anchor>
      <arglist>(const token &amp;tok)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a677dff4845cb5089e50f58cc8513b939</anchor>
      <arglist>(const char c)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ad689b669dd4ad8d22dbd30adf7fb70a3</anchor>
      <arglist>(const char *str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>af14133fa960ca7eb46a6815fd66223a8</anchor>
      <arglist>(const word &amp;str)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>writeQuoted</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>aa795791c788cd58ecf6034fcb8e4e680</anchor>
      <arglist>(const word &amp;str, const bool quoted=true)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>af83e347bb109084930e5bf2f71a03615</anchor>
      <arglist>(const int64 val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a0cd15c518e83e1323ce6572013dbfc10</anchor>
      <arglist>(const int32 val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a7a1f9548cfa7213cb7ab1b136d2a5c24</anchor>
      <arglist>(const label val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>afee1e54a8deef4e6a32d4ee741120ef0</anchor>
      <arglist>(const uint32 val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a784c3e519c4668a56c69cb61323bf4d0</anchor>
      <arglist>(const uint16 val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>abf18cdf8cbc62b017d26b04470a12f99</anchor>
      <arglist>(const float val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a121ec5f38d5e60f9cad34b7ed9bd7d33</anchor>
      <arglist>(const double val)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>indent</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a6f9f89f73f75f7dec4546766148b60d7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>indentSize</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a50fd431a605cc8733cff59aa38561ac6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short &amp;</type>
      <name>indentSize</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ab11a0b856c8334c143cc613857b2afaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned short</type>
      <name>indentLevel</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a67e8e9a697d0918583e4b21a4607c964</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned short &amp;</type>
      <name>indentLevel</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a54e0554b1812ff4456fdf1a38a6056fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrIndent</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a79a5f541a96c769ad3b3bf66aff49115</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrIndent</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ae18e78f7ce58c60f648722fd7f8bdcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginBlock</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ab440fa44645864fa1f9595b19d77bed0</anchor>
      <arglist>(const word &amp;kw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginBlock</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>aeb38275dc0471cbc5f14ba380df1e0ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>endBlock</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a1850a128366512b2539de09dc0622358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginList</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a1c568592efaca699bbebbf34960a5b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginList</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a2129fe0304cab5987f6a4db12dcfaa2c</anchor>
      <arglist>(const word &amp;kw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>endList</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a7b8a8d645b92f6f46a2a4319de8cd6a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginSquare</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a05e38ce82900bb8c51d86ae214898e2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>beginSquare</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ab7fde8e534b51edb398e180ea97215c3</anchor>
      <arglist>(const word &amp;kw)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>endSquare</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a63bdc1079581492459ced30d6e523d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>endEntry</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a2ddd99bc2797e644b86f74dd1c176f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>newLine</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a577f32ec301e562d6a205c6bd15fc005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>space</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>adab69c3b447db5491b3b7e2a6e1c39a7</anchor>
      <arglist>(int32 n=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>writeWordKeyword</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>af746580dedb817d31f5060ee684b9543</anchor>
      <arglist>(const word &amp;kw)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>writeWordEntry</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a87028e1f516fd39e688e4ac68fdb2e95</anchor>
      <arglist>(const word &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endl</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a83faa3c12024b2e49e8c7c712d7c96f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a48bfc022814fde9f078fd43a0824904b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a155bede14108e5cd94032e0840c93053</anchor>
      <arglist>(const char fillch)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a8d1d1bfe5ed13f36f809f443a8107215</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a8e70826ca9f5a81f878bdd780fc87304</anchor>
      <arglist>(const int w)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a79148b1315843f58a63a1a13edea0389</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>ae25bb32775145887697b544876ba63cc</anchor>
      <arglist>(const int p)=0</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a33f2f9cde82108d2433f2cb987412352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>indentSize_</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a439e82f84fd8c2739147eb4c53f4b55f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned short</type>
      <name>indentLevel_</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>af356a109968899936cd3b326801d4d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr const unsigned short</type>
      <name>entryIndentation_</name>
      <anchorfile>classpFlow_1_1iOstream.html</anchorfile>
      <anchor>a0832891049728c54e9ee62fb59f81b03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IOstream</name>
    <filename>classpFlow_1_1IOstream.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>streamAccess</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aacc935fd960fc1d7efe7f3820bb1db35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aacc935fd960fc1d7efe7f3820bb1db35a929f0327e17604ce9713b2a6117bd603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPENED</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aacc935fd960fc1d7efe7f3820bb1db35a45c1c97bdcce420fc01045ee101a0cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CLOSED</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aacc935fd960fc1d7efe7f3820bb1db35a929f0327e17604ce9713b2a6117bd603</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OPENED</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aacc935fd960fc1d7efe7f3820bb1db35a45c1c97bdcce420fc01045ee101a0cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOstream</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a685ead9e00563a9b3d0c4753eac347a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IOstream</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a65d31aa1e9f9e2c0fde5613c17647e40</anchor>
      <arglist>(const IOstream &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IOstream</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a216ce04def77e62d9132be3ce232afcc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a00294aff753728dcc3edade4922100bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a56fc33541537fa41ce67fe02ec0749c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>check</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a367eb3425fc4e8270e2aa961df8ac8a5</anchor>
      <arglist>(const char *operation) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fatalCheck</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a281bbfd1fe6ab10377d7cb1f5111044d</anchor>
      <arglist>(const char *operation) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>opened</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a298583c3d514f1169bfc43169ba78c38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>closed</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>ae54500202b0333927a28c440c85cf07e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>abdcc7f96f487faadc7769afcf58fe992</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>af3418ac60d0d7a303478f29a387feb3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fail</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a48de1a2345c4519dd5d19c67dcce62ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>bad</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a9f7290a5d70f30e1b1b42c8ac4a6082d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a61efd4196a96540ee018fee8791f3f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>lineNumber</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a607efe5fb94edbe4cfa890c4907e76c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32 &amp;</type>
      <name>lineNumber</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a94ea536cf18c47b3d0ac90218b69d683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>lineNumber</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a7e8e74ae9e601005f806aaa1178921f2</anchor>
      <arglist>(const int32 num)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>ab6784b88289e1403b616f8ba4d742563</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEof</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a29b2d2944abba037e93cfc4e7ca19d8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFail</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>ad609d36f9e9be6dd6f502510ab445260</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBad</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a638b33dd25b3cd8ea7e846f04fd6a6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>ad624f59ea96278722591e5c257ab181b</anchor>
      <arglist>(const ios_base::fmtflags f)=0</arglist>
    </member>
    <member kind="function">
      <type>ios_base::fmtflags</type>
      <name>setf</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a7496d7abe05bdd8cffe2be14798ac34f</anchor>
      <arglist>(const ios_base::fmtflags f)</arglist>
    </member>
    <member kind="function">
      <type>ios_base::fmtflags</type>
      <name>setf</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a7c8972f80cfc853d1b78253abee55f04</anchor>
      <arglist>(const ios_base::fmtflags f, const ios_base::fmtflags mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetf</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a6215a425470b1a58a0f3e0407f8683ca</anchor>
      <arglist>(const ios_base::fmtflags f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>defaultPrecision</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a90f508fef73438f120430ecacd3a603b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>defaultPrecision</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a422504d8feb8f6597fe839556e8fd868</anchor>
      <arglist>(unsigned int prec)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static unsigned int</type>
      <name>precision_</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a4240681db26c977866e8173b76de12d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOpened</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>ab945a2e2c4278c06f4527d8e163b904e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setClosed</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a6ffc7629ddba3b8e7652fe888af299ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a6dc7caf4da073fce8946c51af8d81dee</anchor>
      <arglist>(ios_base::iostate state)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setGood</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a473118515da3a7497d0673dd24674c70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>streamAccess</type>
      <name>openClosed_</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>aa17155fc05a45901f1fded81dea4c2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ios_base::iostate</type>
      <name>ioState_</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a2caff7df9cffd0325a8877c89f5c779a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>lineNumber_</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a271ea4556e1f077f403284c4cde3ccec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static word</type>
      <name>staticName_</name>
      <anchorfile>classpFlow_1_1IOstream.html</anchorfile>
      <anchor>a384ff8be80c5e301c5ce6838a1f18033</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Istream</name>
    <filename>classpFlow_1_1Istream.html</filename>
    <base>pFlow::iIstream</base>
    <member kind="function">
      <type></type>
      <name>Istream</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ab9a414d452af8be20855560b91c3a34a</anchor>
      <arglist>(std::istream &amp;is, const word &amp;streamName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Istream</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>aa87acab95f6b508c203a4509ca726bcf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a05ff7aca2b2d901acaec7624079f415e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>aa311cb71a61f3cf642e33d5981dc4d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ada47b7405e5eaa26f35e795f291164bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>get</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a4b24d3a74d38ac71f0c83493e2e96ef8</anchor>
      <arglist>(char &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a9040fa1d479d71edf3a826f4691c35c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>getLine</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a1795762addc0a9a1c0d105e81b1a47c2</anchor>
      <arglist>(word &amp;str, char delim=&apos;\n&apos;)</arglist>
    </member>
    <member kind="function">
      <type>std::streamsize</type>
      <name>getLine</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a626d6266a668fbe5629562598a1d1334</anchor>
      <arglist>(std::nullptr_t, char delim=&apos;\n&apos;)</arglist>
    </member>
    <member kind="function">
      <type>Istream &amp;</type>
      <name>putback</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a469a625701584441d1d62023823cd452</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a2927b1d2adfb79cfbe30374f02109ac5</anchor>
      <arglist>(token &amp;t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a77264e9a2caa740b635d89e3211070ba</anchor>
      <arglist>(char &amp;c) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a8dfcec5380e096e5117d9861c6b42776</anchor>
      <arglist>(word &amp;str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>readString</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ab57115c7d3b788246557d319c80f9e8a</anchor>
      <arglist>(word &amp;str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ad8af18055c3d12dd98a5922ebab68ff2</anchor>
      <arglist>(int64 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ae5f7ae0c8060492806d8672d31c8cc05</anchor>
      <arglist>(int32 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ad0183d3e97114fe4de16da21da393928</anchor>
      <arglist>(int16 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>af52c7067aa8120a14f652b2b13c01f2d</anchor>
      <arglist>(int8 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>abbafe0c7f090d5141ca0b1833511793e</anchor>
      <arglist>(label &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ae1ec1d7ce98abf12034f5c799f3857f6</anchor>
      <arglist>(uint32 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a9883b86c3cc0efadac9c2c3b089483a4</anchor>
      <arglist>(uint16 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a37687181bbda5c256b8f5031030a7496</anchor>
      <arglist>(float &amp;val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a74a51f110ee3859191ffd704c2b4f141</anchor>
      <arglist>(double &amp;val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rewind</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ab8734e666421c9fe3b6380a818c6c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a5f4e9197238714c0ef19b6a9e9b9ad57</anchor>
      <arglist>(const ios_base::fmtflags flags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::istream &amp;</type>
      <name>stdStream</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a36e80d1fe8a5990eea5a15a85dc845c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::istream &amp;</type>
      <name>stdStream</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>aee64e5b539fcf89989d03831dba7b06a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="private">
      <type>char</type>
      <name>nextValid</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a3d5ae683596fda5b3cb7e1e22750ced3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>readWordToken</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a7e71f99e176c31f799cb199c7ff6d5b8</anchor>
      <arglist>(token &amp;t)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>Istream &amp;</type>
      <name>readVariable</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>aba7335ea9b5adb9f02359e7ee2556431</anchor>
      <arglist>(word &amp;str)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a32b77186746c413f9a774962268d9f67</anchor>
      <arglist>(const Istream &amp;)=delete</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::istream &amp;</type>
      <name>is_</name>
      <anchorfile>classpFlow_1_1Istream.html</anchorfile>
      <anchor>ae07f290f478c5378efde3613f1396f95</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::iTstream</name>
    <filename>classpFlow_1_1iTstream.html</filename>
    <base>pFlow::iIstream</base>
    <member kind="function">
      <type></type>
      <name>iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a45e7cb2de6ec7890cec462bb57a3347d</anchor>
      <arglist>(const word &amp;streamName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>adfb6914b07e74f4ddb022334975893f0</anchor>
      <arglist>(const word &amp;streamName, const tokenList &amp;tList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>af98cbef47e5310dd95ae5c4952744571</anchor>
      <arglist>(const word &amp;streamName, tokenList &amp;&amp;tList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>aecb7d8709a821e71a6d094d9f4079f3a</anchor>
      <arglist>(const iTstream &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>afb4318df0023564de69f89dc6dd6c887</anchor>
      <arglist>(iTstream &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>iTstream &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a5db7b51b726715415baf2a7bbcc89628</anchor>
      <arglist>(const iTstream &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>iTstream &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a1812b21516c973f6ce153c6e58293142</anchor>
      <arglist>(iTstream &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a6762874c0f8ffc7239f3208ef6695a74</anchor>
      <arglist>(const tokenList &amp;tList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a96361cc3170751f5f86f96e355bccf61</anchor>
      <arglist>(tokenList &amp;&amp;tList)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~iTstream</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a603c6542ff2bb2325fca6ee500016627</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a00294aff753728dcc3edade4922100bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a56fc33541537fa41ce67fe02ec0749c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a2927b1d2adfb79cfbe30374f02109ac5</anchor>
      <arglist>(token &amp;t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a77264e9a2caa740b635d89e3211070ba</anchor>
      <arglist>(char &amp;c) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a8dfcec5380e096e5117d9861c6b42776</anchor>
      <arglist>(word &amp;str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>readString</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ab57115c7d3b788246557d319c80f9e8a</anchor>
      <arglist>(word &amp;str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ad8af18055c3d12dd98a5922ebab68ff2</anchor>
      <arglist>(int64 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ae5f7ae0c8060492806d8672d31c8cc05</anchor>
      <arglist>(int32 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ad0183d3e97114fe4de16da21da393928</anchor>
      <arglist>(int16 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>af52c7067aa8120a14f652b2b13c01f2d</anchor>
      <arglist>(int8 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>abbafe0c7f090d5141ca0b1833511793e</anchor>
      <arglist>(label &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ae1ec1d7ce98abf12034f5c799f3857f6</anchor>
      <arglist>(uint32 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a9883b86c3cc0efadac9c2c3b089483a4</anchor>
      <arglist>(uint16 &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>af1e817d65829350b705a78d973242ac7</anchor>
      <arglist>(float &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iIstream &amp;</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ad45cacc3474aa95f42af24dfb43e4aad</anchor>
      <arglist>(double &amp;) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rewind</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ab8734e666421c9fe3b6380a818c6c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>reset</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const tokenList &amp;</type>
      <name>tokens</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a578844cadac20c3e23f6cf179ef2a1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numTokens</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a99d95160c020bb50e55a25a4e178d2b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendTokens</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ab8e6218a25dd17573b727e6e3225d6af</anchor>
      <arglist>(const tokenList &amp;tList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>appendToken</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a901e0a864d35fee71e969f18b6a3f701</anchor>
      <arglist>(const token &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a03ad359247e17b29c93563d7bf4e33c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a82cca7e83c1c39a4f1599c1d0481d044</anchor>
      <arglist>(const ios_base::fmtflags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isLastToken</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a3d513bfd3af0bb4907598c0ea696a433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFirstToken</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>ab80ea6b201ddac7c0635a047e84fb32b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>validate</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a41d45236c37b75848f4b1667a11fb50e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tokenList</type>
      <name>tokenList_</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a1e95a6fa473cd29f5dde06a6d214026c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tokenList::iterator</type>
      <name>currentToken_</name>
      <anchorfile>classpFlow_1_1iTstream.html</anchorfile>
      <anchor>a16b92ead52b0e5d37f307ae80f5df8d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::algorithms::less</name>
    <filename>structpFlow_1_1algorithms_1_1less.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1algorithms_1_1less.html</anchorfile>
      <anchor>afca043ab59c8cecec0be5b0c5837cf46</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::lessThanEqOp</name>
    <filename>structpFlow_1_1lessThanEqOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1lessThanEqOp.html</anchorfile>
      <anchor>a9c9f55ac311a8b465f5436c3a675abbd</anchor>
      <arglist>(&quot;lessThanEq&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1lessThanEqOp.html</anchorfile>
      <anchor>a0d60eb080f65e9375741f050031ad1f1</anchor>
      <arglist>(const T &amp;compVal, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::lessThanOp</name>
    <filename>structpFlow_1_1lessThanOp.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>structpFlow_1_1lessThanOp.html</anchorfile>
      <anchor>a48ac00ac41422fac2a7072345d1dd3d5</anchor>
      <arglist>(&quot;lessThan&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1lessThanOp.html</anchorfile>
      <anchor>a0d60eb080f65e9375741f050031ad1f1</anchor>
      <arglist>(const T &amp;compVal, const T &amp;val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::line</name>
    <filename>classpFlow_1_1line.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a43cb89c9eb509dbaf62ab1842662dd09</anchor>
      <arglist>(&quot;line&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>line</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ac710c1621a34f93473a6d097a41810d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>line</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a470758ada95a155311e44a3c53ef7c15</anchor>
      <arglist>(const realx3 &amp;lp1, const realx3 &amp;lp2)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>line</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ac1fa5eb5c54524a1e5f886ca5b6a5c2e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>line</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ad9f36e6f62fa09ab4ff7909e7ce04f39</anchor>
      <arglist>(const line &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>line</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a407206f8a5ef8cfc84bc6d977d878df6</anchor>
      <arglist>(line &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD line &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a88aad2e4539c1e1c966edfbcabcfb4b7</anchor>
      <arglist>(const line &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD line &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a9b79978c2ff3062830044bfed9d3c804</anchor>
      <arglist>(line &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ac127bfac1d358476c57ace2ab7497ee4</anchor>
      <arglist>(const realx3 &amp;lp1, const realx3 &amp;lp2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>point1</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a3e567d88cfb67880bd9b7bff731a1bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>point2</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a8be4546d19375c7bf44311fc5320b5ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>point</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a6e9513d0b6634e97d81f0d7a3595248a</anchor>
      <arglist>(real t) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>length</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a2f7808f268bb1c6c452116977586a8ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>unitVector</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>abb0d399741c593f97fcb61c3ebe2bc10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>projectPoint</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a03c6784ff46ffab948664762095b0c47</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>projectNormalizedLength</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a8f7e68844b0ce68632e965b0a1be767c</anchor>
      <arglist>(realx3 p) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a8dfb09bc3cd31a799290f903613192aa</anchor>
      <arglist>(dictionary &amp;ditc) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>p1_</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a3dbbeee301e1c6cf679b8f2bbbb9ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>v21_</name>
      <anchorfile>classpFlow_1_1line.html</anchorfile>
      <anchor>a7fb03b331bd0492fa75a44c0ac42994c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cfModels::linear</name>
    <filename>classpFlow_1_1cfModels_1_1linear.html</filename>
    <templarg>bool limited</templarg>
    <class kind="struct">pFlow::cfModels::linear::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::linear::linearProperties</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>af6d26fe46316f0bebc4803b2797ca60f</anchor>
      <arglist>(modelName())</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a66cbadcccb960139203f7d2020aa94fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>linear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a7a3fc8d68a7eb22e032f86680142030c</anchor>
      <arglist>(int32 nMaterial, const ViewType1D&lt; real &gt; &amp;rho, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>ae6b90a847f498d5cfcca84557798c18b</anchor>
      <arglist>(const linear &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>aef0f0ff7663e1855e26ae8e95fcc8713</anchor>
      <arglist>(linear &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD linear &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>af39aa57936eff9b52a02e4a8e0eed31e</anchor>
      <arglist>(const linear &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD linear &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a7aef98269c8836cafaa3d2a9353a34a1</anchor>
      <arglist>(linear &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~linear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>ae6434f668b1298cea5cb34dce7853598</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numMaterial</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>ad6a8ad563503e886d3f97cf98f1fe4ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>contactForce</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a84c397efa5695ac8f097aeb0a0d97536</anchor>
      <arglist>(const real dt, const int32 i, const int32 j, const int32 propId_i, const int32 propId_j, const real Ri, const real Rj, const real ovrlp_n, const realx3 &amp;Vr, const realx3 &amp;Nij, contactForceStorage &amp;history, realx3 &amp;FCn, realx3 &amp;FCt) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>symArray&lt; linearProperties &gt;</type>
      <name>LinearArrayType</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>ae3c26e23db03e5b4f43d892a6ed31f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readLinearDictionary</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a36dd9da7f6e5afc522963e96004b3f98</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>modelName</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a853f1f36a584e14513097e873967be96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numMaterial_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a4e372e37ecfb3b3330833393b27880c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real &gt;</type>
      <name>rho_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>adfcd72b350af8ab13ee809e1fbc63579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LinearArrayType</type>
      <name>linearProperties_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1linear.html</anchorfile>
      <anchor>a8a2527e1919a4c53150af6803029fcfb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::linear::linearProperties</name>
    <filename>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>ab541b403b5570fc1ca35234ab4a6322c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a7bbdfc66e6747c00808a7e48ace71020</anchor>
      <arglist>(real kn, real kt, real etha_n, real etha_t, real mu)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>linearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a75b3b3c62eb4ea0a7212e73332e8f6ff</anchor>
      <arglist>(const linearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD linearProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a71c436449b59fb94b5280b6e973d8566</anchor>
      <arglist>(const linearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~linearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>abb55ae09e84ba4d3fed7f4b9273952c0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>kn_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a82d8e89268aa2df7f9c4c938f293633a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>kt_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>aca5ab6c262d5efc50ff37a93048d5ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>ethan_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>ab3d4a1f3cef26e041192b82c72c37f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>ethat_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a256755e1762f42234c752d73a0f8252c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>mu_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1linear_1_1linearProperties.html</anchorfile>
      <anchor>a5e7a8a69645d20ea71c0eb0eb0fd17d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::List</name>
    <filename>classpFlow_1_1List.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>List&lt; T &gt;</type>
      <name>ListType</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a4662a3b36182fc0b9d8972b6b4e665f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; T, std::allocator&lt; T &gt; &gt;</type>
      <name>listType</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>ad10111ae21069b0aca1c03046cbf7ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename listType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a1010a5c60498d6d610107e274868df12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename listType::const_iterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>ae11b19125c410d38fecaf4e29372c358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename listType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a25398c1757a5f8dfb516ba2aecec32aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename listType::const_reference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a2ddf16ea8e3827a9069b1805545e6420</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::initializer_list&lt; T &gt;</type>
      <name>initList</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a6a8a2c26f8314992bb4ca80b6504f7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a783c81fb3d585a513b521ab37644da06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>ab425db25d813fc615a2bd40226aad4cc</anchor>
      <arglist>(&quot;List&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a17e6c90f14225bdac5c65ed915b0a2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>acfc8a6a7ede7f18392405c07897fd075</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a899d13d5d07ae0e47451fa7f2ea74e49</anchor>
      <arglist>(size_t len, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a50c383a88e728b9b4367c4b6bbd10eef</anchor>
      <arglist>(initList lst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a22e9229526aa1170a013c05b0cc19840</anchor>
      <arglist>(const List &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a52a3dfc9684f100386c05d7a2b902f7a</anchor>
      <arglist>(List &amp;&amp;mv)</arglist>
    </member>
    <member kind="function">
      <type>ListType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a41376a8df4a21a53d556df763240074f</anchor>
      <arglist>(const ListType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ListType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a6e94f39d2c94fffa504938d198a449be</anchor>
      <arglist>(ListType &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; ListType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a75d0ea8bc48924d0330d1daaa394d29d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ListType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>af641a6d46100580553f5f4018d0e5a8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~List</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a76ab9318a0ae5c1383063ef8902a276d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>countElement</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a0ae8b5e57e020327db47517eca03cfb7</anchor>
      <arglist>(const T &amp;elm) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>abf949d6503bf19c5c4555cfe90446bf0</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a8f0a61dd9e694fa1ce1afec4f006e2c9</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>constIterator</type>
      <name>find</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a47c27d6fde6f0adc4544fe92111c2a99</anchor>
      <arglist>(const T &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>abd7b88a300c5038a6cdd3474000ab65b</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findi</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a91cf71be86cd63ae62fc59b12c16da9d</anchor>
      <arglist>(const T &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>search</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a20c90ecc2a6af0560b688b30c6ca89ea</anchor>
      <arglist>(const T &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a6becac4e21bb0fc602d28f5be5c86d8f</anchor>
      <arglist>(size_t i, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a42edd9112e393ee040449fb5ad3f6064</anchor>
      <arglist>(size_t i, T &amp;&amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeList</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a452cc3dc2647928573a55c8a5b41a5ea</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readList</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a18b6e40e2e0511b836d16ae0e7ecf061</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>pos</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a6658926e1e4a1ecd9cfdaaa595644b3f</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const auto</type>
      <name>pos</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>a4fdfa726bf44bffdbaa907ecac1d3d36</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static size_t</type>
      <name>getListStride</name>
      <anchorfile>classpFlow_1_1List.html</anchorfile>
      <anchor>ad4a007cea89dbe9b93c62320c5fa91a3</anchor>
      <arglist>(const size_t &amp;len)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::ListPtr</name>
    <filename>classpFlow_1_1ListPtr.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>ListPtr&lt; T &gt;</type>
      <name>ListPtrType</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a25f8f6a9feb5d2b67d0bbf95ba5a364b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; T * &gt;</type>
      <name>listType</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a26d2efd1d748cb6e0320b66f10a13887</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>acbdee50fa54098fa4d52858425125477</anchor>
      <arglist>(&quot;ListPtr&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a157eaa2ca5316f90c1dc8b818e551499</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a505c740f82e063b053597fcb6d4d9896</anchor>
      <arglist>(size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aff0d61feda03e16e2e5484408e59b5b9</anchor>
      <arglist>(const ListPtrType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ListPtrType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>af79af8e9f2ade68a3ae7e9705a3eb485</anchor>
      <arglist>(const ListPtrType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ListPtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a2430a6d0cf52f6ed2dc80bde39a02e6c</anchor>
      <arglist>(ListPtrType &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>ListPtrType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ab05b49fa97634da8bd84bf6b9b9b6c1f</anchor>
      <arglist>(ListPtrType &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>ListPtrType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aac3c132c321c0eaf36c877b91e1714ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; ListPtrType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a0de56b25b4b42e5b8b6e0b52676f5b05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ListPtr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ab8719c9aea35d96dad5799fa6ff096bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aaf34c831862f9bf59c51b3b9a84b997b</anchor>
      <arglist>(label i, T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ad2a55ab0f16bac80373a6122c96b8e15</anchor>
      <arglist>(label i, uniquePtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>setSafe</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a1bfdcb8b92e92c2afee73657b453eb41</anchor>
      <arglist>(label i, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a3809aca9dcd2c52a4711126018cc961d</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aeb3cd46ad821b18183517b7df30e8958</anchor>
      <arglist>(uniquePtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_backSafe</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ae8ff88417850eea96d6b54bfd5361b30</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ac27b3eea8389d77d07ba8311ec81d393</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a3c6ccfa567f9d2904529261796b4a00b</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aabc711c50b75d9b670af88d45c2b87e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>release</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a90f88d4cba030d25fbfc1e5a1ab36392</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a55339467a3a0d10c213a3e2d7eba9476</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>pFlow::uniquePtr&lt; T &gt;</type>
      <name>setSafe</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>aff00f33897f518f479d339ef643ee19d</anchor>
      <arglist>(label i, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; T &gt;</type>
      <name>makeSafe</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>afe0fe2371a497d05811e9afb1581ea25</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a9b89271a726f90417f66058925ce9df4</anchor>
      <arglist>(const ListPtrType &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>ptr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>adef161ce9d4ee143076ba852ebefedfe</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T *</type>
      <name>ptr</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a926e97024b564bb5677c5b98dc37f516</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>pos</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a7c153781c560171cc323795d14d905a3</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>pos</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>ac3424b6d628b269dfed8cb35e53d95b0</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; T * &gt;</type>
      <name>list_</name>
      <anchorfile>classpFlow_1_1ListPtr.html</anchorfile>
      <anchor>a2c61e0ee805cd191c8847819158cab55</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Logical</name>
    <filename>classpFlow_1_1Logical.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a851e0a36622e3208a50f1a1af3224b9b</anchor>
      <arglist>(&quot;Logical&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>ab8be5403eabcca1b79611fe69f54add1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>ab363b331ac2b9d9622742ebf0b5a951d</anchor>
      <arglist>(bool s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>afc72ef98326dbd079d2f8630ccf24c74</anchor>
      <arglist>(const word &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a2e553369989cc0b5b119f4585f263e52</anchor>
      <arglist>(const char *ch)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a49cd7c522cedbe3e62e52191d0f79a79</anchor>
      <arglist>(const Logical &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a27f71d048d16aa04269dc80d03397dd8</anchor>
      <arglist>(Logical &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Logical &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a62d83ad8dcfdf9adadfb8dd4c5a1eab2</anchor>
      <arglist>(const Logical &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Logical &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a95510f2d2d2312b0915d9d4622b48971</anchor>
      <arglist>(Logical &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>Logical &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>acf6059efcd3d894e17c05858a563a4a8</anchor>
      <arglist>(const bool &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>ac07d93c2c80e51349f3dec89a2e45c84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Logical</type>
      <name>operator!</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>ac8deda3639dc8d68714b583b54cdf85a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>evaluteWord</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a511f818d2eebfd7be4cac008de48bc8c</anchor>
      <arglist>(const word &amp;l, bool &amp;b, int &amp;yesNoSet)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Logical</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a806aa31dc2296ac0381a7b4b0289b204</anchor>
      <arglist>(bool s, int yns)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>s_</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>ab26d4eeeee6530495955214023e65cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>yesNoSet_</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a557853380b14ede18eb1782e21047c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const word</type>
      <name>YesNo__</name>
      <anchorfile>classpFlow_1_1Logical.html</anchorfile>
      <anchor>a5f0eda982d8c60cbff681b1480f4e75d</anchor>
      <arglist>[4][2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Map</name>
    <filename>classpFlow_1_1Map.html</filename>
    <templarg>class Key</templarg>
    <templarg>class T</templarg>
    <templarg>class Compare</templarg>
    <member kind="typedef">
      <type>Map&lt; Key, T, Compare &gt;</type>
      <name>MapType</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a374da4a8ff4c93f75819e39e11ffaadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; Key, T, Compare &gt;</type>
      <name>mapType</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a8d31f76a5c263b689f038408223c29e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a59a8d46af076e1db2c566a1a5a889e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::const_iterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>ae30252c367eee55b4abc0876cf141108</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>ad47f03e518f92884d12ad79606edb8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::const_reference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a5aefbbb14cde3df3d38c0d25830bb7dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::initializer_list&lt; T &gt;</type>
      <name>initList</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a6a8a2c26f8314992bb4ca80b6504f7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::key_type</type>
      <name>keyType</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>aa7669b74b0c566790f2f2a7fb11a9593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::mapped_type</type>
      <name>mappedType</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>abf1c3784373d079646730a4fd419aede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::value_type</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a09191c0b174fbc9492136ffae28254db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>af00f3dd2fb4fe25d49ece1231899a61f</anchor>
      <arglist>(&quot;Map&quot;, Key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a49848ab3a0e1934c5615242b67af68c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a27cb8dd329863dacbd7d44e26d3a300f</anchor>
      <arglist>(initList lst)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a3f364db2e6445be2fc677accc8b94b61</anchor>
      <arglist>(const MapType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a476a44e684872a1dcc11334090e51997</anchor>
      <arglist>(MapType &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>MapType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a8ce760300ce22af4ae508125e83cc718</anchor>
      <arglist>(const MapType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>MapType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a1925e08e10ba292714df4e6b6c5f4c7f</anchor>
      <arglist>(MapType &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; MapType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>abb0e9e5b8ae884071413daa7a71673f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MapType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a7dd8f7f163a1bd38e4e09f9cd69c3760</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Map</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>ac59b12e62f61360298c324334ecc6bc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertIf</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a9124a8fcf228c945283648e8ea27b4ee</anchor>
      <arglist>(const keyType &amp;k, const mappedType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertIf</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>af6bed5254ae7ffe8095707eb9b4320e6</anchor>
      <arglist>(keyType &amp;&amp;k, mappedType &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>search</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a40819b514a7a94b605efc48b79d18a94</anchor>
      <arglist>(const keyType k) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; iterator, bool &gt;</type>
      <name>findIf</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>af9b26557b36e079e672320cef264b7a3</anchor>
      <arglist>(const keyType &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>const std::pair&lt; constIterator, bool &gt;</type>
      <name>findIf</name>
      <anchorfile>classpFlow_1_1Map.html</anchorfile>
      <anchor>a06b69d98ba2463549e4fabf5f7e7ad4c</anchor>
      <arglist>(const keyType &amp;k) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::mapperNBS</name>
    <filename>classpFlow_1_1mapperNBS.html</filename>
    <templarg>typename executionSpace</templarg>
    <base>cells&lt; int32 &gt;</base>
    <class kind="class">pFlow::mapperNBS::cellIterator</class>
    <member kind="typedef">
      <type>int32</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a200e2b36a2cd413a512279c0089c6b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ae73570f5a8fa6f2a0123b6a44eadca22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cells&lt; IndexType &gt;</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aeddf2432738cfab3cda287d6fb96e048</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>executionSpace</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a268a0b77c6f89665e5ef14307a3f1731</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename execution_space::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ac5b08fe17cf30c7c64a5ee12370133e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewType3D&lt; int32, memory_space &gt;</type>
      <name>HeadType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>acbd6c3ada7ac256c9703465b1f009810</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewType1D&lt; int32, memory_space &gt;</type>
      <name>NextType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a94771782ff2841007e80ca3839276da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a425a2c93cccdb60baa66f676f2e4fcf8</anchor>
      <arglist>(&quot;mapperNBS&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>mapperNBS</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aabb78939edc11d328987ccfe6cff9f2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mapperNBS</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aff165a8eab5bc9439dff09cdebdd8f34</anchor>
      <arglist>(const box &amp;domain, real cellSize, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, bool nextOwner=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mapperNBS</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a25152f26d847dae6782533f4485fefff</anchor>
      <arglist>(const box &amp;domain, int32 nx, int32 ny, int32 nz, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, bool nextOwner=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>mapperNBS</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>af52aee9b89ace9cd183601ccc3d505ec</anchor>
      <arglist>(const mapperNBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD mapperNBS &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a3926c8dbb649a0ac723164e427ffc5b3</anchor>
      <arglist>(const mapperNBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~mapperNBS</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aae7702272d8c4be0e0c27835444a291a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ac1beee6aa2384d093165782ce8e176c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cellIterator</type>
      <name>getCellIterator</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a5ca5fc49c272458f76da73906c9e534b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>particlesCapcityChanged</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a9e3805072fdaa03e819082d00b482616</anchor>
      <arglist>(int32 newCap)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto &amp;</type>
      <name>head</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a9b1dc723760477f0237160e7d7935672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto &amp;</type>
      <name>next</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a0545e09ae67ec4ebeabd47bc7e8dd01d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const auto &amp;</type>
      <name>head</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a5e258b01dad6478a8495e63cceacec04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const auto &amp;</type>
      <name>next</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a69fb738a785f32a707dd6453b49fb6bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto &amp;</type>
      <name>pointPosition</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>abf0aa70f09091f0e8e477020c3205a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>setNext</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>acfc73562130fa76004062f1f8344f7ce</anchor>
      <arglist>(ViewType1D&lt; int32, memory_space &gt; &amp;next)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>build</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ac4d9b554d7571777600bb20765ffe5bb</anchor>
      <arglist>(range activeRange)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>build</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a6ab886e7dd6b9d59e9c2f4544e4c98da</anchor>
      <arglist>(range activeRange, IncludeFunction incld)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>buildCheckInDomain</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aa4afb3a96a27bdfb352881bc97640669</anchor>
      <arglist>(range activeRange)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>buildCheckInDomain</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a28cfc3d026365753bd3c02777c104dc0</anchor>
      <arglist>(range activeRange, IncludeFunction incld)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; Kokkos::IndexType&lt; int32 &gt;, Kokkos::Schedule&lt; Kokkos::Static &gt;, execution_space &gt;</type>
      <name>rangePolicyType</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a1eda470dc3fe355cb038b0a37a296a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>nullifyHead</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ad1e66f338b0cc8d9ba8098c7f0156f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nullifyNext</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a275473a4efdb1e6a14fc9814f03d11c3</anchor>
      <arglist>(range nextRng)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nullify</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a5b53f360232042bc4ea4bafe235589cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nullify</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ad6f7ecbbe933dcfb6b5fc8eea5ca4ee8</anchor>
      <arglist>(range nextRng)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkAllocateNext</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a21704ef027384718544f6198846b871b</anchor>
      <arglist>(int newCap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocateHead</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>ad596b4fc4929c14b27753c5e17f5ab59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>capacity_</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a30209db0f680c0566f6a945e036e9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType3D&lt; int32, memory_space &gt;</type>
      <name>head_</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>af480fbb9c7ab1452f3416bd0a5446f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int32, memory_space &gt;</type>
      <name>next_</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>aea09d42d20d5235a3c688c143b6d0a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>nextOwner_</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a574e0a4fe53583228a398a16b5c2b27e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; realx3, memory_space &gt;</type>
      <name>pointPosition_</name>
      <anchorfile>classpFlow_1_1mapperNBS.html</anchorfile>
      <anchor>a7ec329c37c34493564c088f010bde5c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::MapPtr</name>
    <filename>classpFlow_1_1MapPtr.html</filename>
    <templarg>template&lt; class, class &gt; class Container</templarg>
    <templarg>class Key</templarg>
    <templarg>class T</templarg>
    <member kind="typedef">
      <type>MapPtr&lt; Container, Key, T &gt;</type>
      <name>MapPtrType</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a92994f71e2fdc8b9cde28c91b702f703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container&lt; Key, T * &gt;</type>
      <name>mapType</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ae6ee25ec4d9a6323a5e6334a85e40f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::key_type</type>
      <name>keyType</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>aa7669b74b0c566790f2f2a7fb11a9593</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::mapped_type</type>
      <name>mappedType</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>abf1c3784373d079646730a4fd419aede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::value_type</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a09191c0b174fbc9492136ffae28254db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ad47f03e518f92884d12ad79606edb8d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::const_reference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a5aefbbb14cde3df3d38c0d25830bb7dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a59a8d46af076e1db2c566a1a5a889e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::const_iterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ae30252c367eee55b4abc0876cf141108</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a16b492fa6ab589fcee576d7ef18e0d3a</anchor>
      <arglist>(&quot;MapPtr&quot;, Key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a3ac6f1eb51f2e6fdd2d0ebf7d8e35851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a2a6cfb988b47de5639f60d0a31d014dc</anchor>
      <arglist>(const MapPtrType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>MapPtrType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a92b869af4dac52bf603fa417a5f2090b</anchor>
      <arglist>(const MapPtrType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MapPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a89380d2695d370fe190107eda7b20b99</anchor>
      <arglist>(MapPtrType &amp;&amp;src)</arglist>
    </member>
    <member kind="function">
      <type>MapPtrType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a3ec64bb9e3e2386f3cb654bab77c63ed</anchor>
      <arglist>(MapPtrType &amp;&amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; MapPtrType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a73a13461b318b58618e55196999d611a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MapPtrType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a3a88aedf15d8aeb9d7cd50e6fd2adf63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MapPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a16b3afe748849777167cfaae7abaa682</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertReplace</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ac69b497adf1681d39e48dd8ae897d493</anchor>
      <arglist>(const keyType &amp;key, T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertReplace</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a09ae5a64eb6faf9a89f1ae1c2708b7a9</anchor>
      <arglist>(const keyType &amp;key, uniquePtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertReplaceSafe</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a39a7d85e711a60cfad55a63ff306cf04</anchor>
      <arglist>(const keyType &amp;key, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>acca3f5fc076f7421737dad427fd54a2e</anchor>
      <arglist>(const keyType &amp;key, T *ptr)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>set</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>aef090df9d126de8c4beef909c8452f80</anchor>
      <arglist>(const keyType &amp;key, uniquePtr&lt; T &gt; &amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>setSafe</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a96fb5dd7ff476b60080dec30661bc6f3</anchor>
      <arglist>(const keyType &amp;key, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ae8a3c8e67690b09424f6a1bdbf5f8f82</anchor>
      <arglist>(const keyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a4e4be4d19c21322108cee6557427f782</anchor>
      <arglist>(const keyType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>search</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a40819b514a7a94b605efc48b79d18a94</anchor>
      <arglist>(const keyType k) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; const T *, bool &gt;</type>
      <name>find</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a4ef9ebed4aac21ae66ad5b97bd635bde</anchor>
      <arglist>(const keyType &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; T *, bool &gt;</type>
      <name>find</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a8e30ca053994e15b6d0e5de84ba94906</anchor>
      <arglist>(const keyType &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>release</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a3274a086096a9a259b5d816801372e0d</anchor>
      <arglist>(const keyType &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>erase</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>aee77abc7e672588c5566b6edb26a6c00</anchor>
      <arglist>(const keyType &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>aabc711c50b75d9b670af88d45c2b87e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>ad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constIterator</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a63e0362932db2a086fab55a5cb0de69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>acad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constIterator</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a26d56d3ef5b2d357e84d37a1f31419a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pFlow::uniquePtr&lt; T &gt;</type>
      <name>setSafe</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>a5c2bffe96d9a0def950dd5333f1d3ab3</anchor>
      <arglist>(const keyType &amp;key, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; T &gt;</type>
      <name>makeSafe</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>afe0fe2371a497d05811e9afb1581ea25</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>copy</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>aa4247f71510779381ecc013743a2ad31</anchor>
      <arglist>(const MapPtrType &amp;src)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>T *</type>
      <name>findPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>add6edd884b302bd58f7eb51b0bf42287</anchor>
      <arglist>(const keyType &amp;k)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const T *</type>
      <name>findPtr</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>acc6cb883e3e57e72dceef14dc02417e6</anchor>
      <arglist>(const keyType &amp;k) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container&lt; Key, T * &gt;</type>
      <name>map_</name>
      <anchorfile>classpFlow_1_1MapPtr.html</anchorfile>
      <anchor>acf4d0a07ee6105cd7aed1c2c3e1662fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::algorithms::maximum</name>
    <filename>structpFlow_1_1algorithms_1_1maximum.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1algorithms_1_1maximum.html</anchorfile>
      <anchor>afca043ab59c8cecec0be5b0c5837cf46</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::algorithms::minimum</name>
    <filename>structpFlow_1_1algorithms_1_1minimum.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1algorithms_1_1minimum.html</anchorfile>
      <anchor>afca043ab59c8cecec0be5b0c5837cf46</anchor>
      <arglist>(const T &amp;lhs, const T &amp;rhs) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::fixedWall::Model</name>
    <filename>classpFlow_1_1fixedWall_1_1Model.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>a5a7f462c2e333c8aaf5f9f1af21a7cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>ae3943fba9625fb7145fc8789a4540939</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD Model &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>ace4088300fa1e084b200eeb5c8195c92</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>a3912863f64a06230f74ee4bda0f5a4e8</anchor>
      <arglist>(int32 n, const realx3 p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>aa3b341c21a3f5f2e7531e1119dd1602e</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>a116927621b80b5ed0a1ff95e376963a8</anchor>
      <arglist>(int32 n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numComponents</name>
      <anchorfile>classpFlow_1_1fixedWall_1_1Model.html</anchorfile>
      <anchor>afe5a5b702fc7dd62ed301b4bdc85834a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiRotatingAxisMotion::Model</name>
    <filename>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ab420192a9590610b4621c9710a523735</anchor>
      <arglist>(deviceViewType1D&lt; multiRotatingAxis &gt; axis, int32 numAxis)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ae3943fba9625fb7145fc8789a4540939</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD Model &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ace4088300fa1e084b200eeb5c8195c92</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a75c171593aa0ab3d040e993a8eacdccd</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>aa3b341c21a3f5f2e7531e1119dd1602e</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a116927621b80b5ed0a1ff95e376963a8</anchor>
      <arglist>(int32 n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numComponents</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>afe5a5b702fc7dd62ed301b4bdc85834a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType1D&lt; multiRotatingAxis &gt;</type>
      <name>axis_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ad85a9f194a8fa7ec87c81103892b2d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numAxis_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a78ef04230ad102f729600a44e6a57394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::rotatingAxisMotion::Model</name>
    <filename>classpFlow_1_1rotatingAxisMotion_1_1Model.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>add14f10323977082651c687e26cac4e1</anchor>
      <arglist>(deviceViewType1D&lt; rotatingAxis &gt; axis, int32 numAxis)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ae3943fba9625fb7145fc8789a4540939</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD Model &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>ace4088300fa1e084b200eeb5c8195c92</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a75c171593aa0ab3d040e993a8eacdccd</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>aa3b341c21a3f5f2e7531e1119dd1602e</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a116927621b80b5ed0a1ff95e376963a8</anchor>
      <arglist>(int32 n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numComponents</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>afe5a5b702fc7dd62ed301b4bdc85834a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType1D&lt; rotatingAxis &gt;</type>
      <name>axis_</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a5b6c7d774982c596127d681adada3fa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numAxis_</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion_1_1Model.html</anchorfile>
      <anchor>a78ef04230ad102f729600a44e6a57394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::vibratingMotion::Model</name>
    <filename>classpFlow_1_1vibratingMotion_1_1Model.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>a8a64f615491ee8ba1f499ad4a3a2f026</anchor>
      <arglist>(deviceViewType1D&lt; vibrating &gt; comps, int32 numComps)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>Model</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>ae3943fba9625fb7145fc8789a4540939</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD Model &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>ace4088300fa1e084b200eeb5c8195c92</anchor>
      <arglist>(const Model &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>a75c171593aa0ab3d040e993a8eacdccd</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>aa3b341c21a3f5f2e7531e1119dd1602e</anchor>
      <arglist>(int32 n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>a116927621b80b5ed0a1ff95e376963a8</anchor>
      <arglist>(int32 n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numComponents</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>afe5a5b702fc7dd62ed301b4bdc85834a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType1D&lt; vibrating &gt;</type>
      <name>components_</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>af16b36de7bde8b1310d9bc4305d2edd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numComponents_</name>
      <anchorfile>classpFlow_1_1vibratingMotion_1_1Model.html</anchorfile>
      <anchor>a1cdd6d8947b0b94764d8b6d373e677fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiGridMapping</name>
    <filename>classpFlow_1_1multiGridMapping.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>cellsWallLevels&lt; executionSpace &gt;</type>
      <name>CellsWallLevelType</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a9379b728279084dddb4a4c7120235eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CellsWallLevelType::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>ac3b1a2792d37dda6268db50eb49ebb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CellsWallLevelType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a43c63fb30667b66fe831c5fee57e544f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CellsWallLevelType::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a3bba56d3bf1b04d3855a23cb8528af85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CellsWallLevelType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a26c800df0fea48dd7694378f1163793d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CellsWallLevelType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a2b3638082ce8eec9b2e4fb66dd6650dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iBox&lt; IndexType &gt;</type>
      <name>iBoxType</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a5e63edb05d6b5a08f98f8c077c391b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a7ac03407f1dddae5193c841ea2177cdc</anchor>
      <arglist>(&quot;multiGridMapping&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiGridMapping</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>aaac088238e1ca702967deda57d2a9d13</anchor>
      <arglist>(const dictionary &amp;dict, int32 numLevels, const Vector&lt; Cells &gt; &amp;ppCells, int32 numPoints, int32 numElements, const ViewType1D&lt; realx3, memory_space &gt; &amp;points, const ViewType1D&lt; int32x3, memory_space &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enterBoadSearch</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a48871efcbcaed0e589764bbbd933d3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>performedSearch</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a2f3fca6830cd43510c731216bcf9dd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>abba428befc17327c2b4398dd3792cfe5</anchor>
      <arglist>(PairsContainer &amp;pairs, particleMapType &amp;particleMap, bool force=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>updateFrequency_</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>ae8aa0db7f2d2c19eefe46e3108bdebea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>cellExtent_</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>ae37c17021aa06dd9bcf5e7a187d6babf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>currentIter_</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>af11548cfec6dd4efe0c8702395cf8ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>performedSearch_</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a0fe252c95c374cf51d37d954d6ecc2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CellsWallLevelType</type>
      <name>cellsWallLevle_</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a9d284c503b17ff19142d67d0efea688d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>performSearch</name>
      <anchorfile>classpFlow_1_1multiGridMapping.html</anchorfile>
      <anchor>a369db5c233d2929a6a016b99e1033901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiGridNBS</name>
    <filename>classpFlow_1_1multiGridNBS.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>NBSLevels&lt; executionSpace &gt;</type>
      <name>NBSLevelsType</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a3c28bad94b8ed3cb76aa5f7aaa126169</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::cellIterator</type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a79b71dfa5865b1a92e9867399b011765</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ae1157fcb5d91b540a6996a7cedfc7404</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ade747e4ff3fe95153a1de5821b2bc353</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a6803d13d2906eb3dc0023e207aefb02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ada57012ee80d527a327ca65063229a41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelsType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a8a82f854ea8de3d204f222ad5f463f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ae716f16907f5adb0ca9378ccec647069</anchor>
      <arglist>(&quot;multiGridNBS&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiGridNBS</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>aa5fe840830b307aef8b31188eae34db4</anchor>
      <arglist>(const dictionary &amp;dict, const box &amp;domain, real minSize, real maxSize, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>multiGridNBS</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a5a6d65acde8890a41ebb8f43c9849ed5</anchor>
      <arglist>(const multiGridNBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD multiGridNBS &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>acc8c9764e32f71e1a6de18e5ca5af96f</anchor>
      <arglist>(const multiGridNBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~multiGridNBS</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a19ea393502ce82f9403ff0a84265e706</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enterBoadSearch</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a48871efcbcaed0e589764bbbd933d3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>performedSearch</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a2f3fca6830cd43510c731216bcf9dd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>numLevels</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ae079a671a335303acecacf402741cd6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCellsLevels</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>af224cf459fff5dfeda586f6127500ef0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCells</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ae51f701cba117ab6ebad15bbc2ba1045</anchor>
      <arglist>(int32 lvl) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCellIterator</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a188d6accc40606c9e68b384a6b9c66f7</anchor>
      <arglist>(int32 lvl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>objectSizeChanged</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a74280fc4f4e399c204b2186f7648f6a3</anchor>
      <arglist>(int32 newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>adb99f8dfb353cba7aca9b1bb8566163d</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a3c55135a756e6fa68f1ada33d1d18e07</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange, IncludeFunction incld, bool force=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>sizeRatio_</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a3de51aa24b94e991c9c21fb5f3d5c487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>updateFrequency_</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>ae8aa0db7f2d2c19eefe46e3108bdebea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>currentIter_</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>af11548cfec6dd4efe0c8702395cf8ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>performedSearch_</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a0fe252c95c374cf51d37d954d6ecc2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NBSLevelsType</type>
      <name>NBSLevels_</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>add3245879f5c89bdfc82ebe90f384721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>performSearch</name>
      <anchorfile>classpFlow_1_1multiGridNBS.html</anchorfile>
      <anchor>a369db5c233d2929a6a016b99e1033901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiRotatingAxis</name>
    <filename>classpFlow_1_1multiRotatingAxis.html</filename>
    <base>pFlow::rotatingAxis</base>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>multiRotatingAxis</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>af0b62abd886361864fbbac72e24f354d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>multiRotatingAxis</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>aafff411fe6197736d9ea79b9bced7760</anchor>
      <arglist>(multiRotatingAxisMotion *axisMotion)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>multiRotatingAxis</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a1d3b3b07b1c42ccdc32677e283bcab9d</anchor>
      <arglist>(multiRotatingAxisMotion *axisMotion, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>multiRotatingAxis</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>af7a589957d7aed59ebb511815d055751</anchor>
      <arglist>(const multiRotatingAxis &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD multiRotatingAxis &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a791a0eeb5569feade5ae723b9bb00bd4</anchor>
      <arglist>(const multiRotatingAxis &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>pointTangentialVel</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>ad6acd46acac9585be092db485797e5a2</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a56d51bacf319278cac71727b57b95c36</anchor>
      <arglist>(const realx3 &amp;p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>hasParrent</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>aee053e90b0c25c42dbd3c50a362264e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>parentAxisIndex</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>aec6973746223be429e4b60609b6fdc3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>setAxisList</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a0d6678f1b49495463ee64cef890e5620</anchor>
      <arglist>(multiRotatingAxis *axisList)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a5e4200ebd4752215e4dfbc46eac943b9</anchor>
      <arglist>(real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>ac70963b5d795997b3d042e73606604d4</anchor>
      <arglist>(multiRotatingAxisMotion *axisMotion, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a8d67252b5aa9aad9090b4b605a393307</anchor>
      <arglist>(const multiRotatingAxisMotion *axisMotion, dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>multiRotatingAxis *</type>
      <name>axisList_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a63fe7288eff3ba15e7a7533312d9c1d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>parentAxisIndex_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxis.html</anchorfile>
      <anchor>a83a70418474dc12b9e8c8455fe82eb03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiRotatingAxisMotion</name>
    <filename>classpFlow_1_1multiRotatingAxisMotion.html</filename>
    <class kind="class">pFlow::multiRotatingAxisMotion::Model</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>acc38644bc377a103da9cb10f4424e5d6</anchor>
      <arglist>(&quot;multiRotatingAxisMotion&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>multiRotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a82445254d27c731753c7354302a23e7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>multiRotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>af79f4e09f96cdb8be4b3569258746f7a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>multiRotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a86a8a3a9e5aee74ee3168d47cf0513ff</anchor>
      <arglist>(const multiRotatingAxisMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiRotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a26c7ab26dacc66d0b7e1dfbc48603895</anchor>
      <arglist>(multiRotatingAxisMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H multiRotatingAxisMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ad1f38969332b32a673eb9c6bcbcb4174</anchor>
      <arglist>(const multiRotatingAxisMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>multiRotatingAxisMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>aac4ab78cdef1b65795a2befb7b9e1b79</anchor>
      <arglist>(multiRotatingAxisMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>~multiRotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a55b0292850a0058fa736d59013b1e1bc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getModel</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ad154666086a654ab29cbb515fec9bf4e</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H multiRotatingAxis *</type>
      <name>getAxisListPtrHost</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a026d1e14664b7091d61bf927c146ad39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H multiRotatingAxis *</type>
      <name>getAxisListPtrDevice</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>aa393382dca051e742426af186fc2dfa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>aa228b68325a8251f13734b8f2dc7367b</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H word</type>
      <name>indexToName</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a25f3d350ed015e91a764c51a6525e139</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isMoving</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a226a2b5e6b2e18ee8a990c2c357bb036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>move</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ac566080144578bb4b5f2982f0ce7852b</anchor>
      <arglist>(real t, real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorDual&lt; multiRotatingAxis &gt;</type>
      <name>axisVector_HD</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ad16baf426d8788c02f84111c95819da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>axisVector_HD</type>
      <name>axis_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a2efd1b487367ae91274544274fef6876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VectorDual&lt; int32 &gt;</type>
      <name>sortedIndex_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>adfd160c40966cee546ae935a3c899e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>axisName_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>ae203af35abd611539e7b9fdc1cbc2a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>numAxis_</name>
      <anchorfile>classpFlow_1_1multiRotatingAxisMotion.html</anchorfile>
      <anchor>a52b85466a0a06d609df22c9b1c895134</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::multiTriSurface</name>
    <filename>classpFlow_1_1multiTriSurface.html</filename>
    <base>pFlow::triSurface</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a04291fc984819d6c9c852e49650bfa9c</anchor>
      <arglist>(&quot;multiTriSurface&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ab09b4c8e97e1617803bba5268fb86794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a3e02a25372bfd44be162b8332cac9cd9</anchor>
      <arglist>(const multiTriSurface &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>multiTriSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a2420447946d1caef22fc3928d25d0280</anchor>
      <arglist>(const multiTriSurface &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>multiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a88aebd29f35640424aa961a504756b58</anchor>
      <arglist>(multiTriSurface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>multiTriSurface &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a4319ad043a594a621c2e7a1a1444ffa4</anchor>
      <arglist>(multiTriSurface &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~multiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a673024ae4934b20ff7a30e33e60fd171</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ab3e1431127162c803c33ee76d1f2cbb3</anchor>
      <arglist>(const word &amp;name, const triSurface &amp;tSurf)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ae875af54b008b897b735d98a8953c368</anchor>
      <arglist>(const word &amp;name, const realx3x3Vector &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>numSurfaces</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a710675ba2f5afe84bfea70dc2be77e6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pointsStartPos</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ae9f64bb7d2890f96c91f43dfe513526a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>verticesStartPos</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a6870e218d9745a46da34aff7a9d27455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>surfaceNumPoints</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a45ded005c47ffa111a8bcf0a3e5b47f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>surfaceNumPoints</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ada7947e1b9c0d08fd02a6f380e90a877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>surfNumPoints</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>aee86d6d27a0ed4068bd214cf12166248</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>surfNumTriangles</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>aac88f8e5ff9545336512c98fbf7eca4e</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>surfSize</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a92ac597b81f448a282342bc1a9f38c72</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>surfaceName</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a400f24786ed4a6d738f17fced80662ff</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readMultiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a9d66d68d90af555208a05211a3e85d65</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeMultiTriSurface</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a3834440c3a872a6db7418736db8c63ad</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateVars</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a37215fff362d82077ec78ffe0cb211d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Field_HD</type>
      <name>lastPointIndex_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a38686c34fb6be18f1096b4a5ae7cc327</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Field_HD</type>
      <name>lastVertexIndex_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ae64cadc91ee7e2f65f7c5837ee6c7f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordField</type>
      <name>surfaceNames_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>af4f619a005381b194d1580180efaa018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Field_HD</type>
      <name>surfaceNumPoints_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>af880b001aab3ad2307f1283a069fb821</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector_HD</type>
      <name>pointsStartPos_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a94263bd706d0141c168cd117addb773b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Field_HD</type>
      <name>surfaceNumVertices_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a790dc5908afe7157f38405644a4c67d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector_HD</type>
      <name>verticesStartPos_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>a4e3fc9e61fe2ea80a4d8df24931131a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numSurfaces_</name>
      <anchorfile>classpFlow_1_1multiTriSurface.html</anchorfile>
      <anchor>ac45044c04a4d196b4cb653065ed7d8c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::NBS</name>
    <filename>classpFlow_1_1NBS.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>NBSLevel0&lt; executionSpace &gt;</type>
      <name>NBSLevel0Type</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a92ea5ef88e4876a365fb38c076c0d3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::cellIterator</type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a3ba99f348f9f6048be57dec5ad768170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a82ff029cde274e03e3d96f746e64eb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>aadc45b05c157fd6feee136a2a3a4f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>adeec265574fc549d9338272f1c57b5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a4948cb076fb7fd9799508edd039c969a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a7dc9ae0883c6daf992c421ba5b0c1e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>abdb07b09386873310dfe0344556e07fa</anchor>
      <arglist>(&quot;NBS&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBS</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a2ca1ee49b1dc67250d339205eb485fde</anchor>
      <arglist>(const dictionary &amp;dict, const box &amp;domain, real minSize, real maxSize, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>NBS</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a9d60ab83bbe2cd537afe29d506ea235a</anchor>
      <arglist>(const NBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD NBS &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a336a0ab6511d4280eeeb888a5dbfbd2b</anchor>
      <arglist>(const NBS &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~NBS</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>af09b91740fa09377b2f80b3cd26d5367</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>enterBoadSearch</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a48871efcbcaed0e589764bbbd933d3ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>performedSearch</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a2f3fca6830cd43510c731216bcf9dd75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; cellIterator &gt;</type>
      <name>getCellIteratorLevels</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>addc2b32031cff1750dca8efa7f57ad29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCellIterator</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a188d6accc40606c9e68b384a6b9c66f7</anchor>
      <arglist>(int32 lvl) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>numLevels</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>ae079a671a335303acecacf402741cd6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; Cells &gt;</type>
      <name>getCellsLevels</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a8d350443734d1cd2f929e0a672db7c8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCells</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a96a6009263fd79c400b344b2f9854c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>objectSizeChanged</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a74280fc4f4e399c204b2186f7648f6a3</anchor>
      <arglist>(int32 newSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>adb99f8dfb353cba7aca9b1bb8566163d</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange, bool force=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a3c55135a756e6fa68f1ada33d1d18e07</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange, IncludeFunction incld, bool force=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>sizeRatio_</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a3de51aa24b94e991c9c21fb5f3d5c487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>updateFrequency_</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>ae8aa0db7f2d2c19eefe46e3108bdebea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>currentIter_</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>af11548cfec6dd4efe0c8702395cf8ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>performedSearch_</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a0fe252c95c374cf51d37d954d6ecc2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NBSLevel0Type</type>
      <name>NBSLevel0_</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a205b848858b43849be37ec752b0f2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="private">
      <type>bool</type>
      <name>performSearch</name>
      <anchorfile>classpFlow_1_1NBS.html</anchorfile>
      <anchor>a369db5c233d2929a6a016b99e1033901</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::NBSLevel</name>
    <filename>classpFlow_1_1NBSLevel.html</filename>
    <templarg>typename executionSpace</templarg>
    <base>pFlow::NBSLevel0</base>
    <member kind="typedef">
      <type>NBSLevel0&lt; executionSpace &gt;</type>
      <name>NBSLevel0Type</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a92ea5ef88e4876a365fb38c076c0d3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::cellIterator</type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a3ba99f348f9f6048be57dec5ad768170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a82ff029cde274e03e3d96f746e64eb56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>aadc45b05c157fd6feee136a2a3a4f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>adeec265574fc549d9338272f1c57b5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a4948cb076fb7fd9799508edd039c969a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a7dc9ae0883c6daf992c421ba5b0c1e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::mdrPolicyFindPairs</type>
      <name>mdrPolicyFindPairs</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a05b53ac89a47b3a154136e306390feb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::HeadType</type>
      <name>HeadType</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a5be33ee95a67d3544823096d3bdfcb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevel0Type::NextType</type>
      <name>NextType</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>aac46dfcbea7f9fb97afc72a5c5f7e4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a226653ff6aa5c334e608847a463b3b5d</anchor>
      <arglist>(&quot;NBSLevel0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>NBSLevel</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>ab7e91069edc2032463286cec62d57fd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBSLevel</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>ae42ecfce9dee355b03c3a2f7e0884f73</anchor>
      <arglist>(int32 lvl, const box &amp;domain, real cellSize, real sizeRatio, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>NBSLevel</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a2f8ff9eaaab082edf7a820e5c25c9f4c</anchor>
      <arglist>(const NBSLevel &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD NBSLevel &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a566e9ef9286cec109bdc7bac8df74205</anchor>
      <arglist>(const NBSLevel &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~NBSLevel</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>afc1797c3913e9591540c24cf82019d4f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>level</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a85f46d7ca681fa6e13dcbb2eb98e427e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>findPairsCountCross</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a6a1d669abc79b43ee18c007c6aea5b5f</anchor>
      <arglist>(PairsContainer &amp;pairs, NBSLevel &amp;upperLevel)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>level_</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a840743643df2d049937fe560c29b6d32</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>NBSLevels</name>
      <anchorfile>classpFlow_1_1NBSLevel.html</anchorfile>
      <anchor>a7edb968d0d7c183682dabd3391eb3377</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::NBSLevel0</name>
    <filename>classpFlow_1_1NBSLevel0.html</filename>
    <templarg>typename executionSpace</templarg>
    <base>pFlow::mapperNBS</base>
    <class kind="struct">pFlow::NBSLevel0::TagFindPairs</class>
    <member kind="typedef">
      <type>mapperNBS&lt; executionSpace &gt;</type>
      <name>MapperType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>aab314044a6884f6904483bee7b93a67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::cellIterator</type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>afa52ac4d1be4af0ef41af785891951df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>ac4d3b8acf353b5c25e08589ccb899182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a9c7defb1033880a484a305e994da3f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a066684b40e43a1064cbc16dd1f75f9f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>af6d676370bd2ca4de7d29dca00e49d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>afb3d1c7e827101cfa9fd2a79c2c3ce33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::HeadType</type>
      <name>HeadType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a41ba51eecff4044e873dc1a049a021b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MapperType::NextType</type>
      <name>NextType</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a7ff667aea6d5585f7962d40958ae8e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a226653ff6aa5c334e608847a463b3b5d</anchor>
      <arglist>(&quot;NBSLevel0&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>acc134e6c707bee84b5748790c522c5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>ad262edf326ff58e177321fa63613fb95</anchor>
      <arglist>(const box &amp;domain, real cellSize, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a59a9f51be9de6a006c75acde57855c81</anchor>
      <arglist>(const box &amp;domain, int32 nx, int32 ny, int32 nz, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a93451b7f18b49aa55028c6a96e0c3d1a</anchor>
      <arglist>(const box &amp;domain, real cellSize, real sizeRatio, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam, bool nextOwner=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>afdebd7117489ac6165b6f6aced034193</anchor>
      <arglist>(const NBSLevel0 &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD NBSLevel0 &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a992d45a46cc32ce0db97df4e95d18d4f</anchor>
      <arglist>(const NBSLevel0 &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~NBSLevel0</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a4a2ee05b7003624e63b085bd2bfb7b19</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>sizeRatio</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>abca7795db057f0eeddff849c27e8c6b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto &amp;</type>
      <name>diameter</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>af453a2baf0bc4a8d107a3f70f4ece413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a3d0828431ab6a95cdb8dd00c010ac14e</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>broadSearch</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>aaded4d15767bdb25c873d469647ffa36</anchor>
      <arglist>(PairsContainer &amp;pairs, range activeRange, IncludeFunction incld)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>findPairs</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a80897313e23ac68fdcaf6492a5602417</anchor>
      <arglist>(PairsContainer &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>findPairsCount</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a3faa0139c150092c544325a248228d3b</anchor>
      <arglist>(PairsContainer &amp;pairs)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::MDRangePolicy&lt; Kokkos::Rank&lt; 3 &gt;, Kokkos::Schedule&lt; Kokkos::Dynamic &gt;, execution_space &gt;</type>
      <name>mdrPolicyFindPairs</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>aa85f88499a77ed004ba6f9e55b6f6637</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_HD void</type>
      <name>Swap</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a34815f133069dc1ed5f256317cf2e4fb</anchor>
      <arglist>(int32 &amp;x, int32 &amp;y)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>sizeRatio_</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a3de51aa24b94e991c9c21fb5f3d5c487</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real, memory_space &gt;</type>
      <name>diameter_</name>
      <anchorfile>classpFlow_1_1NBSLevel0.html</anchorfile>
      <anchor>a9e62960de95c725742177f9bbee1d4f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::NBSLevels</name>
    <filename>classpFlow_1_1NBSLevels.html</filename>
    <templarg>typename executionSpace</templarg>
    <member kind="typedef">
      <type>NBSLevel&lt; executionSpace &gt;</type>
      <name>NBSLevelType</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>acdbc99f6a6d5e100cd835c9ada5ddf5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::cellIterator</type>
      <name>cellIterator</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a793c29e7b477bb7c772dca00f566ee31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a598b647fbfc371a6e1c6594fa6a1b2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a11ef9918f37570ab8cb4d6bbda69c923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::Cells</type>
      <name>Cells</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ac149a77acd396c0ce9f211b4968331eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Cells::CellType</type>
      <name>CellType</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a3810d08b3beabddce512c36e16a23cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a3191b44b769595bbf13b973a2e8b55a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename NBSLevelType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>aed277d224479cec75ea59a84d7c8e7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; real, real &gt;</type>
      <name>realRange</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>aba2ae5e00abb0679b50fdafd339e642d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NBSLevels</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a877f9f69e1bdbb0afbd6753cfb8cbd2e</anchor>
      <arglist>(const box &amp;domain, real minSize, real maxSize, real sizeRatio, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCellIterator</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a188d6accc40606c9e68b384a6b9c66f7</anchor>
      <arglist>(int32 lvl) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>numLevels</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ae079a671a335303acecacf402741cd6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Cells</type>
      <name>getCells</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a931a91813c0b988864f20e9a6686caea</anchor>
      <arglist>(int32 lvl) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>findPairs</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a80897313e23ac68fdcaf6492a5602417</anchor>
      <arglist>(PairsContainer &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>findPairsCount</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a3faa0139c150092c544325a248228d3b</anchor>
      <arglist>(PairsContainer &amp;pairs)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>build</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ac4d9b554d7571777600bb20765ffe5bb</anchor>
      <arglist>(range activeRange)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>build</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a6ab886e7dd6b9d59e9c2f4544e4c98da</anchor>
      <arglist>(range activeRange, IncludeFunction incld)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>findParticleLevel</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a03741a3b114c2fe06b7846116afee316</anchor>
      <arglist>(int32 first, int32 last)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; Kokkos::IndexType&lt; int32 &gt;, Kokkos::Schedule&lt; Kokkos::Static &gt;, execution_space &gt;</type>
      <name>rangePolicyType</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a1eda470dc3fe355cb038b0a37a296a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>setNumLevels</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ab49ffd122960c5f77356bc4b51db0716</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>setDiameterRange</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a234e85a72d30e817d08db854a0c1632e</anchor>
      <arglist>(real sizeRatio)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initLevels</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a817a0cc08aeac7f0aa99d7c0f70cbce4</anchor>
      <arglist>(const box &amp;domain, real sizeRatio, const ViewType1D&lt; realx3, memory_space &gt; &amp;position, const ViewType1D&lt; real, memory_space &gt; &amp;diam)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>manageAllocateNext</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a31208b51b7d958bce602b493419a0bdd</anchor>
      <arglist>(range active)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>nullify</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a208efdd1e1130250c99037b29f691b4b</anchor>
      <arglist>(range active)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>minSize_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ac7041035e766f4f828a2d4632a0cd266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>maxSize_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a0a11a9247bfa013b72fb14cd9b999931</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numLevels_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>ababba7c90a50aeb2557171103849db1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector&lt; NBSLevelType &gt;</type>
      <name>nbsLevels_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a768bcefd86a365ef9e43ed16ebcd5232</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; realRange, memory_space &gt;</type>
      <name>sizeRangeLevels_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a34152fbdd5a8380245fee6454660673a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; realRange, HostSpace &gt;</type>
      <name>sizeRangeLevelsHost_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>abe54ab4544f2790e6ae0845470d2174b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real, memory_space &gt;</type>
      <name>maxSizeLevels_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a6698323a80b838e5c4c8b46d6c12348b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real, HostSpace &gt;</type>
      <name>maxSizeLevelsHost_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>adace9386a9bd088ed41af9d4a854e9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int8, memory_space &gt;</type>
      <name>particleLevel_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a3b48336670d8e8979a01a7962ce2c386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>range</type>
      <name>activeRange_</name>
      <anchorfile>classpFlow_1_1NBSLevels.html</anchorfile>
      <anchor>a6c02c190c595dadd863a3ecad6ccf4e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::noConstructAllocator</name>
    <filename>classpFlow_1_1noConstructAllocator.html</filename>
    <templarg>class T</templarg>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classpFlow_1_1noConstructAllocator.html</anchorfile>
      <anchor>a7b44f068434c746f3107a9b05f9012e5</anchor>
      <arglist>(U *, Args &amp;&amp;...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cfModels::nonLinear</name>
    <filename>classpFlow_1_1cfModels_1_1nonLinear.html</filename>
    <templarg>bool limited</templarg>
    <class kind="struct">pFlow::cfModels::nonLinear::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::nonLinear::nonLinearProperties</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>af6d26fe46316f0bebc4803b2797ca60f</anchor>
      <arglist>(modelName())</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a80fdbc9b4ef33b8c2cbfde28c2aa833b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonLinear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a4460fe2556a0d78d11fc530a25adcba2</anchor>
      <arglist>(int32 nMaterial, const ViewType1D&lt; real &gt; &amp;rho, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a2f40a392e72023d15d764c8f7bbcaa03</anchor>
      <arglist>(const nonLinear &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>ae43692b7cc8c342ae7282d39d03be162</anchor>
      <arglist>(nonLinear &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinear &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a85780a07bd87d1d2c209317f5bf32dbc</anchor>
      <arglist>(const nonLinear &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinear &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>af3f80b2e1e96d51390372e609b46338b</anchor>
      <arglist>(nonLinear &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~nonLinear</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a3a3b5ef9468425e150dbca579a94c4e0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numMaterial</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>ad6a8ad563503e886d3f97cf98f1fe4ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>contactForce</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a84c397efa5695ac8f097aeb0a0d97536</anchor>
      <arglist>(const real dt, const int32 i, const int32 j, const int32 propId_i, const int32 propId_j, const real Ri, const real Rj, const real ovrlp_n, const realx3 &amp;Vr, const realx3 &amp;Nij, contactForceStorage &amp;history, realx3 &amp;FCn, realx3 &amp;FCt) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>symArray&lt; nonLinearProperties &gt;</type>
      <name>NonLinearArrayType</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a0faa1f3959517d535337a4c918ca7f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readNonLinearDictionary</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a8b733efddd531d2ddf9c2765805f081c</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>modelName</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a853f1f36a584e14513097e873967be96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numMaterial_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>a4e372e37ecfb3b3330833393b27880c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real &gt;</type>
      <name>rho_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>adfcd72b350af8ab13ee809e1fbc63579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonLinearArrayType</type>
      <name>nonlinearProperties_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinear.html</anchorfile>
      <anchor>ad28c90de4bfa31bda60d7dc7c78ebe74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cfModels::nonLinearMod</name>
    <filename>classpFlow_1_1cfModels_1_1nonLinearMod.html</filename>
    <templarg>bool limited</templarg>
    <class kind="struct">pFlow::cfModels::nonLinearMod::contactForceStorage</class>
    <class kind="struct">pFlow::cfModels::nonLinearMod::nonLinearProperties</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>af6d26fe46316f0bebc4803b2797ca60f</anchor>
      <arglist>(modelName())</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearMod</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>ab6573e33bf0d5d1fb02b4c9c7cde172b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonLinearMod</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a8ef7e69e53666b8ec4e6b2c6fc752a04</anchor>
      <arglist>(int32 nMaterial, const ViewType1D&lt; real &gt; &amp;rho, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearMod</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a3fc07af9206c72cac9263f20c13a956a</anchor>
      <arglist>(const nonLinearMod &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearMod</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>acdf26a013d531657d3ec8c029ac70712</anchor>
      <arglist>(nonLinearMod &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinearMod &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>ae95278b49fed92727783e9aedf5d872e</anchor>
      <arglist>(const nonLinearMod &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinearMod &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>ae174be5fa642a6513304a11e6103b171</anchor>
      <arglist>(nonLinearMod &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~nonLinearMod</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a867233625b335d794ec2d7274b484ded</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numMaterial</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>ad6a8ad563503e886d3f97cf98f1fe4ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>contactForce</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a84c397efa5695ac8f097aeb0a0d97536</anchor>
      <arglist>(const real dt, const int32 i, const int32 j, const int32 propId_i, const int32 propId_j, const real Ri, const real Rj, const real ovrlp_n, const realx3 &amp;Vr, const realx3 &amp;Nij, contactForceStorage &amp;history, realx3 &amp;FCn, realx3 &amp;FCt) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>symArray&lt; nonLinearProperties &gt;</type>
      <name>NonLinearArrayType</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a0faa1f3959517d535337a4c918ca7f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readNonLinearDictionary</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a8b733efddd531d2ddf9c2765805f081c</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const char *</type>
      <name>modelName</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a853f1f36a584e14513097e873967be96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numMaterial_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>a4e372e37ecfb3b3330833393b27880c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; real &gt;</type>
      <name>rho_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>adfcd72b350af8ab13ee809e1fbc63579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NonLinearArrayType</type>
      <name>nonlinearProperties_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1nonLinearMod.html</anchorfile>
      <anchor>ad28c90de4bfa31bda60d7dc7c78ebe74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::nonLinear::nonLinearProperties</name>
    <filename>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>a9cc4c283cd480bd755c74f7899959ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>aba0181dc775ec9635fcf6169d3dc65f5</anchor>
      <arglist>(real Yeff, real Geff, real etha_n, real mu)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>ae96d156c7f163341dfded0ab9bfefee9</anchor>
      <arglist>(const nonLinearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinearProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>a445a4db5fd7d936d64333c908afb192e</anchor>
      <arglist>(const nonLinearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>aa6f49e88046a10ff42539d977c91d83f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>Yeff_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>a91d74b91c408c9da94ba581a8004475a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>Geff_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>a2aa7e20d744b6050d70cd6f56627ae3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>ethan_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>ab3d4a1f3cef26e041192b82c72c37f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>mu_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinear_1_1nonLinearProperties.html</anchorfile>
      <anchor>a5e7a8a69645d20ea71c0eb0eb0fd17d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::cfModels::nonLinearMod::nonLinearProperties</name>
    <filename>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>a9cc4c283cd480bd755c74f7899959ea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>aba0181dc775ec9635fcf6169d3dc65f5</anchor>
      <arglist>(real Yeff, real Geff, real etha_n, real mu)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>ae96d156c7f163341dfded0ab9bfefee9</anchor>
      <arglist>(const nonLinearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD nonLinearProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>a445a4db5fd7d936d64333c908afb192e</anchor>
      <arglist>(const nonLinearProperties &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~nonLinearProperties</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>aa6f49e88046a10ff42539d977c91d83f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>Yeff_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>a91d74b91c408c9da94ba581a8004475a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>Geff_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>a2aa7e20d744b6050d70cd6f56627ae3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>ethan_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>ab3d4a1f3cef26e041192b82c72c37f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>mu_</name>
      <anchorfile>structpFlow_1_1cfModels_1_1nonLinearMod_1_1nonLinearProperties.html</anchorfile>
      <anchor>a5e7a8a69645d20ea71c0eb0eb0fd17d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::cfModels::normalRolling</name>
    <filename>classpFlow_1_1cfModels_1_1normalRolling.html</filename>
    <templarg>typename contactForceModel</templarg>
    <member kind="typedef">
      <type>typename contactForceModel::contactForceStorage</type>
      <name>contactForceStorage</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>abde0f8fd1beee5d33aa1df3f5955f216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readNormalDict</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>a2166bf008f0bcbf975cc66ade88dc53a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>aeee112538820a87a21009a9b6427632d</anchor>
      <arglist>(word(&quot;normal&lt;&quot;+contactForceModel::TYPENAME()+&quot;&gt;&quot;))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>normalRolling</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>a4df25d93b5e00f2289e0b9059c5e1d6f</anchor>
      <arglist>(int32 nMaterial, const ViewType1D&lt; real &gt; &amp;rho, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>rollingFriction</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>a8497077d4e9fdea8f9f8c0419cdee854</anchor>
      <arglist>(const real dt, const int32 i, const int32 j, const int32 propId_i, const int32 propId_j, const real Ri, const real Rj, const realx3 &amp;wi, const realx3 &amp;wj, const realx3 &amp;Nij, const realx3 &amp;FCn, realx3 &amp;Mri, realx3 &amp;Mrj) const</arglist>
    </member>
    <member kind="variable">
      <type>realSymArray_D</type>
      <name>mur_</name>
      <anchorfile>classpFlow_1_1cfModels_1_1normalRolling.html</anchorfile>
      <anchor>a85ea430d13591441a957cff38b9c57a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::IOobject::object_t</name>
    <filename>classpFlow_1_1IOobject_1_1object__t.html</filename>
    <templarg>typename dataType</templarg>
    <base>pFlow::IOobject::iObject</base>
    <member kind="function">
      <type></type>
      <name>object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>a4ab00941e125a622129d9669e6a9969d</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>aabff59a098a161ad52c86980852db7db</anchor>
      <arglist>(const dataType &amp;data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; iObject &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>ac8bf3a0489587781ed56983e400320f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>typeName</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>a39359f8faf12774491014a93a9c930e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read_object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>a57192604d396c82e4297a09dcd9457a8</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write_object_t</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>a700659b492de040bcaba50ca7ce362f7</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable">
      <type>dataType</type>
      <name>data_</name>
      <anchorfile>classpFlow_1_1IOobject_1_1object__t.html</anchorfile>
      <anchor>ab875ff0d9fe05289966cf4a20f477bc3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::objectFile</name>
    <filename>classpFlow_1_1objectFile.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>readFlag</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_ALWAYS</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135ae52db7f5bc766c98892c85b3da80035d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_NEVER</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135a5d213848a5257045c66f1131ba592588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_IF_PRESENT</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135a93b5e7478325255e6d8414b6b2ccc6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>writeFlag</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a167fce7aaf9bbff61e0e5ad4815d09fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_ALWAYS</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a167fce7aaf9bbff61e0e5ad4815d09fba37ad78d623d69d7a70f565528efc0f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_NEVER</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a167fce7aaf9bbff61e0e5ad4815d09fbad27c52a51ad59856941a9597905f9130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_ALWAYS</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135ae52db7f5bc766c98892c85b3da80035d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_NEVER</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135a5d213848a5257045c66f1131ba592588</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>READ_IF_PRESENT</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a314ebf993d731f5b477f5b2670de2135a93b5e7478325255e6d8414b6b2ccc6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_ALWAYS</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a167fce7aaf9bbff61e0e5ad4815d09fba37ad78d623d69d7a70f565528efc0f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WRITE_NEVER</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a167fce7aaf9bbff61e0e5ad4815d09fbad27c52a51ad59856941a9597905f9130</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>objectFile</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a03145445e47fe40d36071d3207e4eaae</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>objectFile</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a9ee713efe0634b6da3063aa707ecdeff</anchor>
      <arglist>(const word &amp;name, const fileSystem &amp;localPath, const readFlag &amp;rf=READ_NEVER, const writeFlag &amp;wf=WRITE_NEVER, bool rwHeader=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>objectFile</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>acfc22694eec3cb20477252e35e8d38c4</anchor>
      <arglist>(const objectFile &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>objectFile</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a0d9f2616944d55462ad8c9665b27086c</anchor>
      <arglist>(objectFile &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>objectFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a5c7ca0810f70b09e995e735382a42677</anchor>
      <arglist>(const objectFile &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>objectFile &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a5fed0f51da685ae3925b9611185851fd</anchor>
      <arglist>(objectFile &amp;&amp;rhs)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~objectFile</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a5eb42fccb46707b1c231389b56ec574b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a73572f70de721e7793f801ae26c5a6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fileSystem</type>
      <name>localPath</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a51b74713a538d9aa4cc856153d7c333d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>readFlag</type>
      <name>rFlag</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a349924059ebb9ce3b154dbd6850c601d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>writeFlag</type>
      <name>wFlag</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>af42da690717c749e1ee5108dcee62e7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadAlways</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a7097fa42f98e5a95fd95ec46bdf6cd60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadNever</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a0c27a5cdee1d686f94bea4254bdbe650</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadIfPresent</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a2d01f4526e21bccb1392a344d3e6cbfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWriteAlways</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>acbd01f9965d77d91b82df73d1fc67438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWriteNever</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a91e42168656b6587284c9167ef8b678e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readWriteHeader</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>ae10b53b60cb4631fdeb46271ccab67aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>readFlag</type>
      <name>rFlag_</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a9621f975398ef1e17fc49072820e6cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>writeFlag</type>
      <name>wFlag_</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>ac62d445ccbee618065c97aa500243699</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>localPath_</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a850e22a1b68d91fc60267256452d5411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>readWriteHeader_</name>
      <anchorfile>classpFlow_1_1objectFile.html</anchorfile>
      <anchor>a44135ded2d939f86fa2d52a5b943a6b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::oFstream</name>
    <filename>classpFlow_1_1oFstream.html</filename>
    <base>pFlow::fileStream</base>
    <base>pFlow::Ostream</base>
    <member kind="function">
      <type></type>
      <name>oFstream</name>
      <anchorfile>classpFlow_1_1oFstream.html</anchorfile>
      <anchor>a1119071be87c0f4284fdbe073b2991fa</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oFstream</name>
      <anchorfile>classpFlow_1_1oFstream.html</anchorfile>
      <anchor>a9688e31df5de04a2aa1bfe5e42366948</anchor>
      <arglist>(const oFstream &amp;src)=delete</arglist>
    </member>
    <member kind="function">
      <type>oFstream &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1oFstream.html</anchorfile>
      <anchor>af7d7bc078ae93aa83e33f5613c30fa66</anchor>
      <arglist>(const oFstream &amp;rhs)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~oFstream</name>
      <anchorfile>classpFlow_1_1oFstream.html</anchorfile>
      <anchor>a67bdc0a2fb112736e6959c7cd3e29195</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Ostream</name>
    <filename>classpFlow_1_1Ostream.html</filename>
    <base>pFlow::iOstream</base>
    <member kind="function">
      <type></type>
      <name>Ostream</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a19efde4fc96bae2d951c923eab607a0a</anchor>
      <arglist>(std::ostream &amp;os, const word &amp;streamName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Ostream</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a20bce9a0e224aa927162cc544ff0f11a</anchor>
      <arglist>(const Ostream &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a828b34760550d09ae2cc49120f7dc89f</anchor>
      <arglist>(const Ostream &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a05ff7aca2b2d901acaec7624079f415e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>aa311cb71a61f3cf642e33d5981dc4d55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ada47b7405e5eaa26f35e795f291164bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>af0296de2f120be163c138350c0c26507</anchor>
      <arglist>(const token &amp;tok) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a10c5d22891f2677067c2fec2d3c366c8</anchor>
      <arglist>(const char c) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a092e63db7d7406b2999bb7203d8eb91b</anchor>
      <arglist>(const char *str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a2935f4818bb182d88333d2b6be2c9c47</anchor>
      <arglist>(const word &amp;str) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>writeQuoted</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ad49e7395bb1832b095b5567656beae88</anchor>
      <arglist>(const word &amp;str, const bool quoted=true) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a8f4206992ef2fb33e42bb9e6a4bf11cb</anchor>
      <arglist>(const int64 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ad421a57af704a01fded92733aaa5c7cf</anchor>
      <arglist>(const int32 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ada4a9df866ae09af27c6df9a1a59469d</anchor>
      <arglist>(const label val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a00226ab20a3e220dc468ac2ec7deba8e</anchor>
      <arglist>(const uint32 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a7e6df205da82ec7230d7678620483fe0</anchor>
      <arglist>(const uint16 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a9f4f8b12e074652510a84c0ba51111ad</anchor>
      <arglist>(const float val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a44e32a52d8dec9b952a6a018d02ef805</anchor>
      <arglist>(const double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>indent</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a189eba34a209327583f582f69ce4dfe4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ac1e28a2b4cd2a6043237b98d22f0feb9</anchor>
      <arglist>(const ios_base::fmtflags f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>adac116554b543b7c4228c018a85882f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endl</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a0bef5572a56c7db8edc75d96858e5b43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a9df421e4eff3c8fb2d7059b9177c165b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>aa65481defe8d6950cc47e6f8f54d93c5</anchor>
      <arglist>(const char fillch)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>ad72663daf610f2a0833a2fc3d78e4fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a591f2871d455612dbf55722451fbbf19</anchor>
      <arglist>(const int w)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a74bc37758ffb63d86025a0ca596e9039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a752ab0d096f9056b329d8c0167bdef66</anchor>
      <arglist>(const int p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream &amp;</type>
      <name>stdStream</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>adf87dd3067073e5d4c3fc97e79deb196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::ostream &amp;</type>
      <name>stdStream</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a434eaf80cdd94a711423b99c55784c39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>std::ostream &amp;</type>
      <name>os_</name>
      <anchorfile>classpFlow_1_1Ostream.html</anchorfile>
      <anchor>af20ae96d3a771bd807d36aae8cfd0d4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::oTstream</name>
    <filename>classpFlow_1_1oTstream.html</filename>
    <base>pFlow::iOstream</base>
    <member kind="function">
      <type></type>
      <name>oTstream</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>aa2c60dbf6e9df34e53e0b06114730f80</anchor>
      <arglist>(const word &amp;nm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oTstream</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a9ae105923be1772582b3761f69d92b8c</anchor>
      <arglist>(const oTstream &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>oTstream</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a0175c397bd351c501d68c7c0ff004af8</anchor>
      <arglist>(oTstream &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~oTstream</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a869dd31a9b2ff77e9a481c7eabf71a24</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const tokenList &amp;</type>
      <name>tokens</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a578844cadac20c3e23f6cf179ef2a1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tokenList &amp;</type>
      <name>tokens</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a50f1f4c63900ce5e481479f971a767d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>aa3b476f06fa0df546adf5f376083ec2b</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>af93f721e529951d7770ee01fcd30fecf</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a26b5f60ec0f8d45f3e61562ff788ff38</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a379353cb86c3a083fae92681013a6051</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>writeQuoted</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a72ba64fb076bc369d68140a6ab8deb8a</anchor>
      <arglist>(const std::string &amp;str, const bool quoted=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a8f4206992ef2fb33e42bb9e6a4bf11cb</anchor>
      <arglist>(const int64 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ad421a57af704a01fded92733aaa5c7cf</anchor>
      <arglist>(const int32 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ada4a9df866ae09af27c6df9a1a59469d</anchor>
      <arglist>(const label val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a00226ab20a3e220dc468ac2ec7deba8e</anchor>
      <arglist>(const uint32 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a7e6df205da82ec7230d7678620483fe0</anchor>
      <arglist>(const uint16 val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a9f4f8b12e074652510a84c0ba51111ad</anchor>
      <arglist>(const float val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual iOstream &amp;</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a44e32a52d8dec9b952a6a018d02ef805</anchor>
      <arglist>(const double val) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>append</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a3ebe3cf983e1255171dc04ea202c2e87</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>append</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>af9502a9443b4d81f0fbec5fc897191ec</anchor>
      <arglist>(const tokenList &amp;tLisk)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>rewind</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ab8734e666421c9fe3b6380a818c6c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>indent</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a25eb5023b0abf0d0331bbf22ce47eaad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ad3aed50bc3b4459454ccb8c64f5ced5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endl</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a319600217c15807f91fe82558a670290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a18a2036b582711254ceb4bbb5df94135</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a28623218f0dd4c0b0a32d8fd846cbb6b</anchor>
      <arglist>(const char)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a9b61ef0d32670df138a7a60b2b56ae9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>width</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a0c5abe84f3d911df4212b2401a8867c4</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>af574adc6c2f2e1c2a054ff6a167dd456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>precision</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>afa2c1826bcba76af371af3257fd2addb</anchor>
      <arglist>(const int)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>ae1cdc69a3d1b9a79aa72ee54c1ea3e44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ios_base::fmtflags</type>
      <name>flags</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a82cca7e83c1c39a4f1599c1d0481d044</anchor>
      <arglist>(const ios_base::fmtflags)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>tokenList</type>
      <name>tokenList_</name>
      <anchorfile>classpFlow_1_1oTstream.html</anchorfile>
      <anchor>a1e95a6fa473cd29f5dde06a6d214026c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::sortedPairs::pairAccessor</name>
    <filename>structpFlow_1_1sortedPairs_1_1pairAccessor.html</filename>
    <member kind="typedef">
      <type>typename sortedPairs::PairType</type>
      <name>PairType</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a68d54352915919defa1146d6beb06cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>size</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a0fed21f49ffeaa77eaf1071b5c8a9a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>loopCount</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a864176c34cdbaa2bb9241751c6f4c922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isValid</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a134ba9a72382631697a4339be83fb492</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD PairType</type>
      <name>getPair</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>aaada250d99b365c96e14a88f00d45c76</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>getPair</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a0661587307d1c22264278e7e6dd52d4a</anchor>
      <arglist>(int32 i, PairType &amp;pair) const</arglist>
    </member>
    <member kind="variable">
      <type>int32</type>
      <name>size_</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>afca1d7282f84072f96f25bf93a42a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ViewType1D&lt; PairType, ExecutionSpace &gt;</type>
      <name>sortedParis_</name>
      <anchorfile>structpFlow_1_1sortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a8dd81788531e3a5c171a94443caeaa34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::unsortedPairs::pairAccessor</name>
    <filename>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</filename>
    <member kind="typedef">
      <type>typename UnsortedPairs::PairType</type>
      <name>PairType</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>acf4d9906ba8a5697d815148b4c432239</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>size</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a0fed21f49ffeaa77eaf1071b5c8a9a31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>loopCount</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a864176c34cdbaa2bb9241751c6f4c922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isValid</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>aba79e8edf03103828a6f0eab13e3e938</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD PairType</type>
      <name>getPair</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a17e844c5901f2f5ab7019a023280e27c</anchor>
      <arglist>(int idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>getPair</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>ab57ac29c961a27170a6c69540c547ab4</anchor>
      <arglist>(int32 idx, PairType &amp;pair) const</arglist>
    </member>
    <member kind="variable">
      <type>ContainerType</type>
      <name>Container_</name>
      <anchorfile>structpFlow_1_1unsortedPairs_1_1pairAccessor.html</anchorfile>
      <anchor>a5bede346a5aace7ab58a2c4e0fe563ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::particleIdHandler</name>
    <filename>classpFlow_1_1particleIdHandler.html</filename>
    <member kind="function">
      <type></type>
      <name>particleIdHandler</name>
      <anchorfile>classpFlow_1_1particleIdHandler.html</anchorfile>
      <anchor>ac3593ef0f65358a88a49bd94305bbcdc</anchor>
      <arglist>(int32PointField_HD &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>getNextId</name>
      <anchorfile>classpFlow_1_1particleIdHandler.html</anchorfile>
      <anchor>aab9e56419af88aa23546fc6ac70c8caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>nextId</name>
      <anchorfile>classpFlow_1_1particleIdHandler.html</anchorfile>
      <anchor>a7130e3d94dc53173b7ccc6a6ebcf3195</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>nextId_</name>
      <anchorfile>classpFlow_1_1particleIdHandler.html</anchorfile>
      <anchor>aef6608c59885d9c2ca9703cdf2067a8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::particles</name>
    <filename>classpFlow_1_1particles.html</filename>
    <base>pFlow::eventObserver</base>
    <base>pFlow::demParticles</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aba08b9f91e550622706972bfda2fb71d</anchor>
      <arglist>(&quot;particles&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>particles</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aa362eaa5ead42bfa9cdfe00a2eca65c2</anchor>
      <arglist>(systemControl &amp;control, const word &amp;integrationMethod)</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a4cc857362e9113140f9b4ae09effec91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a93afe73106d132e6f632f5928654e051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>integrationMethod</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a887c17e25e0e1482fa64676cfd8c8e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>dynPointStruct</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ac81e6f2e90846b5325090ed38eec0a16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>dynPointStruct</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a314faec5b12e936008694524bcb8cdaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ae7e78c902046f401afebcacdf5a647e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a0a523d138121759d3f8df3fcafade2c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a10efdf47ffedbdc720f71c2f72b98d98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a234de5cb432c97fcb4b0f806bb86624e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>activePointsMaskD</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>abd220b937dfdbcf32dc9e8266e4cd099</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>numActive</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a2b5fdb4b295d0f3bf1b91ba12cbfa381</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allActive</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>af49dbf7a6389f77004cd245086a25c32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>activeRange</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aaab44813a7f4610612ccfe157d45564e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>activePointsMaskH</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ab7586e71d34241c9dc06bf6497c8a8fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pointPosition</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a9f5d75308a84468e0913d6e694bb4340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a7ecee1091a398a778754c1b4edadc59d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>acaf8cde98ec6d2c8f9f5bdf42da72d1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>velocity</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a82194fe26e893578978b6496dda68547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>id</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>abb5e7bcb90eb111fefb1c0e70dc240e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>id</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a124d8a38357ec2bac63dd59890095951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>diameter</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>af2b021458e8b88a5c86216c360272533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>diameter</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a43597eb82e9d31542b2002f08cb05520</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>mass</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a63f57563de722b30cc182a393b980d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>mass</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a4af117372fc8a79247177a5dd2724304</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>accelertion</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a14b355e1e3552755d05ec3d2ba9d2bf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>accelertion</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>abcf923704771b5b0b9f9ab2a36f30974</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>realx3PointField_D &amp;</type>
      <name>contactForce</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ac726bd46ab9994788e48a02e1c733d90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realx3PointField_D &amp;</type>
      <name>contactForce</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>adba8e50e0f4ae5beec339593cf8b679f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realx3PointField_D &amp;</type>
      <name>contactTorque</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a78eadf0c22049edb50b661a229b2d9c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realx3PointField_D &amp;</type>
      <name>contactTorque</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a36db07e47f932db4778eba556244e6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>propertyId</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a7f7a3b6f8fb3e514ccb264c035215ba7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>propertyId</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a0cb78f65c0d99e8804f970c255034c45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>shapeName</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ab208dee37a9f265ecb814d58e3f3bc48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>shapName</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>acfc05f918c13bbbfeb16af49fb3e9f5a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ada71b97666fe3f66b31690bf12633c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>insertParticles</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a7c043d8a8c169debd35ac5afbce18fba</anchor>
      <arglist>(const realx3Vector &amp;position, const wordVector &amp;shapes, const setFieldList &amp;setField)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3PointField_D &amp;</type>
      <name>rAcceleration</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a8f202cf4a74cbe075bef0aba0ea76148</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const realx3PointField_D &amp;</type>
      <name>rAcceleration</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a5923dbebbb1b2c600bc354f0b5caa845</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const realVector_D &amp;</type>
      <name>boundingSphere</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ab83edaa70619ee7cf3cfc6bf4b9d8635</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual word</type>
      <name>shapeTypeName</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>af1ef13dca34d5f3770edd71a42582560</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>boundingSphereMinMax</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>acf150792ac461fc70526040300a41ce9</anchor>
      <arglist>(real &amp;minDiam, real &amp;maxDiam) const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uniquePtr&lt; List&lt; eventObserver * &gt; &gt;</type>
      <name>getFieldObjectList</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a2505bb9c917d337dddb089997023c0af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>zeroForce</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aee1fb957af9d737605b6e8701e6d14f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>zeroTorque</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a305a8984d573e13f073ba7ec0ecf19ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Time &amp;</type>
      <name>time_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a97d6a106e35c444e647a69f8a8ba7f9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>integrationMethod_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a597cf8f88eaa1b7286042025e5d7b9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dynamicPointStructure</type>
      <name>dynPointStruct_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a51a83cecc7ff3322ab09cb31c070692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordPointField &amp;</type>
      <name>shapeName_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a4741b994d62377ef249268f9c5ad50da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32PointField_HD &amp;</type>
      <name>id_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a86b3b17c92b5fab74cbb53028f774bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8PointField_D &amp;</type>
      <name>propertyId_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a0bfbc43a520897af519abd646bfd1266</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realPointField_D &amp;</type>
      <name>diameter_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>a098bb28cf6a1592a13c21430acd6c837</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realPointField_D &amp;</type>
      <name>mass_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>af05a371c8526a768920e8f8a71cadf68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>accelertion_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aef5f1c8b4380ae412f06c32d4c54ca91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>contactForce_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>add210827611818c03f6ca2248e1c080c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>contactTorque_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>ac8a512a571ec85bb1dcf7a330e5c0099</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>particleIdHandler</type>
      <name>idHandler_</name>
      <anchorfile>classpFlow_1_1particles.html</anchorfile>
      <anchor>aa6abc69406a4cfc1788e371a718a8143</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::PeakableRegion</name>
    <filename>classpFlow_1_1PeakableRegion.html</filename>
    <templarg>typename RegionType</templarg>
    <base>pFlow::peakableRegion</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>aaface9f1c2bfbbec54925dc2af3ba4d4</anchor>
      <arglist>(&quot;peakableRegion&quot;, RegionType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PeakableRegion</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>accb41c4146e4871063d4163ed838dd97</anchor>
      <arglist>(const word &amp;type, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>abfe18bc437d6d79cd5071e97d9133ae7</anchor>
      <arglist>(peakableRegion, PeakableRegion, word)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual uniquePtr&lt; peakableRegion &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a491947a527a637070c3ae11e01f664ea</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual peakableRegion *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a0920d18bc2b0d9c4efe42d00da2d7d2b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~PeakableRegion</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a2303ac8487ac7bec46a027338fccc448</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>abbdd281687ac228919695d6c259f1590</anchor>
      <arglist>(const realx3 &amp;point) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a66dadfa799c9079c53ec6bd664dcfb51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a9b8bf04caa102276f5d5e365998cd1df</anchor>
      <arglist>(const dictionary &amp;dict) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>a775ec4956e0bf2b80153403e4db10910</anchor>
      <arglist>(dictionary &amp;dict) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RegionType</type>
      <name>region_</name>
      <anchorfile>classpFlow_1_1PeakableRegion.html</anchorfile>
      <anchor>ac3c9c4fbf78fa4fec1ce1a58bcb0a26a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::peakableRegion</name>
    <filename>classpFlow_1_1peakableRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>aedacec9945ee088771ad35c29bf8f7f9</anchor>
      <arglist>(&quot;peakableRegion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>peakableRegion</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>abf43b56be2edb758022e5748d0adc983</anchor>
      <arglist>(const word &amp;type, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>a7a1b3492ffa7d02882ef2242a2066e18</anchor>
      <arglist>(peakableRegion, word,(const word &amp;type, const dictionary &amp;dict),(type, dict))</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uniquePtr&lt; peakableRegion &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>ad2db4dcacf1486a9d486e3a331260fd6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual peakableRegion *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>a28a3912b9d434bb4327f2fb3c08291b9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~peakableRegion</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>a3baed48aad1c9e654cd8caa55dfcb18a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>adcb491106ace62f312e9ed9931c72b12</anchor>
      <arglist>(const realx3 &amp;point) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>a4934f4544d2ebe36ad5ee2a1a53529ab</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>af5f2d605171cd6bcbf8c0d59d1aa3832</anchor>
      <arglist>(const dictionary &amp;dict)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>aa713a4038669cc59eadaab3279aaac00</anchor>
      <arglist>(dictionary &amp;dict) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; peakableRegion &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1peakableRegion.html</anchorfile>
      <anchor>a7c89091eec63fb3273bfeac98f38343f</anchor>
      <arglist>(const word &amp;type, const dictionary &amp;dict)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::planeWall</name>
    <filename>classpFlow_1_1planeWall.html</filename>
    <base>pFlow::Wall</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>af08886f30d0e85a6868cb28218d74f31</anchor>
      <arglist>(&quot;planeWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>planeWall</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>a7866943a14f2b80380120afa8663cdde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>planeWall</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>a67389258d538d631ad461fc64ca65a4f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>planeWall</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>a3fb08e171d01444b4e4b7a21e2d964c5</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p4, int32 numDiv12=1, int32 numDiv23=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>ab15b31cef60d9f92eceea563eee86fed</anchor>
      <arglist>(Wall, planeWall, dictionary)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readPlaneWall</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>a549697ff2b459d3f6f0d888e6ab32e30</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addWall4</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>acbaf6fa391684ef30020e453d9aaac0e</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p4)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkFlatness</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>acf2bf4d43b1d6fb755e34daeba7f9500</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p4)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>addPlaneWall</name>
      <anchorfile>classpFlow_1_1planeWall.html</anchorfile>
      <anchor>a79ff8be1554af7901ffb5331dea61568</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p4, int32 numDiv12=1, int32 numDiv23=1)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::sphTriInteraction::pLine</name>
    <filename>structpFlow_1_1sphTriInteraction_1_1pLine.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>pLine</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>acf2ba320414962a6b732442ae47cd2cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>pLine</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>acfd3ecebffc5ea62d3ce8652616096ec</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>point</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>a6e9513d0b6634e97d81f0d7a3595248a</anchor>
      <arglist>(real t) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>projectPoint</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>a03c6784ff46ffab948664762095b0c47</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>projectNormLength</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>aae66a491cb295819647c4f34d23c7453</anchor>
      <arglist>(realx3 p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>lineSphereCheck</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>aabd9c83babb8fd250cae2482ddea4f13</anchor>
      <arglist>(const realx3 pos, real Rad, realx3 &amp;nv, realx3 &amp;cp, real &amp;ovrlp) const</arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>p1_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>a3dbbeee301e1c6cf679b8f2bbbb9ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>p2_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>a0c834510e42988cef9d46bac7d78c307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>v_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>aa09108d3aa152c6ac6927db8b7d6e9f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>L_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1pLine.html</anchorfile>
      <anchor>ac4b830c185f1946da912382038319b61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pointField</name>
    <filename>classpFlow_1_1pointField.html</filename>
    <templarg>template&lt; class, class &gt; class VectorField</templarg>
    <templarg>class T</templarg>
    <templarg>class MemorySpace</templarg>
    <base>pFlow::eventObserver</base>
    <base>pFlow::Field</base>
    <member kind="typedef">
      <type>pointField&lt; VectorField, T, MemorySpace &gt;</type>
      <name>pointFieldType</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a1063c9fa94710fcea36468cd35295fe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorField, T, MemorySpace &gt;</type>
      <name>FieldType</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a5e050a125891e919a41915663f1871f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::VectorType</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a21a2a37839edb0ffc02a7cfac6ca72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>ad9407c8288db9ae18e7902d8dc299b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constIterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aa3fec7e25f50ac758c32ed1c95874adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aebe3eaed133a292a0698d6da1e3add0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constReference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a138e3112b462f65f1ad50a9bf56e1da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::valueType</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aee590d7dd65b9f02778474552e5a76f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::pointer</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aa3eef3be821cfdd7a297e2b86689b0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constPointer</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aa5df8e4ad5359a7c041b10c56d9eec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a299b5ee396d969589ede9a5880bfa831</anchor>
      <arglist>(&quot;pointField&quot;, T, VectorType::memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>ad45afd3b2dbf5ddf23e4632abbd59113</anchor>
      <arglist>(const pointStructure &amp;pStruct, const T &amp;defVal, bool subscribe=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a615a338c0b4f44a8282545bc24ad7f33</anchor>
      <arglist>(const pointStructure &amp;pStruct, const T &amp;val, const T &amp;defVal, bool subscribe=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a7a9f02d4ecd31574afa11ff15ce2730c</anchor>
      <arglist>(const pointField &amp;src, bool subscribe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a1a529c131e9dd11ed01a452cf85cfa81</anchor>
      <arglist>(const pointField &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a4e3dcdd8ee62b6d3f6a27404da2cddc2</anchor>
      <arglist>(pointField &amp;&amp;src)=delete</arglist>
    </member>
    <member kind="function">
      <type>pointField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a2dd413ae6bd64de854f127dfd90b23d5</anchor>
      <arglist>(const pointField &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>pointField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a13fa5ce46f566437269e2dc76f62f902</anchor>
      <arglist>(pointField &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; pointFieldType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>ac8c49350b9d33728e623945aa3b775ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pointFieldType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a78ffe21fb331ee594193fb1763e91c4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const pointStructure &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a6dce327cc1a5fe386ab2912d8a72d237</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>allActive</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aab9550b3f59f76a254d15a2d537bb395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>isActive</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a785cd9cdbd48a18c6bddb623fa1740da</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pointFlag</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a99986609b613b876264a259c6d79e250</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>range</type>
      <name>activeRange</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>afef304b4d4497e45857f6edef9b049e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>abae5b084c84ba20afd60cbbec92e3124</anchor>
      <arglist>(const eventMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readPointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>ab0f80e66016e581c7c92ac96e43c3eca</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writePointField</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aa8b686deb96050edefdcef6f22aab8f0</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const pointStructure &amp;</type>
      <name>pStruct_</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a5c62d7bde0e3c333317fabe4b8806bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>defaultValue_</name>
      <anchorfile>classpFlow_1_1pointField.html</anchorfile>
      <anchor>a3ede7be1f8d98c2fa4af7860cdcaf787</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pointRectCell</name>
    <filename>classpFlow_1_1pointRectCell.html</filename>
    <member kind="typedef">
      <type>mapperNBS&lt; DefaultHostExecutionSpace &gt;</type>
      <name>mapType</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>ac353c5b34a0eb4c8cbdf8a59e22f5b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename mapType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a2bdbc2f94e8d70ef3e12dd62be506904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointRectCell</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a587a174e1f96e4bc49ada8bcd6343490</anchor>
      <arglist>(const dictionary &amp;dictMesh, const pointStructure &amp;pStruct, repository &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>mesh</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>af2cf8561cff2af17cccc1c2e568fe80c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>processedRepository</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a26e806a02dbaf38bf71d88fe7099d635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mapPOints</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>ab1b3e7c22e40d6e7a13bf59b378a8bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getCellIterator</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a639ca8a7754aa6a5ede02cb5346b8fa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>nPointInCell</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a1b97a8aa930512ea0e7f7f8148cfe119</anchor>
      <arglist>(int32 i, int32 j, int32 k) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository &amp;</type>
      <name>processedRepository_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a19ac6c317c17bc33e508b2a4a4907cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rectangleMesh &amp;</type>
      <name>mesh_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a353acd72ef8fd89b848a152333d49691</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const pointStructure &amp;</type>
      <name>pStruct_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a5c62d7bde0e3c333317fabe4b8806bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; realx3, memory_space &gt;</type>
      <name>pointPosition_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a7ec329c37c34493564c088f010bde5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mapType</type>
      <name>map_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a3d5486db7da6fc8fcf1495b5607ca6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32RectMeshField_H</type>
      <name>nPointInCell_</name>
      <anchorfile>classpFlow_1_1pointRectCell.html</anchorfile>
      <anchor>a73f3d1b3ff34ba10725fb65f41f58cb0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pointStructure</name>
    <filename>classpFlow_1_1pointStructure.html</filename>
    <base>pFlow::eventSubscriber</base>
    <class kind="class">pFlow::pointStructure::activePointsDevice</class>
    <class kind="class">pFlow::pointStructure::activePointsHost</class>
    <member kind="enumeration">
      <type></type>
      <name>PointFlag</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a265edb5715625a3ea1510cccc80560df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETED</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a265edb5715625a3ea1510cccc80560dfaae88752b9379248f07e2c3fdc064d998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a265edb5715625a3ea1510cccc80560dfa33cf1d8ef1d06ee698a7fabf40eb3a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETED</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a265edb5715625a3ea1510cccc80560dfaae88752b9379248f07e2c3fdc064d998</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ACTIVE</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a265edb5715625a3ea1510cccc80560dfa33cf1d8ef1d06ee698a7fabf40eb3a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a79cf90bf54b5dc2b8cd0415152ee0875</anchor>
      <arglist>(&quot;pointStructure&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aa4f0acc8c030ce3f2be8879899228d37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a684952fa473b1820b5d9e1f85f43919b</anchor>
      <arglist>(const int8Vector &amp;flgVec, const realx3Vector &amp;posVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ab70389f2567e6b6b3e2cf544d0e637d4</anchor>
      <arglist>(const realx3Vector &amp;posVec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aae6ee03aaa8fa9fbf93c96fbc191c759</anchor>
      <arglist>(const pointStructure &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a766a3cb046f9aace76721476157dec2d</anchor>
      <arglist>(pointStructure &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>pointStructure &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>adaad032df9dfce55aac842ee9e3a7fb6</anchor>
      <arglist>(const pointStructure &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>pointStructure &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ab0337f76e1ebcd1a7a8826df44e26e67</anchor>
      <arglist>(pointStructure &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~pointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a9941756999b47dacfc1fca276472cc12</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>activePointsDevice</type>
      <name>activePointsMaskD</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ad81a0ac43e7801c723a8976f90ea5d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>activePointsHost</type>
      <name>activePointsMaskH</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>abca48c448a52376f2fdaf77e7481b72f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H const realx3Field_D &amp;</type>
      <name>pointPosition</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a4ab0919df14384c796ef7c0777b97387</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H const int8Field_HD &amp;</type>
      <name>pointFlag</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a2aebeb891855561c183bb48d46246b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>pointPositionHostAll</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aca3c70111b15c4a1ff2b3b56b3d7c4b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a7fd505d804f671e5714194ca63a9155f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H label</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aa7618651ffb027109126be4771bac4cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H label</type>
      <name>numActive</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aa90bf675595664df833d4dfd361b3863</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>allActive</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a2ce5480679b04413dd607e300cfd1d7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H range</type>
      <name>activeRange</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a7d8fce812101d1c38607cac47a618b8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>isActive</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a785cd9cdbd48a18c6bddb623fa1740da</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H size_t</type>
      <name>markDeleteOutOfBox</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a5ed14c8dd71456ae98f9f3122bc36cda</anchor>
      <arglist>(const box &amp;domain)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FUNCTION_H bool</type>
      <name>updateForDelete</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a9b3346d6a97542cabc9653282eda4a31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H auto</type>
      <name>insertedPointIndex</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a12826e5d1ae021ea1945fa6969d16086</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H auto</type>
      <name>insertedPointIndexH</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ad4d8846f33f2c2d33873fc529b35f0b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H auto</type>
      <name>insertedPointIndexD</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a01e096ba69cc9cf35320e827465f7337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FUNCTION_H uniquePtr&lt; int32IndexContainer &gt;</type>
      <name>insertPoints</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a9d20becf23a4c5cb98ff7b4e05717190</anchor>
      <arglist>(const realx3Vector &amp;pos, const setFieldList &amp;setField, repository &amp;owner, const List&lt; eventObserver * &gt; &amp;exclusionList={nullptr})</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>readPointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>addd0db43c233e851c7ef9b357a5fdeba</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>writePointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a329d7fb71b168b07c6536afeb97880fa</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const size_t</type>
      <name>maxSizeDefault_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ad77e9b360d4fbedd81ae50586729695e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H bool</type>
      <name>evaluatePointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a78f7c96daeb567a221cd382f8e23f9ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H void</type>
      <name>setNumMaxPoints</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a0c647354823c504adcf32e65b70b46ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H realx3Field_D &amp;</type>
      <name>pointPosition</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a6037e075cd66d8082a48f8ea203ce080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H int8Field_HD &amp;</type>
      <name>pointFlag</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a472996d3102d6fc378c25fede6f51732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FUNCTION_H uniquePtr&lt; int32IndexContainer &gt;</type>
      <name>getNewPointsIndices</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a3d039dd7281b12efe26e02f64c5a4a43</anchor>
      <arglist>(int32 numNewPoints) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numPoints_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a359635c7fac59b5bfc19941fffb5cb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>maxPoints_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ab9e4162d96661b7497d5f023010ea028</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int8Field_HD</type>
      <name>pointFlag_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ae2cb8869572656a6734c3c2806f5b320</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3Field_D</type>
      <name>pointPosition_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a8ef76d271b8ab8c8b4f3af04f17e6f97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numActivePoints_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a0858a722cbea1a0b22d3b90fd4f44e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>range</type>
      <name>activeRange_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a6c02c190c595dadd863a3ecad6ccf4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32IndexContainer</type>
      <name>tobeInsertedIndex_</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>a1be475213d1735ff93b694f9e87dcf9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>dynamicPointStructure</name>
      <anchorfile>classpFlow_1_1pointStructure.html</anchorfile>
      <anchor>ae463715b3c82ae0f8d56122e37372a0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::positionOrdered</name>
    <filename>classpFlow_1_1positionOrdered.html</filename>
    <base>pFlow::positionParticles</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a38d92429ef2c6d09294581f9fd9f99b3</anchor>
      <arglist>(&quot;positionOrdered&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ac28a478bcfe3fffe5091e1195d300d15</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>aeeea73d4f6dff0fb07b3252baaa40987</anchor>
      <arglist>(positionParticles, positionOrdered, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a9f69d5c089b2a1dbf9e750758efdf386</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a38d92429ef2c6d09294581f9fd9f99b3</anchor>
      <arglist>(&quot;positionOrdered&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ac28a478bcfe3fffe5091e1195d300d15</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>aeeea73d4f6dff0fb07b3252baaa40987</anchor>
      <arglist>(positionParticles, positionOrdered, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a9f69d5c089b2a1dbf9e750758efdf386</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findAxisIndex</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ae64068f6cc0992b2a453f414a3c6286c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionPointsOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a18454745f27f5d71dc681199f801675d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findAxisIndex</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ae64068f6cc0992b2a453f414a3c6286c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionPointsOrdered</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a18454745f27f5d71dc681199f801675d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>poDict_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ac662965432486e8e31ed594448bc6893</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>diameter_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a5a985e0df87ccead6a8c5dc17917856e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numPoints_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a359635c7fac59b5bfc19941fffb5cb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>axisOrder_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a97d143acc011387029f49e7c5acf7cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>uVector1_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>ab0af85f12750119fe2884c59cdae33e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>uVector2_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a19ceb9d85ae9173a1e547f21e21c13bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>uVector3_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a9922dfb7175fa3effd633822762e73cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3Vector</type>
      <name>position_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>a56f883f3aedea00c95a16c93d6a245ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>box_</name>
      <anchorfile>classpFlow_1_1positionOrdered.html</anchorfile>
      <anchor>aefb81f563e3df7617831459d0ab0b5ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::positionParticles</name>
    <filename>classpFlow_1_1positionParticles.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a7eeb12a9a46010fc76a2aa1dad2135fa</anchor>
      <arglist>(&quot;positionParticles&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionParticles</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a886e27b5a049d60738b9a2eae8323303</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a45293110a3508b48363153274659d639</anchor>
      <arglist>(positionParticles, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionParticles</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a374f0c7801a2613b27347d68753ef70a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ade57254a783ea1e8d059d3a94665dcd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ab50b1cdd1f8dfe0339e7a91f64934c7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a2a11f8c764338603f765f909cf36f250</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>aa7f179b37262646dd1a36e50c3924d4a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ad3db7d8970a68df712d8d3b305f19a83</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector</type>
      <name>getFinalPosition</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>adaf43bf7eef63499afd8a277636d8114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a7eeb12a9a46010fc76a2aa1dad2135fa</anchor>
      <arglist>(&quot;positionParticles&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionParticles</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a886e27b5a049d60738b9a2eae8323303</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a45293110a3508b48363153274659d639</anchor>
      <arglist>(positionParticles, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionParticles</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a374f0c7801a2613b27347d68753ef70a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ade57254a783ea1e8d059d3a94665dcd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ab50b1cdd1f8dfe0339e7a91f64934c7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a2a11f8c764338603f765f909cf36f250</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>aa7f179b37262646dd1a36e50c3924d4a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ad3db7d8970a68df712d8d3b305f19a83</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector</type>
      <name>getFinalPosition</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>ac663cf426f2bbf7bddffb5da04147e42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; positionParticles &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a87c69e797a0bb2d2636d1d1a5146a570</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; positionParticles &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a7f4528c2e978293d4317f18e02749805</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>realx3Vector</type>
      <name>sortByMortonCode</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>acaa0dff282b290a55e1ce664eefb0bbd</anchor>
      <arglist>(realx3Vector &amp;position) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>realx3Vector</type>
      <name>sortByMortonCode</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a2e424d5f9bf08b795a2f367f73b14642</anchor>
      <arglist>(realx3Vector &amp;position) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; regionBase &gt;</type>
      <name>region_</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a7e413932d3ee61371b287c8a6a5713b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>maxNumberOfParticles_</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a9af0ecc574a833d968a76b78ceef576d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>mortonSorting_</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a81854bc960bd812874046052ee916ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const size_t</type>
      <name>numReports_</name>
      <anchorfile>classpFlow_1_1positionParticles.html</anchorfile>
      <anchor>a8488f5465ec8d31c5d57f5042b3bd9c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::positionRandom</name>
    <filename>classpFlow_1_1positionRandom.html</filename>
    <base>pFlow::positionParticles</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a017681909d4da0aea589f46fddf83aa0</anchor>
      <arglist>(&quot;positionRandom&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>aae6357c56419d2fab1eedbccbd2a5210</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ab97c95d47e799fff0489fe8e09de45c1</anchor>
      <arglist>(positionParticles, positionRandom, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a970d739c1b0c69c13d1ea6160d6b0862</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a017681909d4da0aea589f46fddf83aa0</anchor>
      <arglist>(&quot;positionRandom&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>positionRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>aae6357c56419d2fab1eedbccbd2a5210</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ab97c95d47e799fff0489fe8e09de45c1</anchor>
      <arglist>(positionParticles, positionRandom, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~positionRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a970d739c1b0c69c13d1ea6160d6b0862</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>af53fd6d18bcf7c98c7ff8c3ec8bfdfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a03bc1200aac252c4d3e18657d700b71c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>maxDiameter</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ae3b32de6c397355671e202e0d0c24cd8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a96a8cc3908c770c10276bcf2f0851f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3Vector &amp;</type>
      <name>position</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>acf624059f677f4652ebb548bb5c10833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionOnePass</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a0bb3861a7abae95231a9e78e59e24de0</anchor>
      <arglist>(int32 pass, int32 startNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionPointsRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ab617885440849e843c67a3307d73f29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inCollision</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a96faede0597d5cb0a6addb4ab150f66a</anchor>
      <arglist>(const realx3 &amp;cntr, real diam)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillPoints</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ac82bb218c892d701cf99c2cdb5d6557a</anchor>
      <arglist>(uint numPoints, realx3Vector_HD &amp;points, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionOnePass</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a0bb3861a7abae95231a9e78e59e24de0</anchor>
      <arglist>(int32 pass, int32 startNum)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>positionPointsRandom</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>ab617885440849e843c67a3307d73f29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>inCollision</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a96faede0597d5cb0a6addb4ab150f66a</anchor>
      <arglist>(const realx3 &amp;cntr, real diam)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>prDict_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a7297f5e9486c4152f347ba567c86fe97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>diameter_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a5a985e0df87ccead6a8c5dc17917856e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numPoints_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a359635c7fac59b5bfc19941fffb5cb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>maxIterations_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a67f3255f46c7a0450635c320d59af6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3Vector</type>
      <name>position_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a56f883f3aedea00c95a16c93d6a245ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>reportInterval_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>a5f64e0178b6275296260de8e89e9a507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>box_</name>
      <anchorfile>classpFlow_1_1positionRandom.html</anchorfile>
      <anchor>aefb81f563e3df7617831459d0ab0b5ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::postprocess</name>
    <filename>classpFlow_1_1postprocess.html</filename>
    <member kind="function">
      <type></type>
      <name>postprocess</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>aadd04f396e514243ce8cc738c672cc00</anchor>
      <arglist>(systemControl &amp;control)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processTimeFolder</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a6c48ff6de30d5c44952ff4c593bb7815</anchor>
      <arglist>(real time, const word &amp;tName, const fileSystem &amp;localFolder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>processTimeFolder</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a183a8a23f4bd11151ed463489a7bc974</anchor>
      <arglist>(const timeFolder &amp;tFolder)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToVTK</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a13c414572f49218d9968f036d1640f5a</anchor>
      <arglist>(fileSystem path, word bName) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto &amp;</type>
      <name>timeFolderReposiory</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>acfe5162372d6fa521a2ad0d42c1eae41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>systemControl &amp;</type>
      <name>control_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>abfbc3debb472c661c30cf9fe782bb076</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>dict_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a5c644b0ad2ff77590a77fb0198c4a785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>numberBasedDictNames_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>af7d3932613e13914fcbebd2e6c1228c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>weightBasedDictNames_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a0e6a75b5e840caeca6f03c7eccbf676c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; repository &gt;</type>
      <name>timeFolderReposiory_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a0279646305e6ffc5c58a25bd079eb6eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; pointRectCell &gt;</type>
      <name>pointToCell_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a221099dde2b657a4b2b34a51d7466323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListPtr&lt; processField &gt;</type>
      <name>processedFields_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a5baa08d3d8ff43aaad99686455e78f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>time_</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>a01b25d5afba0d2d8b20f4428a3810933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>saveTimes</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>aa87db4732ca370ab93e364f7304ab2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>saveTimeFolders</name>
      <anchorfile>classpFlow_1_1postprocess.html</anchorfile>
      <anchor>abf87dcdbce55cf1aea12bcfdb996f68a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::sphereInteractionKernels::ppInteractionFunctor</name>
    <filename>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</filename>
    <templarg>typename ContactForceModel</templarg>
    <templarg>typename ContactListType</templarg>
    <member kind="typedef">
      <type>typename ContactListType::PairType</type>
      <name>PairType</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>aa5496fb19b1437cfbc17c07b1e9b5d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ContactListType::ValueType</type>
      <name>ValueType</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a6eb981aa3b299bf3f3d30f4cd838c9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ppInteractionFunctor</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a7837771fa78ad57547aa8c2510a06f4e</anchor>
      <arglist>(real dt, ContactForceModel forceModel, ContactListType tobeFilled, deviceViewType1D&lt; real &gt; diam, deviceViewType1D&lt; int8 &gt; propId, deviceViewType1D&lt; realx3 &gt; pos, deviceViewType1D&lt; realx3 &gt; lVel, deviceViewType1D&lt; realx3 &gt; rVel, deviceViewType1D&lt; realx3 &gt; cForce, deviceViewType1D&lt; realx3 &gt; cTorque)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a2e63f8a184cc34854d549a4eb91b8bc8</anchor>
      <arglist>(const int32 n) const</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>dt_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>ab7c0e1c754daddef0aa990fccb8ef033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactForceModel</type>
      <name>forceModel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a68c7887316681f8be493c5e8cdbe24ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactListType</type>
      <name>tobeFilled_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a1407ccc7cef3cd3ecbd2fc021d856a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; real &gt;</type>
      <name>diam_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>ad041905629f35e188dd78d8512b2be6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; int8 &gt;</type>
      <name>propId_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>aef3c20f3795f7ea182dc845386f99764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>pos_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a8de0751d680a241d8f35fb8d654d76e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>lVel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a5fa7827c50d4fbfef48c30d580a9ae56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>rVel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>a9e151c1ca79913661cb9c3ce659d7ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>cForce_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>ab4d1edca6a2c39700dc2327a8c9d5dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>cTorque_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1ppInteractionFunctor.html</anchorfile>
      <anchor>ac492c7557600a8f3019b405c24a06a1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::processField</name>
    <filename>classpFlow_1_1processField.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>af1b42d2ede6f20b2ea19631313ae698d</anchor>
      <arglist>(&quot;processField&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>processField</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a0a86c835a789080210d1b477e5d77113</anchor>
      <arglist>(const dictionary &amp;dict, pointRectCell &amp;pToCell, repository &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>afccc43dcaf88d6196e833cd39c52228f</anchor>
      <arglist>(processField, dictionary,(const dictionary &amp;dict, pointRectCell &amp;pToCell, repository &amp;rep),(dict, pToCell, rep))</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>mesh</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>af2cf8561cff2af17cccc1c2e568fe80c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>pointToCell</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a94efc1b547437ce3c947a8558e3f77e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a2f728de88d0dabf004e04a0ce806edaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>ac741bb08b22b81f1a6a24e7c6309e057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>timeFolderRepository</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>ae6441ca417d5f937db17a7407a40a51c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>processedRepository</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a26e806a02dbaf38bf71d88fe7099d635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>fieldType</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>ac658329e8578aab4ef5c01581535fdde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>fieldName</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a31874dd370567b15f150718ee05d0325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUniform</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>adf793f78bddd37608d2a8672906f6841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>operation</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>aa2817e298d54189ea1b10c487783e7b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>timeFolder</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a1eecd18366e72131de590976c1af6df0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>includeMaskType</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a689f8bece0da3e3394a7fc216d5a42da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>threshold</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a9d95dada6d02aab05263acdd9ce758e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>processedFieldName</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a896be0e19bc6bffeac8fb1e707944b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a0c2b1ca62bc8c4fa3bd3b337e34600c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>writeToVTK</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a85b605926fe934892bb347056bc3dd54</anchor>
      <arglist>(iOstream &amp;is) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; processField &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>ae098f06d923b58ddc591b1cef457f947</anchor>
      <arglist>(const dictionary &amp;dict, pointRectCell &amp;pToCell, repository &amp;rep)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>getFieldType</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a652a19b251fd07c2ee0a88ef91d6c748</anchor>
      <arglist>(const dictionary &amp;dict, readFromTimeFolder &amp;timeFolder, word &amp;fieldName, word &amp;fieldType)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>dict_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a5c644b0ad2ff77590a77fb0198c4a785</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pointRectCell &amp;</type>
      <name>pointToCell_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a7603eed71b94722e7cba7a92ce6b4972</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>readFromTimeFolder</type>
      <name>timeFolder_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a31a5f410c99d1b2a73709fe54b35b5bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>processedFieldName_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a90d0a5ba88aa728840d50d1e8d57a5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>fieldName_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a84505e826985ad10d53f4063d43128ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>fieldType_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a885fb6d2cc1add5cb4edb4acf05e0485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>operation_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a23f690776ad5d8b0b5721562a621cfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>includeMaskType_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a547fdb412be950f1c37449ae81afc467</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>threshold_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a5ee1065f3807ab1bdbb29a28071deaf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; includeMask &gt;</type>
      <name>includeMask_</name>
      <anchorfile>classpFlow_1_1processField.html</anchorfile>
      <anchor>a1ba9a074b9b18462a4c000591aef0435</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::ProcessField</name>
    <filename>classpFlow_1_1ProcessField.html</filename>
    <templarg>typename T</templarg>
    <base>pFlow::processField</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>a047e772b9fbe3df7fd9bbdf00f739039</anchor>
      <arglist>(&quot;ProcessField&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProcessField</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>a3d2ca8bd91ecb2162aac9fd4a3471b54</anchor>
      <arglist>(const dictionary &amp;dict, pointRectCell &amp;pToCell, repository &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>ab9af837f18d1157ef3f892aee6608973</anchor>
      <arglist>(processField, ProcessField, dictionary)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getUniformValue</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>ad6e04bef1eefda1226640fc5703658bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>a76fef293a73e2b41dd4e462dc62470cf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToVTK</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>ad7776b0dcbe358c0dd0e8814d8c4c4e8</anchor>
      <arglist>(iOstream &amp;os) const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>pointField_H&lt; T &gt; &amp;</type>
      <name>field_</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>a2093d4cc71a5c5549f92d65f80135ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rectMeshField_H&lt; T &gt; &amp;</type>
      <name>processedField_</name>
      <anchorfile>classpFlow_1_1ProcessField.html</anchorfile>
      <anchor>a008c17e564d5f76e422dceea99e4a1c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::property</name>
    <filename>classpFlow_1_1property.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a02926dc5abfd958c847136c5abda05be</anchor>
      <arglist>(&quot;property&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a22879bc8973d7aea0c4eb37a527acac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a95b5f49261e86936c79adc849bdf7f14</anchor>
      <arglist>(const wordVector &amp;materials, const realVector &amp;densities)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a150a368cceebc51b7262c035c9d22ca7</anchor>
      <arglist>(const fileSystem &amp;file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ae8fa20fbd50fd5a9596fde615c1306a6</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a5e8de67abde03ef2de7ee64ebf6b77d5</anchor>
      <arglist>(const property &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ae8b95c111de6f7fee18b38e5eb53f190</anchor>
      <arglist>(property &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>property &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a748c4a91381a77f88d6bd2453c428efb</anchor>
      <arglist>(const property &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>property &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a3a18435505ae3116bd64ba52cba6ead1</anchor>
      <arglist>(property &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~property</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>abe6af8d43d9e4e38a2aa1311ec11b862</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>dict</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ac741bb08b22b81f1a6a24e7c6309e057</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>numMaterials</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>adc62e81491a3115339f0724c406b39dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>materials</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a736169523b5ae9d52a4f80eb56a8cd13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>densities</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ae4de342b9cf746b2f40130e654cfeb11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>material</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a67649cc0468cde1a36bee9479c974cbd</anchor>
      <arglist>(uint32 i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>material</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>afe043c12ccbdcff21ec098dce9704ffc</anchor>
      <arglist>(uint32 i, word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>density</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a88776ce7e066f6b5fbf5238545881f0b</anchor>
      <arglist>(uint32 i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>density</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a2e4edb9e315736953f3c0ca26777ebbf</anchor>
      <arglist>(uint32 i, real &amp;rho) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ad53527edc63114fb6bebe409db8dedbf</anchor>
      <arglist>(const word &amp;name, uint32 &amp;idx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>makeNameIndex</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a81429b86cbb3fb83ee6752cc2308c094</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; dictionary &gt;</type>
      <name>dict_</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a79a393335e394e458a3c68b1d820a5e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordVector</type>
      <name>materials_</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a437403f7d71404549fdfc4fc1825cff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realVector</type>
      <name>densities_</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a1d743ba937653e990ae449b3e1acd22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordHashMap&lt; uint32 &gt;</type>
      <name>nameIndex_</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>a1092ec0af64496d0215071cce3f90c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>numMaterials_</name>
      <anchorfile>classpFlow_1_1property.html</anchorfile>
      <anchor>ad1dfa4ff1700e5649d5651714ad559fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::pStructSelector</name>
    <filename>classpFlow_1_1pStructSelector.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a3d1f615befd37f4836a012f3629e514c</anchor>
      <arglist>(&quot;pStructSelector&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pStructSelector</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a304a5b2fcb9472d42690a3ca950db4c8</anchor>
      <arglist>(const pointStructure &amp;pStruct, const dictionary &amp;UNUSED(dict))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>af06637df480f247a77699bced010a9ff</anchor>
      <arglist>(pStructSelector, dictionary,(const pointStructure &amp;pStruct, const dictionary &amp;dict),(pStruct, dict))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~pStructSelector</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a1d3439da01215381e0dfe0b8f003c3b9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const pointStructure &amp;</type>
      <name>pStruct</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>ae355b601249331cd5c4facb48df43223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a5148256cdbb9bdfd9b015f918432a239</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>aaf05d14727aad294d8d1de13742829eb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; pStructSelector &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a62b7680c6f7727fa992c0ac97c6a1a6a</anchor>
      <arglist>(const pointStructure &amp;pStruct, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const pointStructure &amp;</type>
      <name>pStruct_</name>
      <anchorfile>classpFlow_1_1pStructSelector.html</anchorfile>
      <anchor>a5c62d7bde0e3c333317fabe4b8806bef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::sphereInteractionKernels::pwInteractionFunctor</name>
    <filename>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</filename>
    <templarg>typename ContactForceModel</templarg>
    <templarg>typename ContactListType</templarg>
    <templarg>typename TraingleAccessor</templarg>
    <templarg>typename MotionModel</templarg>
    <member kind="typedef">
      <type>typename ContactListType::PairType</type>
      <name>PairType</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>aa5496fb19b1437cfbc17c07b1e9b5d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ContactListType::ValueType</type>
      <name>ValueType</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a6eb981aa3b299bf3f3d30f4cd838c9a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pwInteractionFunctor</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>aea184237a95152369b2e2eab8a7b54ba</anchor>
      <arglist>(real dt, ContactForceModel forceModel, ContactListType tobeFilled, TraingleAccessor triangles, MotionModel motionModel, deviceViewType1D&lt; real &gt; diam, deviceViewType1D&lt; int8 &gt; propId, deviceViewType1D&lt; realx3 &gt; pos, deviceViewType1D&lt; realx3 &gt; lVel, deviceViewType1D&lt; realx3 &gt; rVel, deviceViewType1D&lt; realx3 &gt; cForce, deviceViewType1D&lt; realx3 &gt; cTorque, deviceViewType1D&lt; int8 &gt; wTriMotionIndex, deviceViewType1D&lt; int8 &gt; wPropId, deviceViewType1D&lt; realx3 &gt; wCForce)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a2e63f8a184cc34854d549a4eb91b8bc8</anchor>
      <arglist>(const int32 n) const</arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>dt_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>ab7c0e1c754daddef0aa990fccb8ef033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactForceModel</type>
      <name>forceModel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a68c7887316681f8be493c5e8cdbe24ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ContactListType</type>
      <name>tobeFilled_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a1407ccc7cef3cd3ecbd2fc021d856a86</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TraingleAccessor</type>
      <name>triangles_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>af736934535fc3320a0150a9246fbc349</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MotionModel</type>
      <name>motionModel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a763c0a6f62e7f9ad8baefc744ebe3886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; real &gt;</type>
      <name>diam_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>ad041905629f35e188dd78d8512b2be6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; int8 &gt;</type>
      <name>propId_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>aef3c20f3795f7ea182dc845386f99764</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>pos_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a8de0751d680a241d8f35fb8d654d76e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>lVel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a5fa7827c50d4fbfef48c30d580a9ae56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>rVel_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a9e151c1ca79913661cb9c3ce659d7ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>cForce_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>ab4d1edca6a2c39700dc2327a8c9d5dee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>cTorque_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>ac492c7557600a8f3019b405c24a06a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; int8 &gt;</type>
      <name>wTriMotionIndex_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>afa1297d3134f81af63e89fd1bd4f2ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; int8 &gt;</type>
      <name>wPropId_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a1edae620248341e4cec6b0611040efab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>wCForce_</name>
      <anchorfile>structpFlow_1_1sphereInteractionKernels_1_1pwInteractionFunctor.html</anchorfile>
      <anchor>a40488d420ab7c3e7d3e60ce08aec5fd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::quadruple</name>
    <filename>classpFlow_1_1quadruple.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ae024ea5e5a49b04206bc11d7f5d7f87a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a8cd52c408066b8bdb7be51d6c1da26b9</anchor>
      <arglist>(const T &amp;w, const T &amp;x, const T &amp;y, const T &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a42ab4827cbf14ddd862415070aee2ab3</anchor>
      <arglist>(const T &amp;s, const triple&lt; T &gt; v)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>abe266a7d67a4ed5ad69c908c62b6a6f0</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a341a513858916768324b56eb72394a3c</anchor>
      <arglist>(const quadruple&lt; T2 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a5a0673d18c64a063ea8439b0dc057d03</anchor>
      <arglist>(const quadruple&lt; T2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a369d3a85e221f20e29a5920a50317e32</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>quadruple</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a94caf1da73374a155001db00493ecf49</anchor>
      <arglist>(quadruple&lt; T &gt; &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ad945dbfb101cfeb5bf8be8d3f569f160</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>aef722c6538bf8193e54c5a616fca3b31</anchor>
      <arglist>(quadruple&lt; T &gt; &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H uniquePtr&lt; quadruple&lt; T &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a8f87561a0ce76aaf0b1548a4eb3915bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H quadruple&lt; T &gt; *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>aeca85368f1fb374a2982a86cb637cf83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>w</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>af3bd52d52287fce6f6730a8e145aada7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>w</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a0e6db6175e7ba1064d9e1071a393e497</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>x</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a9d91640f18ca9664c673d70d8220c345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>x</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a9f9535f0d9ace03be4a6ed499e94302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>y</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>afeba9af2b9366a21e041e0fc09d72576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>y</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a98323a1add71333f0925be475007f720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>z</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ae91a89e8714244e81762456d228b6b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>z</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>aa2e8c9a2ac71b6b09cc747d01af0db20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>s</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ab21712dc9af49e7ed96a12cef32ddcd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>s</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a5e860186b938c59bc2b1e9740f4b318b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt;</type>
      <name>v</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a099dd34cf87c7e3cdc6cc86fb3988bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const triple&lt; T &gt;</type>
      <name>v</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ab7c488cecb35c65e577a90f8071a5a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T</type>
      <name>length</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a386dd44caa78e5884651bd4891674555</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>normalize</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a2030cdd583d3a6e60753a16dab2a0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator+=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ad3882a45adcc3941a4c44a1d230ff70f</anchor>
      <arglist>(const quadruple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator-=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ad27ac99e5c01417e1f5f9454dc3ec760</anchor>
      <arglist>(const quadruple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator*=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a292b10239a582bd29065e86a1f26b8a5</anchor>
      <arglist>(const quadruple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator/=</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a2a132dfa15822f8349a9c5cc779bf421</anchor>
      <arglist>(const quadruple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a97eca8e2bf90f9c5e3c7dafc05c6da82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD quadruple</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a083ac3ede868169de0251499c51fe01c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>s_</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a7a3b23d09bb683faabd9acf10fd6e245</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>triple&lt; T &gt;</type>
      <name>v_</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a9c8eeef96b9216076734ba2fc5a2a834</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD T</type>
      <name>dot</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a5d79288bbea547903426f668143b26df</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a0a1884dd0a09e70769af25f3398da462</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>acfd4c156037a5de976c4a9b9012822a0</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>afaea5de3d66def626b0808154e0bd3d8</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a3a5781a37a3c881bd31cdaf9d66f0eff</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ab1ef6fe70798735462190374238f6017</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a5a613c7459a9447811936c0e2ca976a1</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a769d932389b60a6c2b9c5a2ba275f94f</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a24f3b97cb47650f399803a883155a725</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>af70bf75ee5e33e2ad3a067c0bd135ba4</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>aaf6ba18a2483dc3c68a4cfc5c1fcdac6</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a689a2e3f9e2b8183d8e6409b1e9ee4d1</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD quadruple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>af736c80ea257bac92795e09b7ecf2402</anchor>
      <arglist>(const T &amp;oprnd1, const quadruple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a92a03d771ef97fcd2f4f796e1ddf73b0</anchor>
      <arglist>(const quadruple&lt; T &gt; &amp;opr1, const quadruple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_H iOstream &amp;</type>
      <name>operator</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>aa7e42055432bc1da3461d8a608fb824e</anchor>
      <arglist>(iOstream &amp;str, const quadruple&lt; T &gt; &amp;ov)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>a272b878cf1cb0058ffdc949b2d8885a2</anchor>
      <arglist>(iIstream &amp;str, quadruple&lt; T &gt; &amp;iv)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_H void</type>
      <name>readIstream</name>
      <anchorfile>classpFlow_1_1quadruple.html</anchorfile>
      <anchor>ad813b755a649591bb99a6bf8263d83c3</anchor>
      <arglist>(iIstream &amp;str, quadruple&lt; T &gt; &amp;iv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::randomReal</name>
    <filename>classpFlow_1_1randomReal.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a20eb19d10d47390102834d5aab1c4b59</anchor>
      <arglist>(&quot;randomReal&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>randomReal</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a539151366461205e46247dc28757799f</anchor>
      <arglist>(word UNUSED(distribution))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a9bcd81e10bd6f563fa2be8bf0ed76a83</anchor>
      <arglist>(randomReal, word,(word distribution),(distribution))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~randomReal</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>aba14944f8ccb0ed0ee635ecada2b5963</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual real</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a0eeb2a5e6a9a4bd47e869b34c7623d0c</anchor>
      <arglist>(real a, real b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a7bb032e5b3fcdd81aed17aeec417cc1f</anchor>
      <arglist>(realx3 a, realx3 b)=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; randomReal &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1randomReal.html</anchorfile>
      <anchor>a56210becacba9d1d2f84fcc998cbbab2</anchor>
      <arglist>(word distribution)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::RandomReal</name>
    <filename>classpFlow_1_1RandomReal.html</filename>
    <templarg>typename DistributionType</templarg>
    <base>pFlow::randomReal</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a321fb1cbb4d0555970ef4cb13e814091</anchor>
      <arglist>(&quot;randomReal&quot;, DistributionType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomReal</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a2f7b67f8699a464408da2cdf3dc50e6f</anchor>
      <arglist>(word distribution)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a190fc3abcd750a2809f0a57a9e8752e9</anchor>
      <arglist>(randomReal, RandomReal, word)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~RandomReal</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>ab2388bf639cb9f5c9bc88e6db50d8d74</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a0ae73c26d301fa9a1e801d1a98dafbb0</anchor>
      <arglist>(real a, real b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual realx3</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a03f286a304fdfd66f19c220e8ba70b12</anchor>
      <arglist>(realx3 a, realx3 b) override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DistributionType</type>
      <name>distribution_</name>
      <anchorfile>classpFlow_1_1RandomReal.html</anchorfile>
      <anchor>a82cb0c07bceb2ba70cec150608d6e421</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::readControlDict</name>
    <filename>classpFlow_1_1readControlDict.html</filename>
    <member kind="function">
      <type></type>
      <name>readControlDict</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a63fd760fecd548c2c55dc66eb5478574</anchor>
      <arglist>(const fileSystem &amp;rootPath=defaultRootPath, const fileSystem &amp;cdPath=defaultCDPath)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>startTime</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a7f4d44b8a4c8e166c725c48eb44e6b97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>endTime</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a9f960d8e9ef573c7aab1a933ddccb844</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>saveInterval</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a948735c16bd010922637d8e9c5a0b558</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>startTimeName</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>ae24c046ff18d5f5b50185e1cbfd983d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>word</type>
      <name>convertTimeToName</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a85be57df4a63c3add72f0133ea42e76c</anchor>
      <arglist>(const real t, const int32 precision) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>rootPath_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a3aaaec18ac26217c09db62bd654c7fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>cdPath_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>ade3a26a4809d7d80008fcc58eb004986</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>startTime_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a9da50a81b9da4200db555ac368c98ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>endTime_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>aec7a9ba664af18fb17da1eb822b1ee14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>saveInterval_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>ab259dc32cc17537fcee2b30046de75e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>formatType_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a7d7d9ab257a71b8cbcd38af750103c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>precision_</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a2cd4e4cc80364873cb0f8b5d3fd3ea40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static fileSystem</type>
      <name>defaultRootPath</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a9e179fbe03114ea3ecbf83671c51d92a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static fileSystem</type>
      <name>defaultCDPath</name>
      <anchorfile>classpFlow_1_1readControlDict.html</anchorfile>
      <anchor>a5789840fc1f86cb3d2c4910610e3dbd4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::readFromTimeFolder</name>
    <filename>classpFlow_1_1readFromTimeFolder.html</filename>
    <member kind="function">
      <type></type>
      <name>readFromTimeFolder</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>ae8780b6ddfbdaa7676debaff9f41c642</anchor>
      <arglist>(repository &amp;rep)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>path</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a08f97f88e4a800e6cb631cf220543f31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>db</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>ab4942380cb7ad8c48a9c76c784444acb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, IOfileHeader &gt;</type>
      <name>fieldExists</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a41f17fd81cd6a296ecd1edaaba0337cf</anchor>
      <arglist>(word fieldName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pointFieldFileGetType</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a50e3537f01d8016d4c833e90747afd36</anchor>
      <arglist>(word fieldName, word &amp;typeName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pointFieldGetType</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a07a119becefbc251f24bc309c6e85e70</anchor>
      <arglist>(word &amp;typeName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pointFieldGetCheckType</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a6ed4481b55c35b4457b1504ffba680b0</anchor>
      <arglist>(word fieldName, word &amp;typeName) const</arglist>
    </member>
    <member kind="function">
      <type>pointField_H&lt; T &gt; &amp;</type>
      <name>createUniformPointField_H</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>ab4042cc138309e1b214090f18f20588b</anchor>
      <arglist>(word name, T value)</arglist>
    </member>
    <member kind="function">
      <type>pointField_H&lt; T &gt; &amp;</type>
      <name>readPointField_H</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a1d6bfda6ea842ca8e25eb288fd6d8789</anchor>
      <arglist>(word name)</arglist>
    </member>
    <member kind="function">
      <type>pointField_D&lt; T &gt; &amp;</type>
      <name>readPointField_D</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a1d6a0d877580e43be9b9494fe2ac4662</anchor>
      <arglist>(word name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForPointStructure</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>aa16df64e306a5fe79f8fd6e6500e5709</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository &amp;</type>
      <name>repository_</name>
      <anchorfile>classpFlow_1_1readFromTimeFolder.html</anchorfile>
      <anchor>a2f3e73c0829885d1e598f483d172b115</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::rectangleMesh</name>
    <filename>classpFlow_1_1rectangleMesh.html</filename>
    <base>cells&lt; int32 &gt;</base>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a2bf2932530024402644f21e7316d3b83</anchor>
      <arglist>(&quot;rectangleMesh&quot;)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>af2378132894a4925db728a29dd6cfd65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>ae385521c7dc99c52ccd8bcd42a01b83b</anchor>
      <arglist>(const realx3 &amp;minP, const realx3 &amp;maxP, int32 nx, int32 ny, int32 nz)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a0fe74c638bf0643238dbd8b6061811fa</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>ae78787442aa40fcf2bc230db0b4267f4</anchor>
      <arglist>(const rectangleMesh &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD rectangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>abd010144199b15f03b92c556058ce537</anchor>
      <arglist>(const rectangleMesh &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a3b57aefc47a31d699404342ea7eb2485</anchor>
      <arglist>(rectangleMesh &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD rectangleMesh &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a135fb58cf375e0a07328b888065b2429</anchor>
      <arglist>(rectangleMesh &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~rectangleMesh</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>ae8f828ad15d4718d4ac69d092e1eeb46</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>abf3bc0d1aa6f6cedfde5da544f6613a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cellVol</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a9c4607334754054ca306b31fb749a6c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a2f4d0c6add48d99f499aa6d0d69eee76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a670949890a6d49ec34562bdaa68f5ea7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeToVtk</name>
      <anchorfile>classpFlow_1_1rectangleMesh.html</anchorfile>
      <anchor>a61b34edb9a411ddf347a902fa6f5c9a2</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::rectMeshField</name>
    <filename>classpFlow_1_1rectMeshField.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename MemorySpace</templarg>
    <member kind="typedef">
      <type>ViewType3D&lt; T, MemorySpace &gt;</type>
      <name>viewType</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>af083c377044be4efc2882e7211d462ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename viewType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a2e01852751e144707eefc63300bcce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ab94047546522cd0ce83e1f6c43b4d534</anchor>
      <arglist>(&quot;rectMeshField&quot;, T, memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rectMeshField</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a8b84e2525dd605069dd6962d1362f025</anchor>
      <arglist>(const rectangleMesh &amp;mesh, const word &amp;name, const T &amp;defVal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rectMeshField</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a6001baa32128c4c5f331abbc260d5fd9</anchor>
      <arglist>(const rectangleMesh &amp;mesh, const T &amp;defVal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rectMeshField</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a6196dd0c7d847ca23af9b70b82964b7a</anchor>
      <arglist>(const rectMeshField &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>af068331eac31d6ec8b08d634ec8bff2f</anchor>
      <arglist>(const rectMeshField &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rectMeshField</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ad57e616fa67ec2898f4be22d3b93610a</anchor>
      <arglist>(rectMeshField &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ae5d433e77fbb02fb91426255931c05bd</anchor>
      <arglist>(rectMeshField &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; rectMeshField &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ac57244f249bcd14ceec7160f6df0332f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a0085a17227fb44bdb952b46a0ce8ccad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>aef51d914e365f5325d0fb256b20da655</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>abf3bc0d1aa6f6cedfde5da544f6613a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nx</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>af440784b205b09406dc469703e3a938f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>ny</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a6598c3e94535b183bee776f94914d29b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>nz</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ae57e25510b3a28583eb4df07f8fad08b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>mesh</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a21cd1cdedc3adb37ac787e415f937911</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cellVol</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a9c4607334754054ca306b31fb749a6c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a2d9d5aa56dc40fb225fe05ebbbc04d83</anchor>
      <arglist>(int32 i, int32 j, int32 k)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a5f6901273a07b20f345544683e9818f7</anchor>
      <arglist>(int32 i, int32 j, int32 k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>add84cd9f7530614d6e2e956a6971be49</anchor>
      <arglist>(T val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr const char *</type>
      <name>memoerySpaceName</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a050453ea5010d379462b233e848cb9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const rectangleMesh *</type>
      <name>mesh_</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ab1bd43ff83211d756e4c09d8e13ccac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>viewType</type>
      <name>field_</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>ad937f367a00556314a62733d68ada057</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>defaultValue_</name>
      <anchorfile>classpFlow_1_1rectMeshField.html</anchorfile>
      <anchor>a3ede7be1f8d98c2fa4af7860cdcaf787</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::region</name>
    <filename>classpFlow_1_1region.html</filename>
    <templarg>typename T</templarg>
    <base>pFlow::regionBase</base>
    <member kind="function">
      <type></type>
      <name>region</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a86075eb6d82a3b2f028418f01f5423b2</anchor>
      <arglist>(const T &amp;rgn)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>region</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a57c7ba1bdab198bc5f98e78354164e85</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>region</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a9df5370aef6dcbc8ce9599c85a5ada7a</anchor>
      <arglist>(const region &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>region &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a61d7efbcac25e7a7825f253ef2aaa094</anchor>
      <arglist>(const region &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~region</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a72c284bb55eab6882fb59a91d2ec79be</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a69d32c64119381c87f24d681ccbf0cf2</anchor>
      <arglist>(const realx3 point) const override</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>acf6e6a0952837949b1e96e5c5572c8b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a10527e76299c00f3ea71765b0ace7f97</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a95589df8b0eec5d6660d123bd021a61e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>region_</name>
      <anchorfile>classpFlow_1_1region.html</anchorfile>
      <anchor>a60b886d3788be057475815f3bef478d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::regionBase</name>
    <filename>classpFlow_1_1regionBase.html</filename>
    <member kind="function">
      <type></type>
      <name>regionBase</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>a2be3b48c99fba30ea64382c5eb00c6f9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>regionBase</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>af6cb5cb702bd0abe5cdac54ec1f365e0</anchor>
      <arglist>(const regionBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>regionBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>abd047cd42fa4c2640adeac94c5eb20ee</anchor>
      <arglist>(const regionBase &amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~regionBase</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>afe86a1ef5185c0eb4b11c08f2d6897cc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>afb1b6ebaadf19f73eb513a835f989a33</anchor>
      <arglist>(const realx3 point) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>a0eaa746652ab523dd5085782aec09f6f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual realx3</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>a72af82996b37fc569b68ddc4fc9f9e53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1regionBase.html</anchorfile>
      <anchor>ae037b76de941b7495bd17837ce23e9b8</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::repository</name>
    <filename>classpFlow_1_1repository.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a091b1b05d3382c8761ba90e56bccd978</anchor>
      <arglist>(&quot;repository&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>repository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a3c7f61efa6825420813172d57a6e82c6</anchor>
      <arglist>(const word &amp;name, const fileSystem &amp;localPath, repository *owner=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>repository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a43d51101e27a30fd4f61e2f2383aa939</anchor>
      <arglist>(const repository &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a9850c3bd3ab9aefb098e42400e388f9b</anchor>
      <arglist>(const repository &amp;)=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~repository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>aca2c9157494b4478a72f1c9466cb0501</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a4c4b7703e6fdb86d441032675709e39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fileSystem</type>
      <name>localPath</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a79778ddeafeaa1d3607f30d74035ab93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fileSystem</type>
      <name>path</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>ae1921a7f20c43d1438221946e607c488</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const repository *</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a7f24704ffcf729a9c80c60eac07914a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository *</type>
      <name>owner</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>aa9208fb8517555ef38be74a034d839e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>thisRepository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a9351a4da5855b9f21a598643894b9e0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>thisRepository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a1e60f5986edf93532d90a60bc7c699d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addToRepository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>ad346521bc098d1c68f903e9079c4906a</anchor>
      <arglist>(repository *rep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeRepository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a1a4dac2a504055b06fcd8aed2a9bd4a0</anchor>
      <arglist>(repository *rep)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplaceObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a5bbe8f5fd6ec57500bcbc3e5cd5c9cf4</anchor>
      <arglist>(const objectFile &amp;objf, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplaceObjectOrGet</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a48e50372c12b9aab69a33a5a2c8e162f</anchor>
      <arglist>(const objectFile &amp;objf, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>emplaceReplaceObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a5f51d1d871bc14f773a15db32ea3585b</anchor>
      <arglist>(const objectFile &amp;objf, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>insertReplaceObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a54467611148ea0a5ab488268389f630c</anchor>
      <arglist>(uniquePtr&lt; IOobject &gt; &amp;&amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>insertReplaceObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>af50fc8476cf15a91a2365cf004397a1d</anchor>
      <arglist>(const objectFile &amp;objf, uniquePtr&lt; IOobject &gt; &amp;&amp;ptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eraseObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>af0f0b327a2f8f949d7fb5226046bb459</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookupObjectName</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a0109dccd6858538bb64bc7dbf2a2b404</anchor>
      <arglist>(const word &amp;nm) const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>lookupObjectTypeName</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a9a9370ec1e984651b807c5d7986d60ed</anchor>
      <arglist>(const word &amp;nm) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>globalLookupObjectName</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>af77cc3465ed7313f25470f308c1c633e</anchor>
      <arglist>(const word &amp;nm, bool downward=false) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookupRepositoryName</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a6e1d0c2dff16e65ef9844c32cc0ca6dd</anchor>
      <arglist>(const word &amp;nm) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lookupName</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>ab9af89641d5192a2c833c62fe558effd</anchor>
      <arglist>(const word nm) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numObjects</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>ad9d7464e3dcdbe8207306214bed44989</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numRepositories</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>ae0c145d4e6d682a8fb7419d6714d024e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>outFilePrecision</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a7a10194640a84cc39d6a935f181a86ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>lookupObject</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a9908dca95b0c33c0cb43efa18daa2679</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>lookupRepository</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a500191802cd76acfc230739286e38e2c</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>objectNames</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a03094338dddf305b1dbabdac34922c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>wordList</type>
      <name>repositoryNames</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a001da2f7274cae96395f611284ce4192</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a4e7969c9e53d9007d5dbed9f18fc596a</anchor>
      <arglist>(bool verbose=false) const</arglist>
    </member>
    <member kind="function">
      <type>pFlow::word</type>
      <name>reportTypeError</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a41d2e6e5e832763e1d4e2cb23d2be4be</anchor>
      <arglist>(IOobject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>word</type>
      <name>reportTypeError</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a92e3e6dedbdae1e0622e24c69846bcd1</anchor>
      <arglist>(IOobject &amp;object)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForObjectType</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a8cf04370b49417057faf4c6f4705a82b</anchor>
      <arglist>(IOobject &amp;object)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>localPath_</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a850e22a1b68d91fc60267256452d5411</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository *</type>
      <name>owner_</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a3beb7691ae0ce73e34e3bce1a0a7f988</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordMap&lt; IOobject &gt;</type>
      <name>objects_</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a965c39329fa4854fb1f4514de7442da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordMap&lt; repository * &gt;</type>
      <name>repositories_</name>
      <anchorfile>classpFlow_1_1repository.html</anchorfile>
      <anchor>a651d1bd631be4fb976c84af169b37869</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>RESERVE</name>
    <filename>structRESERVE.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::rotatingAxis</name>
    <filename>classpFlow_1_1rotatingAxis.html</filename>
    <base>pFlow::timeInterval</base>
    <base>pFlow::line</base>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>rotatingAxis</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a5585ec037a9f0f8d0fb2726619cadd68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>rotatingAxis</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a9e4f55418c7df3007270e91664156c48</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>rotatingAxis</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a858d417ba00a4a9afa58ded583226f69</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, real omega=0.0)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>rotatingAxis</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a11a6666fd9509474764bc61cf2ebd4c6</anchor>
      <arglist>(const rotatingAxis &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>rotatingAxis &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a0a6fb1d880a089fd6e8700d89a874d31</anchor>
      <arglist>(const rotatingAxis &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD real</type>
      <name>setOmega</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a03e4dd135f2368a5704297fe5bdec24a</anchor>
      <arglist>(real omega)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>omega</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>ace8e5e2121508deb77808a42dab458cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isRotating</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a1cb78036cf201d23953494381997418a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>linTangentialVelocityPoint</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a55582df178e4122c1df4b31369ba3aaf</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>omega_</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a27e85702bf8a1c61f589ca982c52960c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>rotating_</name>
      <anchorfile>classpFlow_1_1rotatingAxis.html</anchorfile>
      <anchor>a76bf50213c81659b84311eda4b8da389</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::rotatingAxisMotion</name>
    <filename>classpFlow_1_1rotatingAxisMotion.html</filename>
    <class kind="class">pFlow::rotatingAxisMotion::Model</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a078c4e662c5bed3820846a06269e0bcd</anchor>
      <arglist>(&quot;rotatingAxisMotion&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>rotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>aaea4370bb273fbfa28ee1180977b4591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>rotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a7a9f52993b996660b77f4a2f0ce6c1b3</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>rotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a83a8ca1c7d89a552bd586a153711f260</anchor>
      <arglist>(const rotatingAxisMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>rotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a4e99b62c5126a783a4530541cb7ab355</anchor>
      <arglist>(rotatingAxisMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H rotatingAxisMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a21f47c788cf9fcd46aad0440c1892c9c</anchor>
      <arglist>(const rotatingAxisMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>rotatingAxisMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a55f98e25fe9542a36f750ed17c3ca81a</anchor>
      <arglist>(rotatingAxisMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>~rotatingAxisMotion</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a9ccf8876dc49e9cfc00ef634a10ba3dd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getModel</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>ad154666086a654ab29cbb515fec9bf4e</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>aa228b68325a8251f13734b8f2dc7367b</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H word</type>
      <name>indexToName</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a25f3d350ed015e91a764c51a6525e139</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isMoving</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a226a2b5e6b2e18ee8a990c2c357bb036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>move</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a23b242e47f91767c189ea8193cca7f55</anchor>
      <arglist>(real t, real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorDual&lt; rotatingAxis &gt;</type>
      <name>axisVector_HD</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>ac9b1a00da3c54f8792cd29a0b60f2053</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>axisVector_HD</type>
      <name>axis_</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a2efd1b487367ae91274544274fef6876</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>axisName_</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>ae203af35abd611539e7b9fdc1cbc2a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>numAxis_</name>
      <anchorfile>classpFlow_1_1rotatingAxisMotion.html</anchorfile>
      <anchor>a52b85466a0a06d609df22c9b1c895134</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::selectBox</name>
    <filename>classpFlow_1_1selectBox.html</filename>
    <base>pFlow::pStructSelector</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>a02a5fea6a1d99bfc958c171a8b489358</anchor>
      <arglist>(&quot;selectBox&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>selectBox</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>abfb4f74b0d90fc669a764151d616b648</anchor>
      <arglist>(const pointStructure &amp;pStruct, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>acf7348b9066206db96bfdf85bdd0284c</anchor>
      <arglist>(pStructSelector, selectBox, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~selectBox</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>a7fb55a6c07a7befbe7ec4bd5c27a1b84</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>aceb43a0e7c411c32ea4b3063db03181e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>a1e0a167e5e1dfba81a2576562c86d543</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectAllPointsInBox</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>a1374032c453ef21c7e97c572fb962a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector</type>
      <name>selectedPoints_</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>a31c3f4eceb5e97a34ff6c2ab35a5b306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>box_</name>
      <anchorfile>classpFlow_1_1selectBox.html</anchorfile>
      <anchor>aefb81f563e3df7617831459d0ab0b5ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::selectRandom</name>
    <filename>classpFlow_1_1selectRandom.html</filename>
    <base>pFlow::pStructSelector</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a61b5a5d08b3ea1224e9d2cf5f68c64c8</anchor>
      <arglist>(&quot;selectRandom&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>selectRandom</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a7535011a06bc1f9fc76cc0ea8aaa5b3c</anchor>
      <arglist>(const pointStructure &amp;pStruct, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a05541eca4ae3561e5b4d4a1d531a167b</anchor>
      <arglist>(pStructSelector, selectRandom, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~selectRandom</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a3ddca95703497fc0ed07ff0a4a31cd7c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>aceb43a0e7c411c32ea4b3063db03181e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a1e0a167e5e1dfba81a2576562c86d543</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>selectAllPointsInRange</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>af9905b10620776e3b5a42f779a83d503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector</type>
      <name>selectedPoints_</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a31c3f4eceb5e97a34ff6c2ab35a5b306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>begin_</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a1223bbe06b744dec027d7586ab5b531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>end_</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a399b6d1435b6457a5eb4f7d8ccffc0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>number_</name>
      <anchorfile>classpFlow_1_1selectRandom.html</anchorfile>
      <anchor>a6168c33d09aa3ead99d098e1047ef930</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::selectRange</name>
    <filename>classpFlow_1_1selectRange.html</filename>
    <base>pFlow::pStructSelector</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>ad53c389909ccc247f2459846c8061714</anchor>
      <arglist>(&quot;selectRange&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>selectRange</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a8b24c88c3fccd403e08f1962809b77e9</anchor>
      <arglist>(const pointStructure &amp;pStruct, const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a6271e106e777383d69ca23db4816553d</anchor>
      <arglist>(pStructSelector, selectRange, dictionary)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~selectRange</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a62a0bba9500e0c4622fa4a38766198b1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>aceb43a0e7c411c32ea4b3063db03181e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32Vector &amp;</type>
      <name>selectedPoinsts</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a1e0a167e5e1dfba81a2576562c86d543</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>selectAllPointsInRange</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>af83be5446d3f11367ab805db50c41d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32Vector</type>
      <name>selectedPoints_</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a31c3f4eceb5e97a34ff6c2ab35a5b306</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>begin_</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a1223bbe06b744dec027d7586ab5b531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>end_</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a399b6d1435b6457a5eb4f7d8ccffc0f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>stride_</name>
      <anchorfile>classpFlow_1_1selectRange.html</anchorfile>
      <anchor>a9b65b2bf319e9388fbaeb6285510677c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::selectSide</name>
    <filename>structpFlow_1_1selectSide.html</filename>
    <templarg>typename side</templarg>
  </compound>
  <compound kind="class">
    <name>pFlow::setFieldEntry</name>
    <filename>classpFlow_1_1setFieldEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>setFieldEntry</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a44ddb2cccb1bce1486f88a0040cadfc8</anchor>
      <arglist>(const dataEntry &amp;entry)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFieldEntry</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>ac8a6afe9e8e6a9106d64f1ac3ff42e75</anchor>
      <arglist>(const setFieldEntry &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFieldEntry</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>ab50090cf97236f4e907df99f41245ebe</anchor>
      <arglist>(setFieldEntry &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>setFieldEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a4ca3504fe168a9ff3cfc244b643985b0</anchor>
      <arglist>(const setFieldEntry &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>setFieldEntry &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>aca20a399255dbe87e3e92e0097b76488</anchor>
      <arglist>(setFieldEntry &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~setFieldEntry</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a930a4ea1f5dc2740b27becf1ddf257f1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>fieldName</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a0debf5375aac6c59b0c9498361fdd83b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkForType</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a70874a5661ee7bb2f2cf4358a48e1af4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkForTypeAndValue</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>ac319c2079ff849c11445c892bd61ffd3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkForTypeAndValueAll</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>adba867dd864699c4d04e0f41d3766beb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldDefaultValueNew</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a793da85119a85308c1de03014ac9bb53</anchor>
      <arglist>(repository &amp;owner, pointStructure &amp;pStruct, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldDefaultValueStdNew</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a99e21e79afec12b58b3f26f7eace6dc3</anchor>
      <arglist>(repository &amp;owner, pointStructure &amp;pStruct, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldDefaultValueNewAll</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a01c74bce93e4ce9e50f96561c81fba84</anchor>
      <arglist>(repository &amp;owner, pointStructure &amp;pStruct, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldSelected</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a271d338de9857bd24b71544380c5a690</anchor>
      <arglist>(repository &amp;owner, int32IndexContainer &amp;selected, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldSelectedStd</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>ab7044748c52c3657e14a5bbc8dfda4bb</anchor>
      <arglist>(repository &amp;owner, int32IndexContainer &amp;selected, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>setPointFieldSelectedAll</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>a8c2bc27358fb52ac4e6d31c7020b6d0d</anchor>
      <arglist>(repository &amp;owner, int32IndexContainer &amp;selected, bool verbose=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>twoPartEntry</type>
      <name>entry_</name>
      <anchorfile>classpFlow_1_1setFieldEntry.html</anchorfile>
      <anchor>acc781a077655847ced3d8915cfa79280</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::setFieldList</name>
    <filename>classpFlow_1_1setFieldList.html</filename>
    <base>List&lt; setFieldEntry &gt;</base>
    <member kind="function">
      <type></type>
      <name>setFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>aa69848b595397b66f2be84cd1424cae1</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a7fcc225d50607c37db71b02d3c7bebc0</anchor>
      <arglist>(const setFieldList &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>setFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a34469058b13244dd9226a6fec4585750</anchor>
      <arglist>(setFieldList &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>setFieldList &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a7abdd1ee3eef0687fb8c84407e91d96c</anchor>
      <arglist>(const setFieldList &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>setFieldList &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>ad4a172ac47f687b32be12410d4cef37d</anchor>
      <arglist>(setFieldList &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>acc863d85d662202ba8b08e691372887b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>setFieldList *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a570597dc8288149251acbb49b5fbe4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~setFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a775d965ab5f3ae5cc2a990573ec07975</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readSetFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a371caec5118a7107207dfbe970b00d34</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeSetFieldList</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a4c69c45fdc17483b13be9b2b1a83c3fb</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary</type>
      <name>dict_</name>
      <anchorfile>classpFlow_1_1setFieldList.html</anchorfile>
      <anchor>a5c644b0ad2ff77590a77fb0198c4a785</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::shapeMixture</name>
    <filename>classpFlow_1_1shapeMixture.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a549b362afb3aa0fb9fb1f2119116b3e9</anchor>
      <arglist>(&quot;shapeMixture&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shapeMixture</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a5b0a82d97e8752fee5d475e250b376b5</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shapeMixture</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a3a72daf9b057197e1e34eeafe2c7951e</anchor>
      <arglist>(const shapeMixture &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>shapeMixture</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>af1015a6277f40c0c2d9cbea6106112cf</anchor>
      <arglist>(shapeMixture &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>shapeMixture &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>ac9268c92e2ca8d7b7274f82b83a8af49</anchor>
      <arglist>(const shapeMixture &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>shapeMixture &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>acc6af38b9c677b46b01fa4b0a6959212</anchor>
      <arglist>(shapeMixture &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; shapeMixture &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a1bca579b2fdd56e878180b505adc41bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>shapeMixture *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>ac58d7b456292fbe1dc3257ef41ec7cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~shapeMixture</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a38936e774330ca34a7baacb38a42602a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>getNextShapeName</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a5801efcf4ecfd26a91571260a672155b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getNextShapeNameN</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>abe6a32d589238a46ff8bd34e0f7ad07f</anchor>
      <arglist>(size_t n, wordVector &amp;names)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a10efdf47ffedbdc720f71c2f72b98d98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>totalInserted</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a547b89bc9ee73b29de71fd577f1ba326</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordVector</type>
      <name>names_</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a13902f92224f21f04ebc99f7079f1485</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32Vector</type>
      <name>number_</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>a90175b7550227100304df03bd98b6ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32Vector</type>
      <name>numberInserted_</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>afa3677c5a67fed9bb84308580ee9c21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32Vector</type>
      <name>current_</name>
      <anchorfile>classpFlow_1_1shapeMixture.html</anchorfile>
      <anchor>acb35c3bca327d646b0cea8c6fc853b48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sortedContactList</name>
    <filename>classpFlow_1_1sortedContactList.html</filename>
    <templarg>typename valueType</templarg>
    <templarg>typename executionSpace</templarg>
    <templarg>typename idType</templarg>
    <base>pFlow::sortedPairs</base>
    <class kind="class">pFlow::sortedContactList::TagReFillPairs</class>
    <member kind="typedef">
      <type>sortedPairs&lt; executionSpace, idType &gt;</type>
      <name>SortedPairs</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>aef6ee9fdbb3784f4a6aabf84853cc854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>valueType</type>
      <name>ValueType</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>ad5d875e9ffab58a03e261100a111f302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SortedPairs::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>af679f80436114799d5a617f15dadb874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SortedPairs::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a1ae4dadcfbf87b6d03cde6bf6ee7cef7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SortedPairs::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a20a6237234b95f287333766d2ba9a470</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SortedPairs::PairType</type>
      <name>PairType</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>af6ea6d54d8e280a9e055b26eb09a8f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SortedPairs::ContainerType</type>
      <name>ContainerType</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>ae33635e7e70fea18f0bc5d192d517ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>ae5b9385073bcad950023e04bed6579f9</anchor>
      <arglist>(&quot;sortedContactList&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sortedContactList</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a9a3fe0d1b74883b2f07c59af34803201</anchor>
      <arglist>(int32 initialSize=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeBroadSearch</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a32ff8c51a3aa19a92929906c6d81d00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterBroadSearch</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a6141d3224e90a32108452817d4e08ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD ValueType</type>
      <name>getValue</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a4a165c0d6aba47dba32125d04d19c54d</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>setValue</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a56b6840306ff51d371b06a9d187e1d6c</anchor>
      <arglist>(int32 idx, const ValueType &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>abef174b39952b042147e0693e3254927</anchor>
      <arglist>(TagReFillPairs, int32 idx) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; ExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt;, TagReFillPairs &gt;</type>
      <name>rpReFillPairs</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a7711c53f86eee2e17dda37249ef1347e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adjustCapacity</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a094cab68474f9d487c8113228caf8c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; ValueType, ExecutionSpace &gt;</type>
      <name>values_</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>ae5dc55ebd91212e4cba8ddfb4e85899e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>size0_</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>aea7b24048c1690177d25ba8d4fc7ffa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; PairType, ExecutionSpace &gt;</type>
      <name>sortedPairs0_</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>af6865b24e490830340e49e4ba81e59b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; ValueType, ExecutionSpace &gt;</type>
      <name>values0_</name>
      <anchorfile>classpFlow_1_1sortedContactList.html</anchorfile>
      <anchor>a93e7ed5576fb59b38772cf6d8086e373</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sortedPairs</name>
    <filename>classpFlow_1_1sortedPairs.html</filename>
    <templarg>typename executionSpace</templarg>
    <templarg>typename idType</templarg>
    <base>pFlow::unsortedPairs</base>
    <class kind="struct">pFlow::sortedPairs::pairAccessor</class>
    <class kind="class">pFlow::sortedPairs::TagFillFlag</class>
    <class kind="class">pFlow::sortedPairs::TagFillPairs</class>
    <member kind="typedef">
      <type>unsortedPairs&lt; executionSpace, idType &gt;</type>
      <name>UnsortedPairs</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>aace43a73fcea2cf153dd2d9569d72421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a321d09fcb16c9519f78f3e8326ce48f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a245dc98ed68bf688e045d352ca6e2174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExecutionSpace::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a9037fe54e33b899b96a62988ecf26d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::PairType</type>
      <name>PairType</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>acf4d9906ba8a5697d815148b4c432239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::ContainerType</type>
      <name>ContainerType</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ad1ca136a7dde683da26ec3319a4b2cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ae1220e68772e0fcf9d1ae157396dfaa4</anchor>
      <arglist>(&quot;sortedPairs&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sortedPairs</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a2ecd1f046f310c03ee179d970b28b915</anchor>
      <arglist>(int32 initialSize=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeBroadSearch</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a32ff8c51a3aa19a92929906c6d81d00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterBroadSearch</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a6141d3224e90a32108452817d4e08ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD PairType</type>
      <name>getPair</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ade27870d308ffbaacefaf1f7792ba7cf</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>getPair</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a3091ec93b18d93c19f04ce173e2a29c7</anchor>
      <arglist>(int32 idx, PairType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isValid</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>aba79e8edf03103828a6f0eab13e3e938</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a4c0c6cdb0693c431b4dc63a3f8ede5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>loopCount</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a8ad3d4208636c7bbeab1ac1300687068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pairAccessor</type>
      <name>getPairs</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a196f60a46106f091bb84950e99697a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>afd32d1c4cda15e685fd3008f4ded29f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prepareSorted</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a34f835663a19f31aa1999f867d6b2109</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ac0ead8e7054e1dc4e9a55d894961d03c</anchor>
      <arglist>(TagFillFlag, int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ad4497888b6598612c0999ec0dc491d58</anchor>
      <arglist>(TagFillPairs, int32 i) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; ExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt;, TagFillFlag &gt;</type>
      <name>rpFillFlag</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>ac26fb676d4fa0af3acc115e89d599812</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; ExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt;, TagFillPairs &gt;</type>
      <name>rpFillPairs</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>aed661292246d557fbafd256f26a5821b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>size_</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>afca1d7282f84072f96f25bf93a42a254</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; int32, ExecutionSpace &gt;</type>
      <name>flags_</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a1d2a2d9fac33081ab00d8b326f2b6f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; PairType, ExecutionSpace &gt;</type>
      <name>sortedPairs_</name>
      <anchorfile>classpFlow_1_1sortedPairs.html</anchorfile>
      <anchor>a6cd2587a920171962e33cfebff0d0b1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::span</name>
    <filename>classpFlow_1_1span.html</filename>
    <templarg>typename T</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a4d1ca55c8c62d4fbf3ea42d9919125a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a7a87f910baaebc396ded9a2508e37f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a0c5a1541ecf7ad17925583cf6abd2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a6ec384ea37f233c648db341697cdebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a783c81fb3d585a513b521ab37644da06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>ab088798d28525c0befe3c707b95c5bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a1af10ba67005a939b2a93ad2439d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a9908eed0025a6c2a0d74fb470f41a091</anchor>
      <arglist>(&quot;span&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>span</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a28489f33e4661e774ee77b686ded09a4</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>span</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>afdd3894709afaef1dc3fd8058cf66eef</anchor>
      <arglist>(T *data, label size)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>span</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>adf6030e0caa1bb10fe3aa833d5378df2</anchor>
      <arglist>(const span &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD span &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a38f20a16f4a22095d4795bc4e9bca73f</anchor>
      <arglist>(const span &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>span</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>af7fb5f899f388f23c917a64a2dfe68c3</anchor>
      <arglist>(span &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD span &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a4d2240a6dd26dfc753b3605336072beb</anchor>
      <arglist>(span &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a43be5325ac00e9fa5e1157ad97bfcf7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T *</type>
      <name>data</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>ab7eb400a4fd5d97efa7b55f6358fa533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD label</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a5c3ae5af412668efb05b921a468dc350</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD constIterator</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a7e1aa8bc3e57ec9dc0865513fbe5afc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD constIterator</type>
      <name>cbegin</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a73e4696e132a9f02c692896107f26ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD constIterator</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a2107769aec696446c3550981ee371dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD constIterator</type>
      <name>cend</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a168880ad5dfa9ac83d83b8c5c545c1bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a4a1f139754fa8d7eba5039702632047d</anchor>
      <arglist>(int32 i)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a4e758a2ed67f9bde5133da36b6dc1e07</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a7ce1a17c17f01f072b5d81c3dbd23d20</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a94ff5a331b7134774b014d806d6afc51</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>data_</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>aa5a936fbbc363fa1913fdaadc70d872a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>size_</name>
      <anchorfile>classpFlow_1_1span.html</anchorfile>
      <anchor>a17a395478026b2bd4e4f8a7807b9bf6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sphere</name>
    <filename>classpFlow_1_1sphere.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>aebf283683e10db418c6a31fb2dec0515</anchor>
      <arglist>(&quot;sphere&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a019421bc01ed94462147dfb3d0dae238</anchor>
      <arglist>(const realx3 &amp;center, const real radius)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a6d4f46db39e84f0871654b7948572b35</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a95b6dbeccc5693a32177ec7976e31838</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a5e22992250c530193ab43d4ab3815695</anchor>
      <arglist>(const sphere &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a93314cce2089f0ae6ba9038c88a15a6f</anchor>
      <arglist>(sphere &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD sphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>af50e859d5a2adbe957f3e8727d9ac65e</anchor>
      <arglist>(const sphere &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD sphere &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>adf3a10645ee7c963a42e5d463cafd7ae</anchor>
      <arglist>(sphere &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sphere</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>ad4624379ed2bc52a9ba133c561c9e623</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a898603c1e4e433d2f304d86f1a22c53c</anchor>
      <arglist>(const realx3 &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const realx3 &amp;</type>
      <name>center</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a0e52ffd154d8d456959f350da526bfdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>minPoint</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a67424c452a87ed7ff748b65374f89e54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>maxPoint</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a22e25e0baa24f79d1fa113c2a84f00f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>radius</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a4611c0bbd5b552873706e6d361f8b43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>center_</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a58519a7039bfcaa45de84489becc4ad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>radius2_</name>
      <anchorfile>classpFlow_1_1sphere.html</anchorfile>
      <anchor>a498f87a6a3bd75c3036c49da59c964a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sphereInteraction</name>
    <filename>classpFlow_1_1sphereInteraction.html</filename>
    <templarg>typename contactForceModel</templarg>
    <templarg>typename geometryMotionModel</templarg>
    <templarg>template&lt; class, class, class &gt; class contactListType</templarg>
    <base>pFlow::interaction</base>
    <member kind="typedef">
      <type>geometryMotionModel</type>
      <name>GeometryMotionModel</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a92d80c9a6ba7b1c4bd6cf62df514a095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>contactForceModel</type>
      <name>ContactForceModel</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a3532cc9566d064856becaf061898cc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename geometryMotionModel::MotionModel</type>
      <name>MotionModel</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a9609236c05a92088701e0be353ae1aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ContactForceModel::contactForceStorage</type>
      <name>ModelStorage</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a0ca8fe8e9a50e2e293ae2d334d505b97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interaction::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a746fbb49f5fa23ecfdea0fa693d40dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interaction::IndexType</type>
      <name>IndexType</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ab04a64e60fdc8d207e0842ae22ead203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename interaction::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a290c4977854d696182f94ee0b11beaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>contactListType&lt; ModelStorage, ExecutionSpace, IdType &gt;</type>
      <name>ContactListType</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ae368a1ff5d1ee44cd9e169593c734d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename contactSearch::PairContainerType</type>
      <name>PairsContainerType</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a0d1ed1e8837f1f0d7faab5634fc10311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplate3</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a98e515ac9de730dafe652cf79d3ce1ce</anchor>
      <arglist>(&quot;sphereInteraction&quot;, ContactForceModel, MotionModel, ContactListType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>adbda74b13fb6f253badf2478c99fd3cf</anchor>
      <arglist>(systemControl &amp;control, const particles &amp;prtcl, const geometry &amp;geom)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a49422fe4d2d0079808b801102d6e6265</anchor>
      <arglist>(interaction, sphereInteraction, systemControl)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ada71b97666fe3f66b31690bf12633c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterate</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>afa767bddda52eb71cea18f755e17d559</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterIteration</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a5ab4b6c611c3256e54f51bbfc484d58e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a98372d2b87e1c67d4b2eb0517336abf7</anchor>
      <arglist>(const eventMessage &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereSphereInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a6198cba78b395b0bcc307eadfb31b82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sphereWallInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a896e9608ca8d44dee25f2f9d54344c0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; Kokkos::IndexType&lt; int32 &gt;, Kokkos::Schedule&lt; Kokkos::Dynamic &gt; &gt;</type>
      <name>rpPPInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ae0579d94abaf8427e10a2f0d69a96563</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>rpPPInteraction</type>
      <name>rpPWInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ae4ee93ce294f9a505bf6d222cda16426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>createSphereInteraction</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a9eab7f2a8f2976d43a4ae0bfaa31b142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>managePPContactLists</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a597cbd8042eaa556357094485b716c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>managePWContactLists</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a829b8d15f91240e6bf9147f73f939d11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GeometryMotionModel &amp;</type>
      <name>geometryMotion_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a85c5692b97a3b485cc3f52368b063942</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const sphereParticles &amp;</type>
      <name>sphParticles_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>af9b03fc5ca999442443d1c28771d0a94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; ContactForceModel &gt;</type>
      <name>forceModel_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a54a996dc239c37bbbdd265524a386065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; ContactListType &gt;</type>
      <name>ppContactList_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a01d564ec7fc23a6d25277a4910cb16dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; ContactListType &gt;</type>
      <name>pwContactList_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>ade3a55574b6fc47f8cc1ed1d4f8ac62a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>ppInteractionTimer_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>abeef262bf78ee4dd6e40ee7834767b35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>pwInteractionTimer_</name>
      <anchorfile>classpFlow_1_1sphereInteraction.html</anchorfile>
      <anchor>a7fe511b7575f6a62d774460cc38ae78e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sphereParticles</name>
    <filename>classpFlow_1_1sphereParticles.html</filename>
    <base>pFlow::particles</base>
    <member kind="function">
      <type></type>
      <name>sphereParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>af3a0e20c9660776af6f0b8118e89e880</anchor>
      <arglist>(systemControl &amp;control, const property &amp;prop)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a8450f38410b7af1eaf07469a494c605a</anchor>
      <arglist>(const sphereParticles &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>ab53f5698d4c9a33f95a2964fb4dc7bf5</anchor>
      <arglist>(sphereParticles &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>sphereParticles &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>afe839d8ca5dfb02d2c43428f6b79313d</anchor>
      <arglist>(const sphereParticles &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>sphereParticles &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a013b36e2b7192ca795fcc7ee4464c440</anchor>
      <arglist>(sphereParticles &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~sphereParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a55eec252a6d08a330907d3adab18add1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a99cba4c27cdaa229242ccd3b22b04fba</anchor>
      <arglist>(const realx3Vector &amp;position, const wordVector &amp;shapes, const setFieldList &amp;setField) override</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>shapes</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a656c36960744a8a6d83a638d36e4f6a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>I</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a7e30924429005d30be1310c9558d4d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>I</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a85de962433713110c8292e321a589136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realx3Vector_D</type>
      <name>rVelocity</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a86b8cb116038043b21a889bf21c974c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const realVector_D &amp;</type>
      <name>boundingSphere</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>aa3050a4214427959152fc81608c2c049</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>shapeTypeName</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a0af8dfd320c4e87c281555fa95a80a2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundingSphereMinMax</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a37902e8915b3022d1068391f864a8e59</anchor>
      <arglist>(real &amp;minDiam, real &amp;maxDiam) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a98372d2b87e1c67d4b2eb0517336abf7</anchor>
      <arglist>(const eventMessage &amp;msg) override</arglist>
    </member>
    <member kind="function">
      <type>realx3PointField_D &amp;</type>
      <name>rAcceleration</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a3eb3372b168c928e63c8dec9bdea4f5c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>const realx3PointField_D &amp;</type>
      <name>rAcceleration</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a9fe07cf7b8ac8567c1a06e96cc39baa0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeIteration</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>ada71b97666fe3f66b31690bf12633c32</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>iterate</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>afa767bddda52eb71cea18f755e17d559</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterIteration</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a5ab4b6c611c3256e54f51bbfc484d58e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>diameterMassInertiaPropId</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>acdd3b34e25a44bec4f18b95e2440ff9a</anchor>
      <arglist>(const word &amp;shName, real &amp;diam, real &amp;mass, real &amp;I, int8 &amp;propIdx)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initializeParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a84343969d723c548f0f20fcd9294d351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>insertSphereParticles</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>af38e902a6e8867893c7fafaeabf99578</anchor>
      <arglist>(const wordVector &amp;names, const int32IndexContainer &amp;indices)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual uniquePtr&lt; List&lt; eventObserver * &gt; &gt;</type>
      <name>getFieldObjectList</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a8a46f36158973e7200555bc769846a8a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const property &amp;</type>
      <name>property_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a525dee0c19ede91482b300ad71d52e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sphereShape &amp;</type>
      <name>shapes_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a6f1b7000703d1ada1c9a1035f1e5dba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realPointField_D &amp;</type>
      <name>I_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a95775f9987ece054ee634ba2aa091040</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>rVelocity_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>aa585c28b8d04890123cc3fc109b6c0ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3PointField_D &amp;</type>
      <name>rAcceleration_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>ae5f8968426dbb99341f7d4a807523fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; integration &gt;</type>
      <name>rVelIntegration_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a1166eb30f8a6e6eb69bddb77706f122c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>accelerationTimer_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a1bff664d1437325cc40dfb3e29421da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>intPredictTimer_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>acab942b0343835097cc05a0e0d97ae9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>intCorrectTimer_</name>
      <anchorfile>classpFlow_1_1sphereParticles.html</anchorfile>
      <anchor>a2a1c9981adfb622385473dc09302639d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sphereRegion</name>
    <filename>classpFlow_1_1sphereRegion.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a6f8ec35b7be956d17df770c4b0497031</anchor>
      <arglist>(&quot;sphereRegion&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereRegion</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>aed469d8de2a8ec4c52770d425984590e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sphereRegion</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>aa19e53faad62242a07cf4b7b5bdc0548</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInside</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>aaa6340380ab7af3599579f49f62308da</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>peek</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a742999f822100111462c25118a0ce0fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>sphere</type>
      <name>sphere_</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a256801ded70af260d2660fb42c6de353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniformRandomReal</type>
      <name>random_</name>
      <anchorfile>classpFlow_1_1sphereRegion.html</anchorfile>
      <anchor>a809105944d87bd27bb8fa71167a86e14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sphereShape</name>
    <filename>classpFlow_1_1sphereShape.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a52e240ee225fc89a5673c678fd942d9a</anchor>
      <arglist>(&quot;sphereShape&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereShape</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a5ff3b9c9e439388497056ffbc8fd27f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereShape</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a38463ab319d1eb111d39c8334e341d58</anchor>
      <arglist>(const realVector &amp;diameter, const wordVector &amp;property, const wordVector &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereShape</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a85d3b55187f4163acbd895032b76a4d4</anchor>
      <arglist>(const sphereShape &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sphereShape</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>aad4c946bb295242f08714e0eef00025a</anchor>
      <arglist>(sphereShape &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>sphereShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a748078b5a299d820b57936085f7fc171</anchor>
      <arglist>(const sphereShape &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>sphereShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a80c5e7bf36ba28eaf2e803b1c1e62f54</anchor>
      <arglist>(sphereShape &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>acc863d85d662202ba8b08e691372887b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>sphereShape *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a5dcf82cc2ae13814f086a8210acb8f46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~sphereShape</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a5453e20e113ca0574ed07a2cca754faf</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>names</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a026870fa487be040bfc2a66ac722b628</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>diameters</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a97729586146193be0a20d6e23494cc33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>materials</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a736169523b5ae9d52a4f80eb56a8cd13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto</type>
      <name>diameter</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a641827da52ccdc9dafd4a095865bb3c2</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>const auto</type>
      <name>material</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a645e9d84374fab3371d56fe9c92e5766</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a4885b8072705ea5a0238d7ba988c4df6</anchor>
      <arglist>(const word &amp;name, uint32 &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>uint32</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a54800ab11d17a4b23fba7c820e0b515c</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>indexToName</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>aa8049c4f0b79de75ab2c913482a8dd2c</anchor>
      <arglist>(uint32 i, word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shapeToDiameter</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>ae330b6820e487264676fdbed7250c95e</anchor>
      <arglist>(wordVector &amp;names, realVector &amp;diams) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>diameterMinMax</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>abf3b8d0b7f068ba39f11805ea15194ca</anchor>
      <arglist>(real &amp;minD, real &amp;maxD) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>insertNames</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>aa4bf56a0baa8e23b866f1e7e45b142b6</anchor>
      <arglist>(const wordVector &amp;names)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realVector</type>
      <name>diameters_</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>ad3d10a8bc8ebc47c0d3f5c316e7930cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordVector</type>
      <name>materials_</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a437403f7d71404549fdfc4fc1825cff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordHashMap&lt; uint32 &gt;</type>
      <name>names_</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a670b90cfd83bd7b5a1e05d3205aca8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numShapes_</name>
      <anchorfile>classpFlow_1_1sphereShape.html</anchorfile>
      <anchor>a368736b45751f12dc2ad6263428d68b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::stlFile</name>
    <filename>classpFlow_1_1stlFile.html</filename>
    <member kind="function">
      <type></type>
      <name>stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a6cfd226fccee8d43b9d369765cd2936a</anchor>
      <arglist>(fileSystem file)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>ae68ba1b1c303b2227678d91b9b97efdd</anchor>
      <arglist>(fileSystem file, const word &amp;name, const realx3x3Vector &amp;vertecies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a270311ed2a3231c28199e7dc510dbda4</anchor>
      <arglist>(fileSystem file, const word &amp;name, realx3x3Vector &amp;&amp;vertecies)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>adc86f43e9476ba200e14df7c7bdc085a</anchor>
      <arglist>(const stlFile &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a7f84d0c31246a8d24513648198262bb4</anchor>
      <arglist>(stlFile &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~stlFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a6bcc9049f8f7c69fa30b66478980fddd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolid</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a56b6b65aa96162d68667fe88bf1ed022</anchor>
      <arglist>(const word &amp;name, const realx3x3Vector &amp;vertecies)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSolid</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a3a4c36bbf56e2b5955198b3744403803</anchor>
      <arglist>(const word &amp;name, realx3x3Vector &amp;&amp;vertecies)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>af816873151ddb0126e98bb2f914d8ed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>ad48b7b943e88478c15879659cce7aebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFile</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a9e282f2dc7219517b46fcac34eb94bb0</anchor>
      <arglist>(fileSystem file) const</arglist>
    </member>
    <member kind="function">
      <type>const wordList &amp;</type>
      <name>names</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>ad6fbb0e2d41355648b9e68b636d59525</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const realx3x3Vector &amp;</type>
      <name>solid</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>aa2b23badf752551610f08e92808e5a30</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>ab0c815f83910ba70516feb9113e40f5b</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readSolid</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a1d3b1b4ac56b0cec4337f6d7e9c6ce6c</anchor>
      <arglist>(iIstream &amp;is, realx3x3Vector &amp;vertecies, word &amp;name)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readFacet</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a0140ff33b58a2b090c52b1bea5991718</anchor>
      <arglist>(iIstream &amp;is, realx3x3 &amp;tri)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeSolid</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>ae2a44e9c4c137960c5f4a521fcfab57b</anchor>
      <arglist>(iOstream &amp;os, const realx3x3Vector &amp;vertecies, const word &amp;name) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeFacet</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a31d2dfd4d5c60b132fbd118af72afceb</anchor>
      <arglist>(iOstream &amp;os, const realx3x3 &amp;tri) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ListPtr&lt; realx3x3Vector &gt;</type>
      <name>solids_</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a19583183274b3fa30db483a53ee64c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>solidNames_</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>af284f423e5b4a31826089732094f04f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>file_</name>
      <anchorfile>classpFlow_1_1stlFile.html</anchorfile>
      <anchor>a5488b2a6e6a540fa00beb7e8c5a0c64e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::stlWall</name>
    <filename>classpFlow_1_1stlWall.html</filename>
    <base>pFlow::Wall</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1stlWall.html</anchorfile>
      <anchor>ad361773f17c73490555ef511953bfe39</anchor>
      <arglist>(&quot;stlWall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlWall</name>
      <anchorfile>classpFlow_1_1stlWall.html</anchorfile>
      <anchor>ab17af8f35a2c8be01a229063e4cd47a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stlWall</name>
      <anchorfile>classpFlow_1_1stlWall.html</anchorfile>
      <anchor>a67f01954d82f330f9dc1c26497de7e56</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>add_vCtor</name>
      <anchorfile>classpFlow_1_1stlWall.html</anchorfile>
      <anchor>a86c66f30baaba93c9b76cac34cc68c3a</anchor>
      <arglist>(Wall, stlWall, dictionary)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readSTLWall</name>
      <anchorfile>classpFlow_1_1stlWall.html</anchorfile>
      <anchor>abf7bf7378ddc147f3dc90ccadb85c41f</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::stridedRange</name>
    <filename>classpFlow_1_1stridedRange.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a512c66eb506a5be36cf59423198dacd9</anchor>
      <arglist>(&quot;stridedRange&quot;, T)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stridedRange</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a9b987e04bb2acc210633080eac1ce28a</anchor>
      <arglist>(T begin, T end, T stride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stridedRange</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a4211d50e66ef95f4d53b0642cb2f7476</anchor>
      <arglist>(T begin, T stride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stridedRange</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a7b726da27c4a8e3c5015bce9f4ec5e3a</anchor>
      <arglist>(const word &amp;rangeString)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>stridedRange</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>add300761925299847a1638498aafef7a</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a66b56ad16ed6691f634c418b77f7b5f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>ab2f052e4a350d7ade62a5ec1b22b1a3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>stride</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a2731fe62ddef40abedae4b80102bf8d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMember</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a0ca2050caf024eff74f7dc1b942f1788</anchor>
      <arglist>(T val, T epsilon=0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parseRange</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a862698fba81c111cbfaca5ea0528e5dd</anchor>
      <arglist>(const word &amp;rangeString, T &amp;begin, T &amp;end, T &amp;stride)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>begin_</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>ad543e853981e56c8ae28a8b8b8ca01ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>end_</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a2c7d06a54745697d21bed0107ce26432</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>stride_</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>ad3862eecfb2dc23710a234fb0919f54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const T</type>
      <name>maxVal</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>afda6cc7253daf42d2e083c4232237ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const T</type>
      <name>minVal</name>
      <anchorfile>classpFlow_1_1stridedRange.html</anchorfile>
      <anchor>a9232c7f0c9938e0d3d5dbeaeb4521e5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::symArray</name>
    <filename>classpFlow_1_1symArray.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename MemorySpace</templarg>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a906cc5a36684b4ca90994f113dbf50ca</anchor>
      <arglist>(&quot;symArray&quot;, T, memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a76155c359dbbaf3c84f1421e1083aa26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>af28cf729e88108ec1f896e267980d232</anchor>
      <arglist>(uint32 n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a70f543511725399e6009eef8f1b86545</anchor>
      <arglist>(word name, uint32 n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a479e35071d6b277b861e98cc60a8a34d</anchor>
      <arglist>(word name, uint32 n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a9592dc24e09c3504bf981a5c048b6549</anchor>
      <arglist>(word name, Vector&lt; T &gt; src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ad5b55471d6579e2765c4e9d245a8921e</anchor>
      <arglist>(const symArray &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H symArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a898c9e58a1d9b922471e2dde348c7dde</anchor>
      <arglist>(const symArray &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>aa86718c48cdd020494d8e4e127d773ba</anchor>
      <arglist>(symArray &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H symArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a3aad67eb4318fd99560f38ccda054416</anchor>
      <arglist>(symArray &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>~symArray</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>af1d136d30330e8adca65ffa2984df482</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a34b3e020ef4d15f9b2442bfff37f19b8</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>af1d0f0f4e90c0f6ad86ab77e28c4f5c6</anchor>
      <arglist>(uint32 i, uint32 j)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>acf30216b1fc32266f0035ac8d504337d</anchor>
      <arglist>(uint32 i, uint32 j) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assign</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ac49828e84b4c929c15c813500e280005</anchor>
      <arglist>(const Vector&lt; T &gt; src)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static INLINE_FUNCTION_HD uint32</type>
      <name>numElem</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ac8d4e3a65ebdb6ecd7086b4efe7f78b2</anchor>
      <arglist>(uint32 n)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>getN</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>aaa204e5a9810b8db8dd34cc29ee4c464</anchor>
      <arglist>(uint32 nElem, uint32 &amp;n)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr const char *</type>
      <name>memoerySpaceName</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a050453ea5010d379462b233e848cb9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uint32</type>
      <name>n_</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a06acc2e45214b635a293dae6fb6466f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType</type>
      <name>view_</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ab70db270f1fd70ba39084a449b29bbd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>symArray&lt; T, MemorySpace &gt;</type>
      <name>SymArrayType</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a8fc5929c32211316e5a98f98b62cf036</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a4d1ca55c8c62d4fbf3ea42d9919125a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>const T *</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a7a87f910baaebc396ded9a2508e37f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a0c5a1541ecf7ad17925583cf6abd2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>const T &amp;</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a6ec384ea37f233c648db341697cdebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a783c81fb3d585a513b521ab37644da06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>ab088798d28525c0befe3c707b95c5bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>const T *</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a1af10ba67005a939b2a93ad2439d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>ViewType1D&lt; T, MemorySpace &gt;</type>
      <name>ViewType</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>aeaba820f36a592084855e0561b23186d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename ViewType::device_type</type>
      <name>deviceType</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>a1211f435be797f1e401e581955ebfdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename ViewType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>addf3d70a65664fe7457b94dda813187a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>typename ViewType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1symArray.html</anchorfile>
      <anchor>af5fa7a7ba5d8eea751c76c44ac8cabed</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::systemControl</name>
    <filename>classpFlow_1_1systemControl.html</filename>
    <base>pFlow::repository</base>
    <member kind="function">
      <type></type>
      <name>systemControl</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ab5a7a83b2be626779e8da1684287f6ad</anchor>
      <arglist>(const fileSystem path=CWD())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>systemControl</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>afc2d8e164f084bbf111a14f984631890</anchor>
      <arglist>(const real startTime, const real endTime, const real saveInterval, const word startTimeName, const fileSystem path=CWD())</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>settings</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a2c4ec02f76bc470a1485e12985abdeb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>settings</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>aa0d2ad895a032283b615f729170d236d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>caseSetup</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a965e0cc34f11babba005c85f8c047feb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>caseSetup</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a9b6b64b11b9cc00aa133666d63338371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a2abfb6ffb81a9ffbf408030674873052</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Time &amp;</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a473565c2578d16b68656fed48d48b0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a329ecdaa1c0990a7a5e8c55c8661dbd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ad0168507596c67726055f093ec45e559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Timers &amp;</type>
      <name>timers</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a44fca24f93a0475f80e770e103f3eb45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Timers &amp;</type>
      <name>timers</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a0014758b3d9d7efbb05d65934a5d7e25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timersReport</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a82ccd9de8d972a6be7dd92e5e8c91418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const dictionary &amp;</type>
      <name>settingsDict</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>aa5d3e0aab228ec5aa69272bd6cd65cf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dictionary &amp;</type>
      <name>settingsDict</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a2de3a5e72683a4cec4db3f5a534d4eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual word</type>
      <name>runName</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a2590a87028bbabcf133f18ae596c71dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const realx3 &amp;</type>
      <name>g</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a304b2980f0b860b4784ed19f0b0cade6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const box &amp;</type>
      <name>domain</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>acd0748f532350f8646021b12012fdb15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator++</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ab591141c510c110635d0964bde7dff67</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSaveTimeFolder</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a0c6ee43740da4e029eb32b016c9575c4</anchor>
      <arglist>(bool saveToFile, const word &amp;timeName=&quot;wrongTimeFolder&quot;)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>outFilePrecision</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>aa20e81f656d5e39f0e25d84b7c24c152</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static word</type>
      <name>getRunName</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>abdb9f71335d973537b7571418077a502</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static word</type>
      <name>getTopFolder</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a7074205a94f43aa32719ccd2e290b470</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const word</type>
      <name>runName_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a852628cf90d003e49d9f706906b83513</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const fileSystem</type>
      <name>topLevelFolder_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a0acc0b8ab31e69bf1ffc83b451820bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository</type>
      <name>settings_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>acb7123cbd8c9981c7e94f3e8482660a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository</type>
      <name>caseSetup_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>abeb402045cb13f7c4e50e98f74ee2f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dictionary &amp;</type>
      <name>settingsDict_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ae7b299dbb0ef07924d3ab5bd9d801e49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dynamicLinkLibs</type>
      <name>libs_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ae59900d974a3633efcec8f3c8969eaaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>outFilePrecision_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a6afc45488db10e29da3a79562ace2249</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Time</type>
      <name>Time_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a38394f0d5f7744d04507e88657827464</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>externalTimeControl_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>aa13fc834266618685965444bfb86821f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>g_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>ab24f1a358341cf000731dd711ca5d518</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>box</type>
      <name>domain_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>aab1dcc2ee3915125ba5aa7e66678d2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timers</type>
      <name>timers_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a0c29ef9514a77bce5b8f4ece533bcf8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Logical</type>
      <name>timersReport_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a0cd6da73f4e91af1f1fd862e2f8ee47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>writeToFileTimer_</name>
      <anchorfile>classpFlow_1_1systemControl.html</anchorfile>
      <anchor>a97723244a06a5566aa0c1468583d2048</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::sortedPairs::TagFillFlag</name>
    <filename>classpFlow_1_1sortedPairs_1_1TagFillFlag.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::sortedPairs::TagFillPairs</name>
    <filename>classpFlow_1_1sortedPairs_1_1TagFillPairs.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::cellsWallLevel0::TagFindCellRange2</name>
    <filename>classpFlow_1_1cellsWallLevel0_1_1TagFindCellRange2.html</filename>
  </compound>
  <compound kind="struct">
    <name>pFlow::NBSLevel0::TagFindPairs</name>
    <filename>structpFlow_1_1NBSLevel0_1_1TagFindPairs.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::sortedContactList::TagReFillPairs</name>
    <filename>classpFlow_1_1sortedContactList_1_1TagReFillPairs.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::unsortedContactList::TagReFillPairs</name>
    <filename>classpFlow_1_1unsortedContactList_1_1TagReFillPairs.html</filename>
  </compound>
  <compound kind="class">
    <name>pFlow::Time</name>
    <filename>classpFlow_1_1Time.html</filename>
    <base>pFlow::repository</base>
    <base>pFlow::timeControl</base>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>aa81ff8e40a2904a1e4012a5139caf11d</anchor>
      <arglist>(repository *owner, const dictionary &amp;setiingsDict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a693837bca5cf124967f1b949b3fbd7ab</anchor>
      <arglist>(repository *owner, dictionary &amp;setiingsDict, real startTime, real endTime, real saveInterval, word startTimeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fileSystem</type>
      <name>localPath</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a51b74713a538d9aa4cc856153d7c333d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a329ecdaa1c0990a7a5e8c55c8661dbd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>geometry</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>ad0168507596c67726055f093ec45e559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const repository &amp;</type>
      <name>integration</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>afabd69f3fe96de2a27457c2b0175d079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>repository &amp;</type>
      <name>integration</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>aeba406179f15e6b67b9e898cf8e42ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a4e7969c9e53d9007d5dbed9f18fc596a</anchor>
      <arglist>(bool verbose=false) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository</type>
      <name>geometry_</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a2dae603535b44cff7d8683019fe89925</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>repository</type>
      <name>integration_</name>
      <anchorfile>classpFlow_1_1Time.html</anchorfile>
      <anchor>a92853203860167fb8932aa8e32acec2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::timeControl</name>
    <filename>classpFlow_1_1timeControl.html</filename>
    <member kind="function">
      <type></type>
      <name>timeControl</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a3b9ffd76e31f477f6bc6822e802058dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>timeControl</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a779f8770a6807e262a85d274d1e531f5</anchor>
      <arglist>(dictionary &amp;dict, real startTime, real endTime, real saveInterval, word startTimeName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~timeControl</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a02ef2c6e03f616a109f45e775aba174b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>dt</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a4fc823022c8f0175108f10a42e7b858f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>setTime</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>aa36ac933ac4883138a4ecdbeadf2ce0c</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStopAt</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab720d825ddebb68d0ab08d3f13d04e39</anchor>
      <arglist>(real sT)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>startTime</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>aaff3f438097803be5fef5cd29cd8985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>timeName</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a65b1ca1c81e3fe3de6eebc0c07e5c003</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>currentTime</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a476763249b99b131d7116430896cd44e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>currentTimeWord</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a94edcc0afbc3380392a6ce745913a31c</anchor>
      <arglist>(bool forSave=true) const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>currentIter</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a581d391429e3071085e2bcead0653efb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finalTime</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a1f73acccf51d9ca370c7c0798be38510</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>reachedStopAt</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a75463b442578a00111678ff4b476d6f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outputToFile</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ae8a94aa257125307d3df43083c280d53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timersReportTime</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a87c857adb25188138027cd40884e18ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setOutputToFile</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a9f16eb3f9fc84652d5bd44c766572b4a</anchor>
      <arglist>(real writeTime, const word &amp;timeName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator++</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab591141c510c110635d0964bde7dff67</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSaveTimeFolder</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a0c6ee43740da4e029eb32b016c9575c4</anchor>
      <arglist>(bool saveToFile, const word &amp;timeName=&quot;wrongTimeFolder&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>timePrecision</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a6ee4bd223ce658eee969972435041347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkForOutputToFile</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a929ce719f6ba3f5075a41b42f133aed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>screenReport</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab052b8178ea1879a0ef0a0edde4a0056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>dt_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab7c0e1c754daddef0aa990fccb8ef033</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>startTime_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a9da50a81b9da4200db555ac368c98ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>endTime_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>aec7a9ba664af18fb17da1eb822b1ee14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>stopAt_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a2ed3e3688a73415d8aba7a5055bbf3a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>currentTime_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>aa5083b95d767de3c06e191d0b016f209</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>saveInterval_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab259dc32cc17537fcee2b30046de75e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>lastSaved_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>acda1bcdd588b6e9d644ca2c0b980e59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>currentIter_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>af11548cfec6dd4efe0c8702395cf8ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>timePrecision_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>aac5eec7fab78517091cfb5a35294bd43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>managedExternaly_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a64b83de0a98a817a09d0b7944d41ff1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>timeName_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ae0277279b00150a8515e9d2ccef0fb89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>writeTime_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a8e60bd8ba3f83c0eb098f5a8c241e981</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realStridedRange</type>
      <name>timersReportInterval_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a9567616e0a470e785c790c5d932d8cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32StridedRagne</type>
      <name>screenReportInterval_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>a629ee1c73e573adcf0e691d5c13e5b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>outputToFile_</name>
      <anchorfile>classpFlow_1_1timeControl.html</anchorfile>
      <anchor>ab859a194f5f26e6ef4361b8b0508d3a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::timeFlowControl</name>
    <filename>classpFlow_1_1timeFlowControl.html</filename>
    <member kind="function">
      <type></type>
      <name>timeFlowControl</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>ac2fd9715da4fcd3790fcda568f735ce8</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertionTime</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a9eaa41444bd1a7536cf7ed29783d6dda</anchor>
      <arglist>(real currentTime, real dt)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>totalInserted</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a34a2411f69a8d0d96e56c57941d8df04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a6ce0c64db98eb6144d363dbfc86104eb</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a6964e9f1f100001543fdb044fa7fc896</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readTimeFlowControl</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a965f20676739fa59a7a27457add2ae61</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeTimeFlowControl</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a6901db0c788489c5e8a317c034774401</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>numberToBeInserted</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a16987f9942190579ad06d5d67adfc67d</anchor>
      <arglist>(real currentTime)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>addToNumInserted</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a1ebee6449f6428d4d4597b61e8b5c15a</anchor>
      <arglist>(size_t newInserted)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>startTime_</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a9da50a81b9da4200db555ac368c98ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>endTime_</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>aec7a9ba664af18fb17da1eb822b1ee14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>interval_</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a51bea3b14070614ca348b0574b4fd741</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>rate_</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>ac29edb543b14ed93013258583f9684a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>numInserted_</name>
      <anchorfile>classpFlow_1_1timeFlowControl.html</anchorfile>
      <anchor>a2137233941e7ea15b94415eaabaf765b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::timeFolder</name>
    <filename>classpFlow_1_1timeFolder.html</filename>
    <member kind="function">
      <type></type>
      <name>timeFolder</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a5f022e1e425031e07f9d3cf26a5b5869</anchor>
      <arglist>(const systemControl &amp;control)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>timeFolder</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>adea4a268140ceb19ca48f89c2eb2ea99</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a6fc92e0e88a1173babd33b596d8708b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>folder</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a4e8f348d5741229dc3661d90703080ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>timeName</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a56cdb164080a077145119f7a5d9e3783</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>localFolder</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a8084e953ac3d48aa06fbd3bfe263c570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator++</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>ab591141c510c110635d0964bde7dff67</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a61efd4196a96540ee018fee8791f3f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rewind</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>ab8734e666421c9fe3b6380a818c6c727</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>finished</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>aebaed0be88cbcf45f1985b819c9dabb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>startTime</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>aaff3f438097803be5fef5cd29cd8985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>endTime</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a2aafefc5248e595246d11de0587524f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>timeList</type>
      <name>folders_</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>ab1d53dc0b112036660730113d938dd3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>timeList::iterator</type>
      <name>currentFolder_</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>aaf117421f033fb251270941637cf69ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="private">
      <type>Map&lt; real, fileSystem &gt;</type>
      <name>timeList</name>
      <anchorfile>classpFlow_1_1timeFolder.html</anchorfile>
      <anchor>a66f3c98e81275c61f015d321c21a216e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::timeInterval</name>
    <filename>classpFlow_1_1timeInterval.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>timeInterval</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a6ec0044a45c5a6a4ef306b8a00240051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>timeInterval</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a8c680eddc8ee96c3af3f7215869ed1fc</anchor>
      <arglist>(const timeInterval &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD timeInterval &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>aa1b864896f629c3df9f71d710bf0ee68</anchor>
      <arglist>(const timeInterval &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>timeInterval</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a24cfb3071d5c694e67b65a5940ef25ae</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~timeInterval</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a1d0ac3630b0565fb36d27c941bb5db69</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>startTime</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a1f76f3cab93a628ecd4cf0db9b9a6dcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>endTime</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>ab312d7696520aee83502eee0497cad81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD auto</type>
      <name>time</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>ad14a6af4583f1c85a17a40ff5ccb8794</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>setTime</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a0c0f53f98461312b9cf461aa83d3de51</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>inTimeRange</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>aaf553eb9b0ebeb5e9454a3cecbe543a8</anchor>
      <arglist>(real t) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>inTimeRange</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a690a47d7890165ea3dd242b11fafc07a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>startTime_</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a9da50a81b9da4200db555ac368c98ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>endTime_</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>aec7a9ba664af18fb17da1eb822b1ee14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>time_</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a01b25d5afba0d2d8b20f4428a3810933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>isInInterval_</name>
      <anchorfile>classpFlow_1_1timeInterval.html</anchorfile>
      <anchor>a2ce3cd3ca04a0e8bffa563b527d9e746</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Timer</name>
    <filename>classpFlow_1_1Timer.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a6c6916b036bdb57df80a4b89f06fafc0</anchor>
      <arglist>(&quot;Timer&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a6a8bc5014802d569f6d01c4f36121a81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a5115e2a6e5e6c468a0de45474c5bf51e</anchor>
      <arglist>(const word name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a20fb2e154206e803859e8be7e8890678</anchor>
      <arglist>(const word name, Timers *parrent)</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a51ae053ef677d6c2d35ce01b46089706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timer</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a4f8a8b0b7dca75172a8e036314ad1794</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeParrent</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a950faea5e9c3f950e81839accf54d136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32</type>
      <name>level</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>ab9fe1ac829a669d9cf44d4c7ddd81574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>master</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>ab7f3740f07fc01cc6949fa5e5aab87f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a60de64d75454385b23995437f1d72669</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>aaf81d3fdaf258088d7692fa70cece087</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>timerActive</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>ac5b452503492dd1c556ff406c28bbb70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>lastTime</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a3ce45ea61ab221e34f89394524f8eeee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>totalTime</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>ae1a67a10b75d89b83ecb3f3598f8d395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>averageTime</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a7e12358ebcceb29dea6ecc06f4fc2482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real</type>
      <name>accTimersTotal</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a8d45c29a8c46fc0eb68cd5116e7bb70a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a878f1a2a8b65bc9bdf57f7c1a3f90a09</anchor>
      <arglist>(iOstream &amp;os, bool subTree) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>af455eab4a4acc3f4b6fae6bb43fdfd2d</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::chrono::high_resolution_clock</type>
      <name>timer</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>aad52d0d8782bcf92a17c7e91d3d54051</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>timer::time_point</type>
      <name>start_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>aa0ce5ac4d2bf83ba61e5a8059feec51d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numIteration_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>aa7b835668606a200cf1880f610ef8b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>accTime_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a36608b2f543efbaab78f3d82b05905d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>lastTime_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a25c08d99327d22af095d093026ba409c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timers *</type>
      <name>parrent_</name>
      <anchorfile>classpFlow_1_1Timer.html</anchorfile>
      <anchor>a16bc893238e1dfb531287607045b039c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Timers</name>
    <filename>classpFlow_1_1Timers.html</filename>
    <base>pFlow::Timer</base>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a88b9a9c305d3c238b1239e2f3df4e8c1</anchor>
      <arglist>(&quot;Timers&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timers</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>ada54077ae504ce48271bf28f8637b712</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timers</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a7176c06bd2b7fd858187aea22a0ae195</anchor>
      <arglist>(const word &amp;name, Timers *parrent)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Timers</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>ae6bf60796862abbf75881863dc4e2aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; Timer &gt;</type>
      <name>addTimer</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a04c2900e9eb461eaea919d342bfb9ae7</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addToList</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a7d56acfa176522e9c95ad99607d07f49</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFromList</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a4f6003458edf8502bb1185dae6773da5</anchor>
      <arglist>(Timer *timer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int32</type>
      <name>level</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>aec9d2fb116b20f02157e55c128b901ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>master</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>ab7f3740f07fc01cc6949fa5e5aab87f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>accTimersTotal</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>abe5703bd8255f2ec21ffe5d82dfee164</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a268ef46f8b8bdbc5512d1ce25b177136</anchor>
      <arglist>(iOstream &amp;os, bool subTree=true) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>af455eab4a4acc3f4b6fae6bb43fdfd2d</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>List&lt; pFlow::Timer * &gt;</type>
      <name>timers_</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a53ea8ded64b447e76f1f27b0f6e9d394</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>level_</name>
      <anchorfile>classpFlow_1_1Timers.html</anchorfile>
      <anchor>a840743643df2d049937fe560c29b6d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::token</name>
    <filename>classpFlow_1_1token.html</filename>
    <class kind="union">pFlow::token::content</class>
    <member kind="enumeration">
      <type></type>
      <name>tokenType</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a391ad3dbcf1f6d5c27590a7e511a1667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUNCTUATION</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9aff042e254971f0ff4e05c584ce66be2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9ae663dbb8f8244e122acb5bd6b2c216e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT64</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a423a1db7cbc915478f654b15f87f3aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOAT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a9cf4a0866224b0bb4a7a895da27c9c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a33465d1d419b1074fb259ef444609e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORD</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a4ad40322037d6d371dca3e5cf993f5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9aee847e634a4297b274316de8a8ca9921</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECTIVE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9ae3852cb010d5e422026faf83b3c16f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIABLE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a39031ce5df6f91d3778590d6d644b9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a2fd6f336d08340583bd620a7f5694c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>flagType</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FLAG</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682a25805f11a823d4df4dc3c749273f5341</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682af9c208c7d7a0f102f2683165540c882d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682aecafbc1299672a8c1521cc0d5f1ae986</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>punctuationToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NULL_TOKEN</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a6dc3fd38837c17d96bc91acd7fb036e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ac08dae7edcb5c5bb959fee5971fbad95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAB</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a920380215591395ea33ee5df8e293e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NL</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31aeba10cd0b438b1f9094fa3d1fc88193e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_STATEMENT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a60d8bd9afe6091a5c3904605dd0e0c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_LIST</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a8042f41e6dc49acd5cf4e86844f79acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_LIST</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ab0421ccee09cdeadea4bc12e7f38be24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_SQR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a205c3715f7e514a181174f5a8e35e5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_SQR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ad243a7953a49a90c6f7230e40a522a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_BLOCK</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a1a359ac3023cdc0a2d09f3c5124e09d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_BLOCK</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a3019a113fdbe1f6734054dee2d5f692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLON</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a29cf94637337909c3813bb50d6e9b3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMA</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31af81277bcd86412fe04bb68718ea09392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOLLAR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a8830788e557e82569f17668cd303436a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQUOTE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a61ef38d6155e0a5103be62137c2f28a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DQUOTE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a94780f6b7ec435b16872e5a833cd6792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTRACT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31aad8ff967f143b54da6d2112fb5858e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a0cb86713ee09fe297dde9ab03d50d5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a06a55d67cef55846d08d4482ee6a507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a450739376d4c046d67281f25f5f8a4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a605159e8a4c32319fd69b5d151369d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLAG</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a391ad3dbcf1f6d5c27590a7e511a1667</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PUNCTUATION</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9aff042e254971f0ff4e05c584ce66be2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BOOL</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9ae663dbb8f8244e122acb5bd6b2c216e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INT64</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a423a1db7cbc915478f654b15f87f3aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FLOAT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a9cf4a0866224b0bb4a7a895da27c9c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOUBLE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a33465d1d419b1074fb259ef444609e92</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WORD</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a4ad40322037d6d371dca3e5cf993f5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9aee847e634a4297b274316de8a8ca9921</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIRECTIVE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9ae3852cb010d5e422026faf83b3c16f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIABLE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a39031ce5df6f91d3778590d6d644b9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ERROR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a0d563d5e7c57fc510988d6694cc9e9a2fd6f336d08340583bd620a7f5694c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NO_FLAG</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682a25805f11a823d4df4dc3c749273f5341</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682af9c208c7d7a0f102f2683165540c882d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BINARY</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6de61d020d5e51c1d065ccb79387e682aecafbc1299672a8c1521cc0d5f1ae986</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NULL_TOKEN</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a6dc3fd38837c17d96bc91acd7fb036e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ac08dae7edcb5c5bb959fee5971fbad95</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TAB</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a920380215591395ea33ee5df8e293e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NL</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31aeba10cd0b438b1f9094fa3d1fc88193e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_STATEMENT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a60d8bd9afe6091a5c3904605dd0e0c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_LIST</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a8042f41e6dc49acd5cf4e86844f79acb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_LIST</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ab0421ccee09cdeadea4bc12e7f38be24</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_SQR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a205c3715f7e514a181174f5a8e35e5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_SQR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31ad243a7953a49a90c6f7230e40a522a9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_BLOCK</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a1a359ac3023cdc0a2d09f3c5124e09d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_BLOCK</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a3019a113fdbe1f6734054dee2d5f692e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLON</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a29cf94637337909c3813bb50d6e9b3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COMMA</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31af81277bcd86412fe04bb68718ea09392</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOLLAR</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a8830788e557e82569f17668cd303436a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SQUOTE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a61ef38d6155e0a5103be62137c2f28a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DQUOTE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a94780f6b7ec435b16872e5a833cd6792</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUBTRACT</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31aad8ff967f143b54da6d2112fb5858e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIVIDE</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a0cb86713ee09fe297dde9ab03d50d5da</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BEGIN_STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a06a55d67cef55846d08d4482ee6a507f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>END_STRING</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4aba281d025f1d580c3835d67656fd31a450739376d4c046d67281f25f5f8a4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a72af10fee1f9c2ef1de55b08a0c429ed</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a41c0407c3c4cc53c65437ebe109887ad</anchor>
      <arglist>(const token &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a477a1f46d5bba90bfe556728b6d83f04</anchor>
      <arglist>(token &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a3ce2e45c009965f7f2dad2a087605662</anchor>
      <arglist>(punctuationToken p, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a338750e2029bff026c9b944590c2ddb3</anchor>
      <arglist>(const label val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ab99227fa13f45b4b44d555b5765743cd</anchor>
      <arglist>(const uint32 val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a61b0e434481fdc58583f960629c4de98</anchor>
      <arglist>(const int64 val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>af915690f75dc479e1dc67ab76f8aef7a</anchor>
      <arglist>(const int32 val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a786b39f204d2c9c79be3cda16d1c4d85</anchor>
      <arglist>(const float val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>afadb4a8148163f456f0e3ed6ed6bbfb0</anchor>
      <arglist>(const double val, int32 lineNumber=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a49280cb1d882b43a9ede4a6291728a01</anchor>
      <arglist>(const word &amp;w, int32 lineNumber=0, bool isString=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a16898cbd330b897996fc8c949605cdea</anchor>
      <arglist>(word &amp;&amp;w, int32 lineNumber=0, bool isString=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ad8984491ce2947e034b9160362af42af</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ae9f5fe6fd511aec66ef29764d63e17c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4c4b7703e6fdb86d441032675709e39c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>tokenType</type>
      <name>type</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a60330c34e8555025752e615e0c73e99a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setType</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>af925056e34d86707d6db8a3dcdbef25d</anchor>
      <arglist>(const tokenType tokType)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>lineNumber</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aad57f95c0314cc8f891bbf7c9d441c55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32 &amp;</type>
      <name>lineNumber</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7748c77c1b9b9d2010b17466a393827a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>abdcc7f96f487faadc7769afcf58fe992</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>undefined</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa1e13dd69a6e60da388a57da95544c09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>error</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a9db0c25a0b1baac0e7e5cbf5a72d3cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBool</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a0da75049a5cbd55b8b4993a21faa3e92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFlag</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a9df76f92b8b265582dc4ac1ab8d2a4d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPunctuation</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a1f8107fd5ca4b0ebd4bf63cfc8ef6d2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSeparator</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>afad5f045f5fdecb21243266c1360328e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndStatement</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a9b6aebb08609e7ec6efde970dcf0433a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndBlock</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6a416acba3c9ad7558dfe2b232bfc96e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt64</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7290e5e0ddc94ce4790c7d05e0c633a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInt32</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a9177934fe42dcd7691fb51f1ec1f7ac3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFloat</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7283345d095683fd5e3a75cb4d3b8410</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDouble</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a758c92bd63c516d466d3efdc8fc709e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReal</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a2dba2f9672fc05859b4cdfd9b63f4922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumber</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a1680baf2428512b1a45060f52f3ade28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isWord</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ace6d5ecd2736d19990a7c12e0fe5a745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirective</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7a3207e054c6a822b0c3000184cb150e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isString</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>abc9dc0708ec1aae2309621664fa8e5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVariable</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a72cc96a2f05c51fa985027e6b4d5322b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStringType</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ad511464bc4911f5e5cfa0a1f84f47fee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7cc2c29bf53e48011ddd672093ade5da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flagToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aad815c5424a11dd702cc65ef32e4b156</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>punctuationToken</type>
      <name>pToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aaa8bf55f686d97ee30090681fd0bfc04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>int64Token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a527884d8106fbcdc51fb1d8b937b9f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>int32Token</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a2ad267a191e747392310eead09132adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>floatToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4c72fd962e5ec6cf9143fb6a78ddb2ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a9de6957d916b0d8a10cab9c0e2688fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>realToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6ad35ba9e41cdd6fd291530c074fe4e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>number</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a66fa403264f7b94494f15dfd39ef8c3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>wordToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a8658f0b0a04ffdb6e74c5af4ca27edf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>stringToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa81aefc6aea3503b1eb4aefbafc8d0bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ad20897c5c8bd47f5d4005989bead0e55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBad</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a638b33dd25b3cd8ea7e846f04fd6a6a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a75fe511fd8c0453b737bec75120fd131</anchor>
      <arglist>(token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>af2d08dd4ed5e30b424d5f32ccc10750c</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7f5ffbf467ae99b3056cd6e80e0718a5</anchor>
      <arglist>(token &amp;&amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ab1a2ddea57a8dc02509b8130062f6886</anchor>
      <arglist>(const punctuationToken p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a374249df2f28283de94802695817ee0c</anchor>
      <arglist>(const int64 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aaa450c9d2d22e8fa26ffd019f73a6510</anchor>
      <arglist>(const int32 val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6993296913f1a75d6405995db109bb39</anchor>
      <arglist>(const float val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a98768598855abab7b6cacdea1db55f5b</anchor>
      <arglist>(const double val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a5085ad361c2078cc93b70669c7838f77</anchor>
      <arglist>(const word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a186cf20ad1cea5b84b108df41c550458</anchor>
      <arglist>(word &amp;&amp;w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a5730c6fce1d4bf65aea8faf21df62bc9</anchor>
      <arglist>(const token &amp;tok) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ae5f3ad58e11abfd2be2125fcede7feaa</anchor>
      <arglist>(const punctuationToken p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aeacc8dd5826d65081e99cb799b4dc11e</anchor>
      <arglist>(const int64 val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a20a49b3b7efc4bc22454dce6198cb67d</anchor>
      <arglist>(const int32 val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>af1a60f3a5476e402b798de224a088f08</anchor>
      <arglist>(const float val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a0fcad2ee64ab2e76d6b0cf823a331fa7</anchor>
      <arglist>(const double val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7d133c464a704f881f7cb4b651621bdb</anchor>
      <arglist>(const word &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a52511650811d8ca0fdb9d31f85c5899c</anchor>
      <arglist>(const token &amp;tok) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a5addfc5c02a32c8f0f39f108bc2e92f6</anchor>
      <arglist>(const punctuationToken p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a33ad95acce626ca0abdcc870f912736b</anchor>
      <arglist>(const int64 val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ac2efa8b7fbeb2daf21ba18eb4dbbe487</anchor>
      <arglist>(const int32 val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a81d83ba50a97a3acdf90d5947ca8409a</anchor>
      <arglist>(const float val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4185404f58d438c2da74f2343b4b6710</anchor>
      <arglist>(const double val) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a89ed0e6956f5c0fc46a2632fb3fa4918</anchor>
      <arglist>(const word &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printInfo</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa74a2c0611922abf868950e4fe75d00d</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>printInfo</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a025b61d7681c8058d7b63751134ce816</anchor>
      <arglist>(std::ostream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a412e3aa53f8f85fee9f6a559da992ac4</anchor>
      <arglist>(word *)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const token</type>
      <name>undefinedToken</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>adf7cefdf36a8596069c11db5f0af1085</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>endList</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa8a14c7ccf6cdb5384a1f963bb7d58fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>beginList</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a0df157096f85990238b157f1ba2f062f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>endStatement</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a2ab2c4908953710fe506be37fb59e828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>beginBlock</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a7dfd1da794139ffad895b3df4cace4b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>endBlocK</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a83e7918ed16bfb5cb13ce336ae684a66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>beginSquare</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aec7be46e5f13f1f0ca6e72694437c536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>endSquare</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a5fb84f4934fbb99c1b3a4d2fa31e368c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>space</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ad148e3fe302bf96a9393c7620c6dc26e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>newLine</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ad46af812666091c7ef557ff99a60d371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>boolean</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a56d687a8676e6e14670f91553103d6d7</anchor>
      <arglist>(bool on)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static token</type>
      <name>flag</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa430af2c5ae1847bac4f85978c809ff8</anchor>
      <arglist>(int bitmask)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isseparator</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a6404297b77fae263fd77e04ccf803f91</anchor>
      <arglist>(int c)</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>setUndefined</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>aa3fee790c0545becf2fa58adee22cec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>parseError</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4704f523a3ea4fa15ae5da86f7bfe954</anchor>
      <arglist>(const char *expected) const</arglist>
    </member>
    <member kind="variable" protection="private">
      <type>content</type>
      <name>data_</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a47770f7468a35935879a4be8afea2c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>tokenType</type>
      <name>type_</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a828aae3b94527316d86c741d8d17976b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="private">
      <type>int32</type>
      <name>lineNumber_</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a271ea4556e1f077f403284c4cde3ccec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a5f1015477383436990a8b933c72edaa0</anchor>
      <arglist>(iOstream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="friend">
      <type>friend iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a4222d8573b02e85f345d3248bb558d1d</anchor>
      <arglist>(iOstream &amp;os, const punctuationToken &amp;pt)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>ac605baf9cfa833f7b7742b86b1a2f84b</anchor>
      <arglist>(std::ostream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classpFlow_1_1token.html</anchorfile>
      <anchor>a36ab8d13bb468ddc2290364633020edb</anchor>
      <arglist>(std::ostream &amp;os, const punctuationToken &amp;pt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::triSurface::triangleAccessor</name>
    <filename>classpFlow_1_1triSurface_1_1triangleAccessor.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>triangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a7f9bd0bb3da84bf94aef708184158b9b</anchor>
      <arglist>(int32 numPoints, deviceViewType1D&lt; realx3 &gt; points, int32 numTrianlges, deviceViewType1D&lt; int32x3 &gt; vertices)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>ab72b2ba0bbbff6889ebdf56734340b78</anchor>
      <arglist>(const triangleAccessor &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triangleAccessor &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a9a5b30be11119ae79919b0904b2b9e0d</anchor>
      <arglist>(const triangleAccessor &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>aa5c1f4face04dc8084fd2fc040c5bf9a</anchor>
      <arglist>(triangleAccessor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triangleAccessor &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a35f558a6a1e2b3be44124643310b309d</anchor>
      <arglist>(triangleAccessor &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~triangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>af6aca52a68acc6e01a2574ab826d4f87</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3x3</type>
      <name>triangle</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a5d7a84d0e438d151c01b0112f85a4c25</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3x3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a9029220d5fc7180a9cadf126967868a7</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3x3</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>ad9677b15888dc68e739b84d0cf69769e</anchor>
      <arglist>(int32 i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a3e9613ca286df0e58d9c39d6afbc5adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>numTrianlges</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a7b57a185691fc3d3bb67e5116c0bffad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numPoints_</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a61a0f26a4b3be1a60036235413c1520a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>numTriangles_</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>ada38a65882979f09dcaa876abbcb27b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType1D&lt; realx3 &gt;</type>
      <name>dPoints_</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>aa734460d08913831fe8487427279ff70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType1D&lt; int32x3 &gt;</type>
      <name>dVectices_</name>
      <anchorfile>classpFlow_1_1triSurface_1_1triangleAccessor.html</anchorfile>
      <anchor>a291cef0a1155eda06cb993362dd95d38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::triple</name>
    <filename>classpFlow_1_1triple.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a562e3d915c913b4e9fab2736752f57b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a0a481ae1b4fa622718766da8c13a8c89</anchor>
      <arglist>(const T &amp;x, const T &amp;y, const T &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a498dc8565d593bae0c766da4ed41a1d3</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a5a5a53b031aea500982d0a4250493738</anchor>
      <arglist>(const triple&lt; T2 &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aab4e0deaeb2c516caa7906eaba9c0ea4</anchor>
      <arglist>(const triple&lt; T2 &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aaa742959383afd91a50fd8e0cc7b5af5</anchor>
      <arglist>(const triple&lt; T &gt; &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triple</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ab08ec1dc8c076023d479847d995d5f48</anchor>
      <arglist>(triple&lt; T &gt; &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>adf3c8bbb79bd09f63edd53bcfd1b1fb6</anchor>
      <arglist>(const triple&lt; T &gt; &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; T &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ac36dce43119690b3e3d5fe13f989f09e</anchor>
      <arglist>(triple&lt; T &gt; &amp;&amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION uniquePtr&lt; triple&lt; T &gt; &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ad65945a353e4123d91ea3407e545aabf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION triple&lt; T &gt; *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>acf7f0c8eeb517486a0aff1ac9d62fc50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>x</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a9d91640f18ca9664c673d70d8220c345</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>x</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a9f9535f0d9ace03be4a6ed499e94302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>y</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>afeba9af2b9366a21e041e0fc09d72576</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>y</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a98323a1add71333f0925be475007f720</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T &amp;</type>
      <name>z</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ae91a89e8714244e81762456d228b6b78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD const T &amp;</type>
      <name>z</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aa2e8c9a2ac71b6b09cc747d01af0db20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD T</type>
      <name>length</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a386dd44caa78e5884651bd4891674555</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>normalize</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a2030cdd583d3a6e60753a16dab2a0ae4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator+=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aff5d0f2e1a8e16c71fded287ae165e94</anchor>
      <arglist>(const triple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator-=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a6d31a2787dd22ca3d1e81fbca6491a05</anchor>
      <arglist>(const triple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator*=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a08b98407a18ab6028205e6d9802cd4f2</anchor>
      <arglist>(const triple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator/=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a3ec4e1245af44d9207099834bf76559a</anchor>
      <arglist>(const triple &amp;oprnd2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a6a97164ef3b4a654237f734ad2bbbab4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a0c1f823c5b1f00849e0d939f634b2725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x_</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ae40d4cb269d0be9c0d20a9efe0462757</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y_</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a644d1b6657ad3f073d95487bdd5d08a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>z_</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>abdc5fb2fe39f8f2e806479466fbf4141</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD T</type>
      <name>dot</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a5fb62490313074bacfbb8ccc25a3de39</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>cross</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aff6c592ba99f96dafb58601310a1b55f</anchor>
      <arglist>(const triple&lt; T &gt; &amp;v1, const triple&lt; T &gt; &amp;v2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>acd46f772447d0a389a6951b9ccabd638</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a190896ec2a2cb33c7d2da20bd0d9150e</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a143fa890995689b67ce500204d76b61c</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a85e8215d1dc8a98cb76f690943b86daa</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>af195e5704515c46e6d027e8db4d1f830</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a017ee04701c96add4b8b52adb5e3d590</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a5243c9c8b23944bbf0f5e6d77d83086b</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a9d0c0395a4b45df7dbd2ca56015fb163</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ae033ec5bd11561c002e0a6d6bfca5e9c</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a91d49c122abf9c86421aeb8bcbe680f7</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a224404d00edaa17c02ca154a8f9ff8a0</anchor>
      <arglist>(const triple&lt; T &gt; &amp;oprnd1, const T &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD triple&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a9a439eed121ac54dde7a7acb92245008</anchor>
      <arglist>(const T &amp;oprnd1, const triple&lt; T &gt; &amp;oprnd2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator==</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a876b1737d5fd2b9ed17270220ec0d5a9</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a0ed4afd936c7445964cafb23379cba84</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator&gt;</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aa23d62c947ba521885952949f1e6923b</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>ab9d4ef1f0af8ac9206ed7d65e7063aef</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend FUNCTION_HD bool</type>
      <name>operator</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a0ed4afd936c7445964cafb23379cba84</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="friend">
      <type>friend iOstream &amp;</type>
      <name>operator</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>aea5590a45d4ae9cab36d8acb475a10c9</anchor>
      <arglist>(iOstream &amp;str, const triple&lt; T &gt; &amp;ov)</arglist>
    </member>
    <member kind="friend">
      <type>friend iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a3d395afa0db720750b5e717972d66701</anchor>
      <arglist>(iIstream &amp;str, triple&lt; T &gt; &amp;iv)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>readIstream</name>
      <anchorfile>classpFlow_1_1triple.html</anchorfile>
      <anchor>a479f2c8a238b03baf600fca59f311574</anchor>
      <arglist>(iIstream &amp;str, triple&lt; T &gt; &amp;iv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::triSurface</name>
    <filename>classpFlow_1_1triSurface.html</filename>
    <base>pFlow::eventSubscriber</base>
    <class kind="class">pFlow::triSurface::triangleAccessor</class>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a99980e4ee89d8f7cec12455bf4cdbcf2</anchor>
      <arglist>(&quot;triSurface&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a23b307d20d3b88983e62e1cb7292346a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a81b8a340e36296e5d3613bd745a4ec66</anchor>
      <arglist>(const realx3Vector &amp;points, const int32x3Vector &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a79fb8c4cf5f0734451c59a44c2a153d0</anchor>
      <arglist>(const realx3x3Vector &amp;triangles)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~triSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ae1f608287041cc0b8420a8e195bd434b</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numPoints</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a08c12fb233edbde039e917768f478ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numTriangles</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ac4415d97d430352202d17905676b0577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a259cb5a711406a8c3e5d937eb9350cca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a7223528283cd4e5872e0cc716bf9bd9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>maxIndex</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>aaa3154095259d6aa98571dd33c92f175</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getTriangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a87ba6f8c358a11dfd2b456d8e488f69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const realx3Vector_D &amp;</type>
      <name>points</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ae1abd7737d9a00248888c0e8dc04c730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realx3Vector_D &amp;</type>
      <name>points</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ad4198722b0ff03d4cf259bce6f0266bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realVector_D &amp;</type>
      <name>area</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a983d8795ce2f95268c06f6a0be39eb40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realVector_D &amp;</type>
      <name>area</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a63c05dca7905cc7a35401122dc6ddfb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const realx3 *</type>
      <name>pointsData_D</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a0318b1163051cba409d60b3766c21ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realx3 *</type>
      <name>pointsData_D</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>adc0f85420db30d61f969ec2e6c4d6a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int32x3Vector_D &amp;</type>
      <name>vertices</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ad3ec95d8cded5af2f249c1efc63b3bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32x3Vector_D &amp;</type>
      <name>vertices</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ad18d20c6486eab007f5d42dd676f2064</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32x3 *</type>
      <name>verticesData_D</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a81495a308a82a5bb210bd1d184c88d85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const int32x3 *</type>
      <name>verticesData_D</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a558b221819a6f40997916625657f2980</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>calcMaxIndex</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>af01ae6e5e5f1b190954e7487152e9b79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readTriSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a2109c84ebb41bc6ed8945221e833c40d</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeTriSurface</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ae4e3a0ce5f1ac644fc112ed7d5311a3c</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int32</type>
      <name>addTriangle</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a86cff523f4f289aeec0a4a82ab0bcc09</anchor>
      <arglist>(const realx3x3 &amp;tri, realx3Vector &amp;points, int32x3Vector &amp;vertices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>check</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>ae1ee541bb22588b6a71650c807efca90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3Field_D</type>
      <name>points_</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>acb8e080702927e798327564bc64ead68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32x3Field_D</type>
      <name>vertices_</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>aa55c392e8b0854c0bbf7a12d5fa9dcd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realField_D</type>
      <name>area_</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a39d684f10dc57c49b15fba0a594e5515</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int32</type>
      <name>maxIndex_</name>
      <anchorfile>classpFlow_1_1triSurface.html</anchorfile>
      <anchor>a32d34930a4c10b59d881ede9a2f697ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::triSurfaceField</name>
    <filename>classpFlow_1_1triSurfaceField.html</filename>
    <templarg>template&lt; class, class &gt; class VectorField</templarg>
    <templarg>class T</templarg>
    <templarg>class MemorySpace</templarg>
    <base>pFlow::eventObserver</base>
    <base>pFlow::Field</base>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorField, T, MemorySpace &gt;</type>
      <name>triSurfaceFieldType</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a497a3a3231f6ad67a71aef624ab77c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorField, T, MemorySpace &gt;</type>
      <name>FieldType</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a5e050a125891e919a41915663f1871f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::VectorType</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a21a2a37839edb0ffc02a7cfac6ca72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>ad9407c8288db9ae18e7902d8dc299b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constIterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aa3fec7e25f50ac758c32ed1c95874adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aebe3eaed133a292a0698d6da1e3add0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constReference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a138e3112b462f65f1ad50a9bf56e1da6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::valueType</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aee590d7dd65b9f02778474552e5a76f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::pointer</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aa3eef3be821cfdd7a297e2b86689b0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldType::constPointer</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aa5df8e4ad5359a7c041b10c56d9eec23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a915d4d45d28fc806f10f3c35d7048476</anchor>
      <arglist>(&quot;triSurfaceField&quot;, T, VectorType::memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a2894a5382847375607cde6055efab1e5</anchor>
      <arglist>(const triSurface &amp;surface, const T &amp;defVal, bool subscribe=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a5ca87001edecd437630403481c337671</anchor>
      <arglist>(const triSurface &amp;surface, const T &amp;val, const T &amp;defVal, bool subscribe=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a6506f3acb2a9227de35c4010f6f39e60</anchor>
      <arglist>(const triSurfaceField &amp;src, bool subscribe)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a3673d41028bcecd62021f5aa13bd9b54</anchor>
      <arglist>(const triSurfaceField &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>triSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a63005696eaa0bbcae34645f20a0194be</anchor>
      <arglist>(triSurfaceField &amp;&amp;src)=delete</arglist>
    </member>
    <member kind="function">
      <type>triSurfaceField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a762e57872cc5f0eae8263b5a89d3449e</anchor>
      <arglist>(const triSurfaceField &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>triSurfaceField &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>ac7cf9cc6190effac07ff6c2ba6b433ca</anchor>
      <arglist>(triSurfaceField &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; triSurfaceFieldType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>ad9f4b8befb861215bd815c09ee6a0395</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>triSurfaceFieldType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a09fef8126aa053e6991b7cafca9861b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const triSurface &amp;</type>
      <name>surface</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a537ac13b3b1e5a5fece5fc5694ab62f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getTriangleAccessor</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a87ba6f8c358a11dfd2b456d8e488f69a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>update</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>abae5b084c84ba20afd60cbbec92e3124</anchor>
      <arglist>(const eventMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readTriSurfacceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>ab08cd31c0cb22ac4089e85cd55830649</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeTriSurfaceField</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a9122eef5e69dc50a56c425de1f1d018a</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const triSurface &amp;</type>
      <name>surface_</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a60facc544244e266cdc778a99484b80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T</type>
      <name>defaultValue_</name>
      <anchorfile>classpFlow_1_1triSurfaceField.html</anchorfile>
      <anchor>a3ede7be1f8d98c2fa4af7860cdcaf787</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>pFlow::sphTriInteraction::triWall</name>
    <filename>structpFlow_1_1sphTriInteraction_1_1triWall.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H</type>
      <name>triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>af3b7547f0aecdf50dc827664b168709b</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>ab3b8d17819c767dfae06131b57cb3195</anchor>
      <arglist>(bool, const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>af7e4410b23f2e25d037ed9428ed4ac24</anchor>
      <arglist>(const realx3x3 &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a0a010286222e48868eaa0909c25be978</anchor>
      <arglist>(const triWall &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triWall &amp;</type>
      <name>operator=</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a201ee9395eaededb1d1c3f745ec4ec16</anchor>
      <arglist>(const triWall &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>afc705876c9121e3d31f68a2e0435eb6c</anchor>
      <arglist>(triWall &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triWall &amp;</type>
      <name>operator=</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a55ba503ba5b16717f6496c55edd87163</anchor>
      <arglist>(triWall &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD</type>
      <name>~triWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a3b16c2fba10eba58ead43df98008a7dc</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>normalDistFromWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>ae81648f19b6bd4ffc0124388911a245e</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>nearestPointOnWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a9290a304540b21d58d6368b4a486d331</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static INLINE_FUNCTION_HD bool</type>
      <name>makeWall</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a89ce6ff8d300e9305880fd3c0e88bfb4</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, realx3 &amp;n, real &amp;offset)</arglist>
    </member>
    <member kind="variable">
      <type>realx3</type>
      <name>n_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a5b71c203ea8685dfe48bf6502de7521d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>real</type>
      <name>offset_</name>
      <anchorfile>structpFlow_1_1sphTriInteraction_1_1triWall.html</anchorfile>
      <anchor>a0e197a2dda6d6e6e1d21521981b333e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::twoPartEntry</name>
    <filename>classpFlow_1_1twoPartEntry.html</filename>
    <member kind="function">
      <type></type>
      <name>twoPartEntry</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>a7ce6240a421692d112846f31793bcd85</anchor>
      <arglist>(dataEntry entry)</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>keyword</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>aa1d970a78f74afd00dac1cd1bda313b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>firstPart</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>a423da21819554e80506c1ae4f7ee108e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iTstream &amp;</type>
      <name>secondPart</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>aa7466efdd66a3fc76c35fb59baf6665a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>secondPartVal</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>a2062a764da3c3b7d8e1c52418e2d3ed0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>keyword_</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>ad81489d7813a3c0e2d9219cb6f40be52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>firstPart_</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>a0083d6289b3b1721f00f170268301f5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iTstream</type>
      <name>secondPart_</name>
      <anchorfile>classpFlow_1_1twoPartEntry.html</anchorfile>
      <anchor>a9525b9a56cd71424e8c878f1845163e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::uniformRandomInt32</name>
    <filename>classpFlow_1_1uniformRandomInt32.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>af0cbc29c2a58a7f8cf48947bc89ba5ec</anchor>
      <arglist>(&quot;uniform&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uniformRandomInt32</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>a1ab5d28189717af911b941a5d8fbe071</anchor>
      <arglist>(int32 min, int32 max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~uniformRandomInt32</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>a8c2c63ffcc1f53d6794e99fb59133c92</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>a5ca351436b8555e1be5d195fffc463d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int32x3</type>
      <name>randomNumber3</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>ac428a1f6db4c09b669a5487ee1413a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>ad0c3cbebb6fa42cfcd6dde7cf839b692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mt19937_64</type>
      <name>engineGen_</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>a9ee2a5140d88d22da43754bc1faf33a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::uniform_int_distribution&lt; int32 &gt;</type>
      <name>distrbution_</name>
      <anchorfile>classpFlow_1_1uniformRandomInt32.html</anchorfile>
      <anchor>a100fe746d6fccb8ecca43582a79c4eb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::uniformRandomReal</name>
    <filename>classpFlow_1_1uniformRandomReal.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>af0cbc29c2a58a7f8cf48947bc89ba5ec</anchor>
      <arglist>(&quot;uniform&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>uniformRandomReal</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a2c890939b95f2511d07ab10dc9b8a6dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~uniformRandomReal</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a220960201be1182f0b17ce9ce4c37210</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>adafd9f80ea7071089bd8829bb04cdd14</anchor>
      <arglist>(real a, real b)</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>randomNumber</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>aa636852a0612fc4c3d85704e6616b8ec</anchor>
      <arglist>(const realx3 &amp;a, const realx3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a9d44e8e9445d4e9f8d1c8201047cc0ea</anchor>
      <arglist>(const realx3 &amp;a, const realx3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a8320264d3b2bc8e60003db368fee44ce</anchor>
      <arglist>(real a, real b)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::mt19937_64</type>
      <name>engineGen_</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a9ee2a5140d88d22da43754bc1faf33a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::uniform_real_distribution&lt; double &gt;</type>
      <name>distrbution_</name>
      <anchorfile>classpFlow_1_1uniformRandomReal.html</anchorfile>
      <anchor>a4e5d9520dece066e0f2627be87b6d131</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::uniquePtr</name>
    <filename>classpFlow_1_1uniquePtr.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Deleter</templarg>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T, Deleter &gt;</type>
      <name>uniquePtrType</name>
      <anchorfile>classpFlow_1_1uniquePtr.html</anchorfile>
      <anchor>a195b4af27fd861da73b1bebed3307624</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1uniquePtr.html</anchorfile>
      <anchor>ac8bb3912a3ce86b15842e79d0b421204</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1uniquePtr.html</anchorfile>
      <anchor>a625855a4f62948f4f1ad06354be9ca09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1uniquePtr.html</anchorfile>
      <anchor>afdc36f6a5716b29a5d81a2dd93376d82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; T &gt;</type>
      <name>makeUnique</name>
      <anchorfile>classpFlow_1_1uniquePtr.html</anchorfile>
      <anchor>a20c6b1bf3a357763969dcac30a1452c8</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::unsortedContactList</name>
    <filename>classpFlow_1_1unsortedContactList.html</filename>
    <templarg>typename valueType</templarg>
    <templarg>typename executionSpace</templarg>
    <templarg>typename idType</templarg>
    <base>pFlow::unsortedPairs</base>
    <class kind="class">pFlow::unsortedContactList::TagReFillPairs</class>
    <member kind="typedef">
      <type>valueType</type>
      <name>ValueType</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>ad5d875e9ffab58a03e261100a111f302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsortedPairs&lt; executionSpace, idType &gt;</type>
      <name>UnsortedPairs</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a7a76dde333ecd7209a122129ee024d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::IdType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a321d09fcb16c9519f78f3e8326ce48f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::ExecutionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a245dc98ed68bf688e045d352ca6e2174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExecutionSpace::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a9037fe54e33b899b96a62988ecf26d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::PairType</type>
      <name>PairType</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>acf4d9906ba8a5697d815148b4c432239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UnsortedPairs::ContainerType</type>
      <name>ContainerType</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>ad1ca136a7dde683da26ec3319a4b2cd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a9f4dc8b15eb428e7b70efd2f4b4919c1</anchor>
      <arglist>(&quot;unsortedContactList&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unsortedContactList</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a9be0b4923a796d14532b5141b68a95ee</anchor>
      <arglist>(int32 capacity=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeBroadSearch</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a32ff8c51a3aa19a92929906c6d81d00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterBroadSearch</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a6141d3224e90a32108452817d4e08ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD ValueType</type>
      <name>getValue</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a4a165c0d6aba47dba32125d04d19c54d</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>getValue</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a9b04c1f38b217eb509afb8b256203b9f</anchor>
      <arglist>(const PairType &amp;p, ValueType &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>setValue</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a56b6840306ff51d371b06a9d187e1d6c</anchor>
      <arglist>(int32 idx, const ValueType &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>setValue</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a784cc0a941b0b4e94166ee266f787e8b</anchor>
      <arglist>(const PairType &amp;p, const ValueType &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>abef174b39952b042147e0693e3254927</anchor>
      <arglist>(TagReFillPairs, int32 idx) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Kokkos::RangePolicy&lt; ExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt;, TagReFillPairs &gt;</type>
      <name>rpFillPairs</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a66ef719180e333a03eba2cf10aa32f64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adjustCapacity</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a094cab68474f9d487c8113228caf8c1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; ValueType, ExecutionSpace &gt;</type>
      <name>values_</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>ae5dc55ebd91212e4cba8ddfb4e85899e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContainerType</type>
      <name>container0_</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a77cebdf1056ed73b6ea25ea35b097ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ViewType1D&lt; ValueType, ExecutionSpace &gt;</type>
      <name>values0_</name>
      <anchorfile>classpFlow_1_1unsortedContactList.html</anchorfile>
      <anchor>a93e7ed5576fb59b38772cf6d8086e373</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::unsortedPairs</name>
    <filename>classpFlow_1_1unsortedPairs.html</filename>
    <templarg>typename executionSpace</templarg>
    <templarg>typename idType</templarg>
    <class kind="struct">pFlow::unsortedPairs::pairAccessor</class>
    <member kind="typedef">
      <type>unsortedPairs&lt; executionSpace, idType &gt;</type>
      <name>UnsortedPairs</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>aace43a73fcea2cf153dd2d9569d72421</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>idType</type>
      <name>IdType</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a692c89a3ec20703da511762a9f727427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>executionSpace</type>
      <name>ExecutionSpace</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>af0f525b6fd2cb3ded0a601d7fb4a8b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ExecutionSpace::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a9037fe54e33b899b96a62988ecf26d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; idType, idType &gt;</type>
      <name>PairType</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a3956e682275d5a353e4abe4f203d774d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unorderedSet&lt; PairType, ExecutionSpace &gt;</type>
      <name>ContainerType</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a4bb4e3dfa4ffb7ba2c4a3d65db86bd37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>add4f2c30e6aac3bc403ce77e36e3c471</anchor>
      <arglist>(&quot;unsorderedPairs&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>unsortedPairs</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a9647bd50bf047598ba615c70447f8aaf</anchor>
      <arglist>(int32 capacity=1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beforeBroadSearch</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a32ff8c51a3aa19a92929906c6d81d00b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>afterBroadSearch</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a6141d3224e90a32108452817d4e08ea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>insert</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a2cf0e69d65a4e157d8df2dbbdf0b370e</anchor>
      <arglist>(idType i, idType j) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>insert</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>adaa150fa7b1ded482a0e3b9bb07a23d2</anchor>
      <arglist>(const PairType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD PairType</type>
      <name>getPair</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>ade27870d308ffbaacefaf1f7792ba7cf</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>getPair</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a3091ec93b18d93c19f04ce173e2a29c7</anchor>
      <arglist>(int32 idx, PairType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>find</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>afdbd5a31f0a18654d6342784d81e5d96</anchor>
      <arglist>(const PairType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isValid</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>aba79e8edf03103828a6f0eab13e3e938</anchor>
      <arglist>(int32 idx) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a8a5676bc3adbb5c5740e3cdccd9ee9af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>loopCount</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a8ad3d4208636c7bbeab1ac1300687068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a4c0c6cdb0693c431b4dc63a3f8ede5d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>pairAccessor</type>
      <name>getPairs</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a196f60a46106f091bb84950e99697a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>increaseCapacityBy</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>aa1278079448d1e3332be81b2c25cef73</anchor>
      <arglist>(int32 len)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>afd32d1c4cda15e685fd3008f4ded29f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ContainerType &amp;</type>
      <name>container</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a5f80839bb2a7dd555195ebb643948b44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContainerType</type>
      <name>container_</name>
      <anchorfile>classpFlow_1_1unsortedPairs.html</anchorfile>
      <anchor>a318d760a8f0d48a62d42f1d44a41910c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Vector</name>
    <filename>classpFlow_1_1Vector.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename Allocator</templarg>
    <member kind="typedef">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a27481ca5351b1589f138dfddabc6fef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; T, Allocator &gt;</type>
      <name>vectorType</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a18df834101d1f5b0e840b89d1b309bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vectorType::iterator</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>afb167adee600fd1cba5ec4c2cb93ede7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vectorType::const_iterator</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a6210a29ab6dfeef54e2e0f6099a4776a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vectorType::reference</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae984783e3c3d2c1a4072c16651b3f520</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>vectorType::const_reference</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a239855f76ceec1e94ba94748fbe7f1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a8f3b992f61b158f2f9bf3a9a75e22998</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a680c78d51cff3fd301666dd75bdbe49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aaa796351598cdf4c4f76b92435e442b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::initializer_list&lt; T &gt;</type>
      <name>initList</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a9aeb5819cb45b3dd4b595ad05b9f08ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a3841c7e37a0f2578ceb15f94fa91e5a8</anchor>
      <arglist>(&quot;Vector&quot;, T, memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a4df026156780bc0ca651c342b7d6daa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae21d5a2abb12737575e9b707b7236d39</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a196090ca4b2516d23dde664574d73668</anchor>
      <arglist>(const size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae0bcdf6feae0cc16664469b3800a90ef</anchor>
      <arglist>(const word &amp;name, size_t len)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>afd11eececf67738fa93b37649a2f4dff</anchor>
      <arglist>(size_t len, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a987180fdd6def0f00c3386a41d7b8342</anchor>
      <arglist>(const word &amp;name, size_t len, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>acd2b21b4c87a57bdc9629ccbc43b17ee</anchor>
      <arglist>(const size_t cap, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aef422de28b6d11a750d698b0dcbd88c6</anchor>
      <arglist>(const size_t cap, const size_t len, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a72db2141036e73e01e0720b4502eaff7</anchor>
      <arglist>(const word &amp;name, size_t cap, size_t len, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ad53e388e74b5ae30f1b1d2903dca3bb0</anchor>
      <arglist>(const size_t cap, const size_t len, const T &amp;val, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a49f7561e1a7048389e478ede68a33c9c</anchor>
      <arglist>(const initList &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a26478df90f9283ff242d6379ef6f5909</anchor>
      <arglist>(const word name, const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a665a83a6705813bf6064942b1e689130</anchor>
      <arglist>(const VectorType &amp;src)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aca0580f9b4943bd27daae19dcdb66093</anchor>
      <arglist>(VectorType &amp;&amp;mv)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a5621d86af3f4478fb78efcbe58f0a5a2</anchor>
      <arglist>(const vectorType &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>acbd76b6b9d1dcb10b7e40e8d5e558da4</anchor>
      <arglist>(const VectorType &amp;rhs)=default</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>af53bf261dcb2d46f642584fb2da012e8</anchor>
      <arglist>(const vectorType &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>abe48ca75a0d0193f28aec61a37ac7c8e</anchor>
      <arglist>(VectorType &amp;&amp;mv)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a3e18e86753248052cab589c7f2cbab68</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aaa9fccd0cb7734271f7a15e5d9dc0d27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; VectorType &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a9c3643669394e310d08a9853ce38a249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a85433e2979e6a416a08ea7542e590a0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a3e122a9f9c04a4e2dffdfabde2f1de50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>abb90345eb8f007f2d808f216034aa621</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a38cc65b12cc0041101d100f8cd4498ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const vectorType &amp;</type>
      <name>vectorField</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a3466c41d8d5d5016d35fd24d06858027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>vectorType &amp;</type>
      <name>vectorField</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a4acf7ef2560b484c99e8dbc1bdf54c9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a0305c62b1783301668ec05f6ba0b04b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ad28d375bee9c46adaa7deaf7b128e72e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>abdddd55b3e45636a11ce0287a4032237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ad047e4ae41f801d12ad8fb46e2900e71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const word &amp;</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a51ae053ef677d6c2d35ce01b46089706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a10efdf47ffedbdc720f71c2f72b98d98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a234de5cb432c97fcb4b0f806bb86624e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>reserve</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a3dbf7d015e95cf17d59eafb6828e9cac</anchor>
      <arglist>(label len)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteElement_sorted</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aa4434e6dde369bc0432ab2068bdcebf6</anchor>
      <arglist>(const Vector&lt; label &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae3f21fcefd35e2538e7da6e933c8baeb</anchor>
      <arglist>(const Vector&lt; label &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a216beb08e71c4da16ab1aa538ff9757a</anchor>
      <arglist>(label index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a30b7f34210d48986237bf8f1c7794493</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a5a36bee20562c05a4cc9ee14ea560727</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a91c25cb240f7cb7be088f7da9e073791</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aff5470629107827f20f27e4fe51f3d85</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aae71b0968705366d585f7852cc242f69</anchor>
      <arglist>(int32 idx, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a34b3e020ef4d15f9b2442bfff37f19b8</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae0df644664622b4bdfe9ba3e95f0347e</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a2d3bacae1bb0a817e566bab15c2e4be4</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>afec93ae36ff0423832d6a5863f19bd55</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a7106c94d412c940f3be125e178d2e0b5</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a8ece13f41f55786179efd567c34019a4</anchor>
      <arglist>(const VectorType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ac95c6d98945ecda8a27987fc68961a20</anchor>
      <arglist>(const VectorType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ad01909dad5b3ce7b47b4fb0301582d8a</anchor>
      <arglist>(const VectorType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a45d541c4fb7d734547c5181a64db90ae</anchor>
      <arglist>(const VectorType &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>operator-</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a2e46fc0ae1229ee313bf26fb6cfa0b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a786e355e86545cf95626b86e08a1b32f</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readVector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ad4cc3b124b15af451f59954d1f091b53</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeVector</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a127385e6395d9d457aee6fcb1c1807b7</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>isHostAccessible</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a651d8c3ded550b3444d63db673d76af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static size_t</type>
      <name>getVectorStride</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a06bb59597b52844c4b5ccca2c6a1122b</anchor>
      <arglist>(const size_t &amp;len)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr const char *</type>
      <name>memoerySpaceName</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a050453ea5010d379462b233e848cb9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>isHostAccessible_</name>
      <anchorfile>classpFlow_1_1Vector.html</anchorfile>
      <anchor>ae6637e7df6fa318c820511b10e2cc170</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::VectorDual</name>
    <filename>classpFlow_1_1VectorDual.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename MemorySpace</templarg>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a4d1ca55c8c62d4fbf3ea42d9919125a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a7a87f910baaebc396ded9a2508e37f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a0c5a1541ecf7ad17925583cf6abd2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a6ec384ea37f233c648db341697cdebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a783c81fb3d585a513b521ab37644da06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab088798d28525c0befe3c707b95c5bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a1af10ba67005a939b2a93ad2439d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; T, MemorySpace &gt;</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a3f1d50b6b944f9713ac2977765f7dc80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DualView&lt; T *, MemorySpace &gt;</type>
      <name>dualViewType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a8bf2593db8aeb82d7c3963cf3d811681</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename dualViewType::host_mirror_space</type>
      <name>hostMirrorSpace</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a75102441ca80218c85866c473c56199f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename dualViewType::t_dev</type>
      <name>deviceViewType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>abb53bf7be50f262454fa9e378074e0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename dualViewType::t_host</type>
      <name>hostViewType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a09cd9e9aa2f1a72e3f264509003fab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename deviceViewType::device_type</type>
      <name>deviceType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a5a029577324c4cebcdd7459d68feed48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename hostViewType::device_type</type>
      <name>hostType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a99a8fa55aa48ed58f74239b8217020ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dualViewType</type>
      <name>viewType</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a92205901f1bbf66cbc9b445a5320076d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename viewType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2e01852751e144707eefc63300bcce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename deviceType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa452bb9e24f765eae50e43c79be84a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2699d918fb02e42ba40c7358434f5e23</anchor>
      <arglist>(&quot;VectorDual&quot;, T, memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa064cc372bfc72aed40d39ba4918f1fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>abe0f40b1e7fb40439167d8279159a953</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a934d27011f98ccb20b564a074b06b7af</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a591d04428061242e1244351fb0ea289e</anchor>
      <arglist>(const word &amp;name, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2625d648d21bcabab839b1c4a1105933</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2f18104bc3b5e0a7ee7adb930b01d2d4</anchor>
      <arglist>(const word &amp;name, size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab21fd6bf2b7310032654c5f746bee9fe</anchor>
      <arglist>(size_t cap, size_t n, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2d65becde7b15813e034a62f79585f21</anchor>
      <arglist>(const word &amp;name, size_t cap, size_t n, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aab3ab778e202aaa9886698d83b00c211</anchor>
      <arglist>(const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2a88ecf4f87cd0567b6f44c3618b52e5</anchor>
      <arglist>(const word &amp;name, const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab7f0830b2be8e43e447b0030b53fbfbf</anchor>
      <arglist>(const VectorDual &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a544fe60bf167f9508c56c23700f0c4e0</anchor>
      <arglist>(const word &amp;name, const VectorDual &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VectorDual &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a198bf12653898066b525bc8b29c8edcb</anchor>
      <arglist>(const VectorDual &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorDual</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a7efd1538a2f397e4f392bf6f80af7ff3</anchor>
      <arglist>(VectorDual &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>VectorDual &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a9945ac2ed4a827163ed4fa308448c1ff</anchor>
      <arglist>(VectorDual &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H uniquePtr&lt; VectorDual &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a71f79012b7c549d88e6f7e9e2d437f66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H VectorDual *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2ba9fc60fe1d56310cb1475cf7347749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ad70d7de1ff7d0a54f72cdeab4b76773a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>acaf5c30f412e5e76345617c3c9a7cf05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H deviceViewType &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab5dd793ffb1ad23e7cfa2a88e3593471</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const deviceViewType &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ad9e882bc8a888d112a2ddd8809da1e56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H hostViewType &amp;</type>
      <name>hostVectorAll</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aca6a9a6592c1ef4c084bf4c4a18d24ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const hostViewType &amp;</type>
      <name>hostVectorAll</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa4e757ef7cc25cc91253c1e6478c63c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H deviceViewType &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a27ec6b9310871c65a7b9c1b3eda5b852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const deviceViewType &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a75fd8e003e1de5eb1aa6460ae923009f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H hostViewType &amp;</type>
      <name>hostVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a4f65657fa6d60e280470cb52a10f9510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const hostViewType &amp;</type>
      <name>hostVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aebf4796be9154a284bd083ac18658895</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H hostViewType</type>
      <name>hostVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a573cf2907a11ec639ac4139ccc468347</anchor>
      <arglist>(int32 start, int32 end) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H deviceViewType</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>acd87d71088da3841efd21e401426af14</anchor>
      <arglist>(int32 start, int32 end) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a968c95c00dc3cd040973aa0c733311e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a334c2560412a3bc4fc1c215a77a48337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a5bbce2ec98238f8f408ba4a4dfb96da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a8a26016033b73de243ec891f2a9cdeff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reserve</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a78a56054440adf67ed635117187de2c8</anchor>
      <arglist>(size_t cap)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resize</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aae7b42bf35ba19761dfa7af9cfa353ef</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocate</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>af6aaf04c933606aaaede7c95705f7a2a</anchor>
      <arglist>(size_t cap)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resizeSync</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a1441c238f4bf66d0b989d6929667dea8</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resize</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>adb3beda4d71392ce97b56a53bfb503de</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resizeSync</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a992e871d66b78994df0071c2c440cd3a</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>afd32d1c4cda15e685fd3008f4ded29f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a6ab1c6d91f769bc9bc0a58cf9f1333d6</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillHost</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ac8517ccc8a98e9d29639d48b538c8326</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillDevice</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a9d60379aa7bbd572ddaec8b9dea26cdf</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H void</type>
      <name>assign</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab306b1c0c3486326e81df59f5e755eb8</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H void</type>
      <name>assign</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aff81578dea4c1c19fc5f9ba871ddc3d4</anchor>
      <arglist>(const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>deleteElement</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ae3f21fcefd35e2538e7da6e933c8baeb</anchor>
      <arglist>(const Vector&lt; label &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a7931a57163eb363a3ca7db6ffa438479</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a34bb429dcb71153499f3ef45195b2071</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a12f0ba08dba791802e98d562be5673d7</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a66a7188e87fefe19b521478461adcf8e</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa212f884f1d546a284420c4b752933a7</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H pointer</type>
      <name>data</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a4b2292bdd68ebde041be930230a52151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H constPointer</type>
      <name>data</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a44d193108380335543fa9f66ab60c8ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H iterator</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>abdd160513aab643288381dc9005aa806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H constIterator</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab8a8c8498b1ee76b8cc76184c089062d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H iterator</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a23cdfc0d0861e37574e6e7b72acbb35e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H constIterator</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa84b9ec5e107b574d3e49fe2b37e9ef1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H reference</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a9ee7afc92b7a145e899e6891d4686eec</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H constReference</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa28be7415e5a16f0234347b2bbf2910c</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>modifyOnHost</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aebc916254a7f439d52da70d54009d36b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>modifyOnDevice</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a1dcdb28a7f0a07051858432fdf2e0c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>hostRequiresSync</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aab0999ff837c41d9f6e583f767307982</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>deviceRequiresSync</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a6125d8b18b43988b381d4ca80fc82da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>areViewsSimilar</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a2808fb8af244ff22227dd712b443258a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copyHostToDevice</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a7d7926427a2a158282abdaa849ee4e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copyHostToDevice</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ae6135f45c96744d450e726735d2ee326</anchor>
      <arglist>(int32 start, int32 end, bool setUpdated=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copyDeviceToHost</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ae4df4c74962259a2d020ca8cba46dc1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copyDeviceToHost</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>af3f0e5d29a8bdbe2be7a2acdd50d9aee</anchor>
      <arglist>(int32 start, int32 end, bool setUpdated=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>syncToHost</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a18632f5b1f36de23073d2e1209fae34a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>syncToDevice</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a8d9534a03d0c28450220697694c6732f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>syncViews</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ac892320cd9efccbc7cc40e4a9ce5837c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>syncViews</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ab2063ba393c8c9a4c7a22e071163cd0d</anchor>
      <arglist>(int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>changeSize</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aad70fb15c5e8a4021331d8b5a3644b69</anchor>
      <arglist>(size_t n, bool actualCap=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>setSize</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a3b5f16fc65a14d8abadb94601e61c2f4</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>updateSubViews</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a9a57caed8797c3baa2dc5d380a34f2fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr const char *</type>
      <name>memoerySpaceName</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a050453ea5010d379462b233e848cb9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_H size_t</type>
      <name>evalCapacity</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a41619477f54df606facb3a60c7b64109</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a5f31775800bbb46b35b5791def1f3acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>capacity_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>aa3099a4c2b0b3ab5ba4188b4a8f59b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>dualViewType</type>
      <name>dualView_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a6e952b2cefcbc9981f556f8d1d8d044d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>deviceViewType</type>
      <name>deviceSubView_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a066f7b282ca6b4a73e8eb62b9bd98a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>hostViewType</type>
      <name>hostSubView_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a7626e5cc328ff53b49c5a40d33a97d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>subViewsUpdated_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a50a7d106829f2d6ec73a65dc8507b1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const real</type>
      <name>growthFactor_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a0579d346fab3bf2ce9e41fede13e43d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>isHostAccessible_</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>ae6637e7df6fa318c820511b10e2cc170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const word</type>
      <name>hdName__</name>
      <anchorfile>classpFlow_1_1VectorDual.html</anchorfile>
      <anchor>a14f2d8ab74f3ef6a1f783592920ed5d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::VectorSingle</name>
    <filename>classpFlow_1_1VectorSingle.html</filename>
    <templarg>typename T</templarg>
    <templarg>typename MemorySpace</templarg>
    <member kind="typedef">
      <type>VectorSingle&lt; T, MemorySpace &gt;</type>
      <name>VectorType</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a74a37ab2977208763c7d3431ae5b985c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a4d1ca55c8c62d4fbf3ea42d9919125a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constIterator</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a7a87f910baaebc396ded9a2508e37f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a0c5a1541ecf7ad17925583cf6abd2c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>constReference</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a6ec384ea37f233c648db341697cdebf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>valueType</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a783c81fb3d585a513b521ab37644da06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ab088798d28525c0befe3c707b95c5bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>constPointer</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a1af10ba67005a939b2a93ad2439d56f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewType1D&lt; T, MemorySpace &gt;</type>
      <name>viewType</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>af98cf9297694f25215962f6a2bf773e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename viewType::device_type</type>
      <name>deviceType</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ab42dc0aab7df7018442bccc095f2e734</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename viewType::memory_space</type>
      <name>memory_space</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a2e01852751e144707eefc63300bcce22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename viewType::execution_space</type>
      <name>execution_space</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a6dc9533c29ac1a7bda75f3f175df75fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TypeInfoTemplateNV2</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a4b392718a047499baf70e3a34fb86765</anchor>
      <arglist>(&quot;VectorSingle&quot;, T, memoerySpaceName())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ae8ca6b593cf9b2abbba354ea2413c142</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>acd098cb6bdb47c0c0329749d986edfb0</anchor>
      <arglist>(const word &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a4861266c2159e61972c1459827fca8bc</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>af5ba02b42984b72ad5eed54ce66bc880</anchor>
      <arglist>(const word &amp;name, size_t n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a44763beaabcb0b62e71291a3f702ff85</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>acf10a7c7bd4abbf12220663dd476386d</anchor>
      <arglist>(const word &amp;name, size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ae7ffa02a8c4ad9331e9e2d09b109cac9</anchor>
      <arglist>(size_t cap, size_t n, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aa3df9dc50260dab0b942109346a8eb73</anchor>
      <arglist>(const word &amp;name, size_t cap, size_t n, RESERVE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a41747cfe54d03c168b255479ccbcd590</anchor>
      <arglist>(const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a9e0c1f696f1e0bcaca17ecacce13fe72</anchor>
      <arglist>(const word &amp;name, const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a6a122937fed9b88e192d0286e0d5b604</anchor>
      <arglist>(const VectorSingle &amp;src)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a9eb9c2dd8933804e31c3f32db032ca8a</anchor>
      <arglist>(const word &amp;name, const VectorSingle &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>VectorSingle &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a8462f95f72ac2a385d8b8e1b920f3e0c</anchor>
      <arglist>(const VectorSingle &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorSingle</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a9a51ba5f1ecd5fe4940c718aab31b4c2</anchor>
      <arglist>(VectorSingle &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>VectorSingle &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aa8522fdeecd650905ad6de4e5a3612b1</anchor>
      <arglist>(VectorSingle &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H uniquePtr&lt; VectorSingle &gt;</type>
      <name>clone</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>af1d5f8f7cc06d40a6b7d82d592b45a0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H VectorSingle *</type>
      <name>clonePtr</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ad203c1b6f527b865b5207dff9b408063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ad70d7de1ff7d0a54f72cdeab4b76773a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const VectorType &amp;</type>
      <name>VectorField</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>acaf5c30f412e5e76345617c3c9a7cf05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H viewType &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a404e74d2043488a08816711c0394d06b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const viewType &amp;</type>
      <name>deviceVectorAll</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a786dc3160da7deeead26f821c555a49d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H viewType &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a747cf1bee23243d078e569790e0d2852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const viewType &amp;</type>
      <name>deviceVector</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a092a3132bcc2d310747b8104c863c4d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const auto</type>
      <name>hostVectorAll</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a1da7e681efb6773fdaeff76e4dcc2439</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>hostVectorAll</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aed3248546c00f8317aa8c8e10731b321</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const auto</type>
      <name>hostVector</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aae7f2c574ae6e3801a25a9ea91aaf376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H auto</type>
      <name>hostVector</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>afad946e3c20d39fc680211ef1b280d95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H const word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a968c95c00dc3cd040973aa0c733311e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>size</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a334c2560412a3bc4fc1c215a77a48337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>capacity</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a5bbce2ec98238f8f408ba4a4dfb96da4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>empty</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a8a26016033b73de243ec891f2a9cdeff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reserve</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a78a56054440adf67ed635117187de2c8</anchor>
      <arglist>(size_t cap)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocate</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>af6aaf04c933606aaaede7c95705f7a2a</anchor>
      <arglist>(size_t cap)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocate</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aaebf94e6b034bdeb6f19d27b19c3534d</anchor>
      <arglist>(size_t cap, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resize</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aae7b42bf35ba19761dfa7af9cfa353ef</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>resize</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>adb3beda4d71392ce97b56a53bfb503de</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>clear</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>afd32d1c4cda15e685fd3008f4ded29f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a6ab1c6d91f769bc9bc0a58cf9f1333d6</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>assign</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a39102b6908f04f813ccd119193c56fc3</anchor>
      <arglist>(size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>assign</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a9fae584c5ab16d31491be8f8123de47f</anchor>
      <arglist>(const Vector&lt; T &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a7931a57163eb363a3ca7db6ffa438479</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>acb8d546498dc0126c5be6ad6f2767cb6</anchor>
      <arglist>(const int32IndexContainer &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a6c691b8251b1e4c37e9a66c782f514f2</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>insertSetElement</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ab0ccf3bcb1a684f07fac4c2a10e6668f</anchor>
      <arglist>(const Vector&lt; int32 &gt; &amp;indices, const Vector&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>append</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a8edb1616fac15ce7c6d93d6f51b8b286</anchor>
      <arglist>(const deviceViewType1D&lt; T &gt; &amp;dVec, size_t numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>append</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>adb20bb763fa8152421125b98c45e9b0e</anchor>
      <arglist>(const VectorSingle &amp;Vec)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, void &gt;::type</type>
      <name>push_back</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>af5a1e2b238db69001c4fb2b8e02f5188</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H pointer</type>
      <name>data</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a4b2292bdd68ebde041be930230a52151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H constPointer</type>
      <name>data</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a44d193108380335543fa9f66ab60c8ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if_t&lt; isHostAccessible_ &amp;&amp;Enable, iterator &gt;</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a4d0df7d75abaa5430995741ba2770f25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, constIterator &gt;::type</type>
      <name>begin</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a8a7adbd87f7228fef3f839def029c2e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, iterator &gt;::type</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a69805aafd2dd338202b6bc6fbabc6c8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, constIterator &gt;::type</type>
      <name>end</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a724df4cf1aa5a3a34f97fe7b0af49913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, reference &gt;::type</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a0ec663e198a7ec2dc007b4dc6a6be250</anchor>
      <arglist>(label i)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H std::enable_if&lt; isHostAccessible_ &amp;&amp;Enable, constReference &gt;::type</type>
      <name>operator[]</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aca03875d1575572d9f7732e75f9ececa</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>changeSize</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aad70fb15c5e8a4021331d8b5a3644b69</anchor>
      <arglist>(size_t n, bool actualCap=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>setSize</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a3b5f16fc65a14d8abadb94601e61c2f4</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_H void</type>
      <name>updateSubView</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a99a930ec16d4a29155a050c535b45249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr const char *</type>
      <name>memoerySpaceName</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a050453ea5010d379462b233e848cb9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static INLINE_FUNCTION_H size_t</type>
      <name>evalCapacity</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a41619477f54df606facb3a60c7b64109</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>size_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a5f31775800bbb46b35b5791def1f3acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>capacity_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>aa3099a4c2b0b3ab5ba4188b4a8f59b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>viewType</type>
      <name>view_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ac1e49fbf5fa8405fe88173679837ea96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>viewType</type>
      <name>subView_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a63fe442a8d24ab147c6ce83f97a29075</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>subViewUpdated_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a7cef6881b294a0bf6454fa2d530da739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const real</type>
      <name>growthFactor_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>a0579d346fab3bf2ce9e41fede13e43d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>isHostAccessible_</name>
      <anchorfile>classpFlow_1_1VectorSingle.html</anchorfile>
      <anchor>ae6637e7df6fa318c820511b10e2cc170</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::vibrating</name>
    <filename>classpFlow_1_1vibrating.html</filename>
    <base>pFlow::timeInterval</base>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>vibrating</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a3a6da07d4af1a874177be0d6535c3511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>vibrating</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a2b355a11348fa109643c5396da68e170</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_HD</type>
      <name>vibrating</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a66fe8a1f3b1119b6d0985466cb5de0e1</anchor>
      <arglist>(const vibrating &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>vibrating &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a62c98fbccab095c8e00f7f090c6b066b</anchor>
      <arglist>(const vibrating &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>setTime</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a0c0f53f98461312b9cf461aa83d3de51</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>linTangentialVelocityPoint</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a820318fa567848e61c6d25424bff8845</anchor>
      <arglist>(const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a3b89f616e7744d1ea88bb39300fce4c4</anchor>
      <arglist>(const realx3 &amp;p, real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>ab25b05023549e7fec0ee1d0f6ce239dd</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a279dae2ee3345fbb2b31e5af9ec0a5b4</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>ae1d42751915e8566dac19658cc498ffa</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>aa7d820a4dd0777a9a82aee242b83a167</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>INLINE_FUNCTION_HD void</type>
      <name>calculateVelocity</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a6a741ca4b36f2376aeb2650d274bc2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>angularFreq_</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a00b0c9642be1f1e40745c74d462bd774</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>phaseAngle_</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a5de4c19d1d86f8750037b13153fa9506</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>amplitude_</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>ab99817cefd7dcc788c7d129b270bbfb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>velocity_</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a719c65328bce1858f7f090f430b8fe7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>velocity0_</name>
      <anchorfile>classpFlow_1_1vibrating.html</anchorfile>
      <anchor>a51174e4a5d806dc50a1198168c89227b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::vibratingMotion</name>
    <filename>classpFlow_1_1vibratingMotion.html</filename>
    <class kind="class">pFlow::vibratingMotion::Model</class>
    <member kind="function">
      <type></type>
      <name>TypeInfoNV</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a1cac17f7094b78cb4f5d5abc61f1b6d7</anchor>
      <arglist>(&quot;vibratingMotion&quot;)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>vibratingMotion</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a79aa78851f2534f43846e16f9b161fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>vibratingMotion</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>ad329fa11089000c6f762bac74808ad2b</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>vibratingMotion</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a8c9a9d1801cbc51c8db029c8d5af80a0</anchor>
      <arglist>(const vibratingMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>vibratingMotion</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>ae660f2a0e21cb281bc053353ee8102c2</anchor>
      <arglist>(vibratingMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H vibratingMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a449392d6ae29ba0c394530d62d61770d</anchor>
      <arglist>(const vibratingMotion &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>vibratingMotion &amp;</type>
      <name>operator=</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a98ecd066948be4a40f6f51ceea6c3225</anchor>
      <arglist>(vibratingMotion &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H</type>
      <name>~vibratingMotion</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a480e75507912fcc77455892881d277b7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>Model</type>
      <name>getModel</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>ad154666086a654ab29cbb515fec9bf4e</anchor>
      <arglist>(real t)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>nameToIndex</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>aa228b68325a8251f13734b8f2dc7367b</anchor>
      <arglist>(const word &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H word</type>
      <name>indexToName</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a25f3d350ed015e91a764c51a6525e139</anchor>
      <arglist>(label i) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H realx3</type>
      <name>pointVelocity</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a6f667021dabad618c181dacf4b33de9d</anchor>
      <arglist>(label n, const realx3 &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H realx3</type>
      <name>transferPoint</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a865a4785055fb43d1b057eefe561d394</anchor>
      <arglist>(label n, const realx3 p, real dt) const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isMoving</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a226a2b5e6b2e18ee8a990c2c357bb036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>move</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a23b242e47f91767c189ea8193cca7f55</anchor>
      <arglist>(real t, real dt)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>read</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>aff8e92ab47032ae811d1271161cb9b22</anchor>
      <arglist>(iIstream &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H bool</type>
      <name>write</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a6a40de4ceed55b2f78cf3027739dfd91</anchor>
      <arglist>(iOstream &amp;os) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>VectorDual&lt; vibrating &gt;</type>
      <name>axisVector_HD</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a2f906b6d20511cab533c0244b2bcff65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readDictionary</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a3ee94dd32f4df1490653290d2919dc52</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>writeDictionary</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>ad55987c0647186d3e7acad9cc4166034</anchor>
      <arglist>(dictionary &amp;dict) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>axisVector_HD</type>
      <name>components_</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a4ddf463e5910440a874c030b76ec01ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>wordList</type>
      <name>componentName_</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a222cd3ef0af4c2b5ec8a899c9ede1093</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>label</type>
      <name>numComponents_</name>
      <anchorfile>classpFlow_1_1vibratingMotion.html</anchorfile>
      <anchor>a9efc143cd3ed774b53a35c9a17239113</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::vtkFile</name>
    <filename>classpFlow_1_1vtkFile.html</filename>
    <member kind="function">
      <type></type>
      <name>vtkFile</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>add448bf63ea20db92c0d7ae977014a96</anchor>
      <arglist>(const fileSystem dir, const word &amp;bName, real time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~vtkFile</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a47ba965a9dafedb06cbbb68598699afd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>oFstream &amp;</type>
      <name>operator()</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a4411d6e9ec958c3a3eed16c3246fc2da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a61efd4196a96540ee018fee8791f3f10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual fileSystem</type>
      <name>fileName</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>aae8a01aeff2b37c5242e6cdc45a8852d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>openStream</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a48848d5794b90271ec8ccacd3f14a134</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeHeader</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a50e2a02b29448f61d0e5a071b72ba138</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>fileSystem</type>
      <name>dirPath_</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a6c9b07c93b579621bcaec20ec0ab3d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>baseName_</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a775e21c7d4ffad44d2f5878458fcee15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>time_</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a01b25d5afba0d2d8b20f4428a3810933</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>uniquePtr&lt; oFstream &gt;</type>
      <name>oStream_</name>
      <anchorfile>classpFlow_1_1vtkFile.html</anchorfile>
      <anchor>a6027cf7f2b1878c20729940b2f2f0437</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::Wall</name>
    <filename>classpFlow_1_1Wall.html</filename>
    <member kind="function">
      <type></type>
      <name>TypeInfo</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a452c0fb1f4befce3b8d6b10ae3559781</anchor>
      <arglist>(&quot;Wall&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wall</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a768332f15cfaa85e71811d6b4f6b91c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Wall</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a220cbe6a37a2364dd5d8e7dd460fb3d2</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Wall</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a8b6da95b6caf2a3b61d191b0d40f3e6d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>create_vCtor</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a3ec7390949193f5d4447ac7668edd3ce</anchor>
      <arglist>(Wall, dictionary,(const dictionary &amp;dict),(dict))</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>triangles</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>ab0709db88934692936bc0a516f20266b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>name</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a83f9a8e30fb37f90e9a6436f4470aaa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>materialName</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>ab79149414f9f9ca76923e5c32c4b8561</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>motionName</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a320bf8ecf0e5c150eca758109044b35e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkTrianlge</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>aa8744a61de2fef7a0c4e9e2ff8e03db4</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static uniquePtr&lt; Wall &gt;</type>
      <name>create</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>aea93e0565c241dc8f5b19f8f094d1f1e</anchor>
      <arglist>(const dictionary &amp;dict)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>readCommon</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>ac339bf3cb14b75918394f93ca65ec6bf</anchor>
      <arglist>(const dictionary &amp;ditc)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; realx3x3 &gt;</type>
      <name>triangles_</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a852ec327b0c305c9895f4e404c2c9d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>name_</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a50fd7d13a0f7a6007ca5027b3bb8765a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>materialName_</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>a0cfefaab8d0b6d16567956251985ad79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>word</type>
      <name>motionName_</name>
      <anchorfile>classpFlow_1_1Wall.html</anchorfile>
      <anchor>af61424e9d302d40d095b012d7f6bf630</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>pFlow::zAxis</name>
    <filename>classpFlow_1_1zAxis.html</filename>
    <member kind="function">
      <type></type>
      <name>zAxis</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>ad9f45f6f20e4ef66cc141d8962b3a301</anchor>
      <arglist>(const realx3 &amp;lp1, const realx3 &amp;lp2)</arglist>
    </member>
    <member kind="function">
      <type>real</type>
      <name>length</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>ac59dfa875678efb3e33dedf83ffb91e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>transferToZ</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>ad5d2d9bea0299bb4e0b83ead960ca499</anchor>
      <arglist>(const realx3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>realx3</type>
      <name>transferBackZ</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a6b4d7701866467309804ebbc0cd66e88</anchor>
      <arglist>(const realx3 &amp;p)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>p1_</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a3dbbeee301e1c6cf679b8f2bbbb9ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>p2_</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a0c834510e42988cef9d46bac7d78c307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>realx3</type>
      <name>n_</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a5b71c203ea8685dfe48bf6502de7521d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>Trans_z_xz_P1_</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a18b41a3048bf3304bfc7dff155992dad</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real</type>
      <name>ITrans_P1_xz_z_</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a802925749e92f2edf7786773f87d186d</anchor>
      <arglist>[4][4]</arglist>
    </member>
    <member kind="function" protection="private">
      <type>void</type>
      <name>makeTransMatrix</name>
      <anchorfile>classpFlow_1_1zAxis.html</anchorfile>
      <anchor>a49679c47e1ab58456fbf52a63075df80</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow</name>
    <filename>namespacepFlow.html</filename>
    <namespace>pFlow::algorithms</namespace>
    <namespace>pFlow::cfModels</namespace>
    <namespace>pFlow::PFtoVTK</namespace>
    <namespace>pFlow::pointStructureKernels</namespace>
    <namespace>pFlow::sphereInteractionKernels</namespace>
    <namespace>pFlow::sphereParticlesKernels</namespace>
    <namespace>pFlow::sphTriInteraction</namespace>
    <namespace>pFlow::triangleFunctions</namespace>
    <namespace>pFlow::triSurfaceKernels</namespace>
    <namespace>pFlow::TSFtoVTK</namespace>
    <namespace>pFlow::utilities</namespace>
    <class kind="struct">pFlow::AB3History</class>
    <class kind="struct">pFlow::AB4History</class>
    <class kind="struct">pFlow::AB5History</class>
    <class kind="class">pFlow::AdamsBashforth2</class>
    <class kind="class">pFlow::AdamsBashforth3</class>
    <class kind="class">pFlow::AdamsBashforth4</class>
    <class kind="class">pFlow::AdamsBashforth5</class>
    <class kind="class">pFlow::AdamsMoulton3</class>
    <class kind="class">pFlow::AdamsMoulton4</class>
    <class kind="class">pFlow::AdamsMoulton5</class>
    <class kind="struct">pFlow::allOp</class>
    <class kind="struct">pFlow::betweenEqOp</class>
    <class kind="struct">pFlow::betweenOp</class>
    <class kind="class">pFlow::bitsetHD</class>
    <class kind="class">pFlow::bitTransfer</class>
    <class kind="class">pFlow::box</class>
    <class kind="class">pFlow::boxRegion</class>
    <class kind="class">pFlow::cellMapping</class>
    <class kind="class">pFlow::cells</class>
    <class kind="class">pFlow::cellsWallLevel0</class>
    <class kind="class">pFlow::cellsWallLevels</class>
    <class kind="class">pFlow::combinedRange</class>
    <class kind="class">pFlow::compareOne</class>
    <class kind="class">pFlow::compareTwo</class>
    <class kind="class">pFlow::compareZero</class>
    <class kind="class">pFlow::ContactSearch</class>
    <class kind="class">pFlow::contactSearch</class>
    <class kind="class">pFlow::cuboidWall</class>
    <class kind="class">pFlow::cylinder</class>
    <class kind="class">pFlow::cylinderRegion</class>
    <class kind="class">pFlow::cylinderWall</class>
    <class kind="class">pFlow::dataEntry</class>
    <class kind="class">pFlow::demComponent</class>
    <class kind="class">pFlow::demGeometry</class>
    <class kind="class">pFlow::demInteraction</class>
    <class kind="class">pFlow::demParticles</class>
    <class kind="class">pFlow::DeviceSide</class>
    <class kind="class">pFlow::dictionary</class>
    <class kind="class">pFlow::dynamicLinkLibs</class>
    <class kind="class">pFlow::dynamicPointStructure</class>
    <class kind="class">pFlow::empty</class>
    <class kind="struct">pFlow::equalOp</class>
    <class kind="class">pFlow::eventMessage</class>
    <class kind="class">pFlow::eventObserver</class>
    <class kind="class">pFlow::eventSubscriber</class>
    <class kind="class">pFlow::Field</class>
    <class kind="class">pFlow::fileStream</class>
    <class kind="class">pFlow::fileSystem</class>
    <class kind="class">pFlow::fixedWall</class>
    <class kind="class">pFlow::geometry</class>
    <class kind="class">pFlow::geometryMotion</class>
    <class kind="struct">pFlow::greaterThanEqOp</class>
    <class kind="struct">pFlow::greaterThanOp</class>
    <class kind="class">pFlow::hashMap</class>
    <class kind="class">pFlow::HostSide</class>
    <class kind="class">pFlow::iBox</class>
    <class kind="class">pFlow::iEntry</class>
    <class kind="class">pFlow::iFstream</class>
    <class kind="class">pFlow::iIstream</class>
    <class kind="class">pFlow::includeMask</class>
    <class kind="class">pFlow::IncludeMask</class>
    <class kind="class">pFlow::IncludeMask&lt; T, allOp&lt; T &gt; &gt;</class>
    <class kind="class">pFlow::indexContainer</class>
    <class kind="class">pFlow::insertion</class>
    <class kind="class">pFlow::Insertion</class>
    <class kind="class">pFlow::insertionRegion</class>
    <class kind="class">pFlow::InsertionRegion</class>
    <class kind="class">pFlow::integration</class>
    <class kind="class">pFlow::interaction</class>
    <class kind="class">pFlow::interactionBase</class>
    <class kind="class">pFlow::intervalRange</class>
    <class kind="class">pFlow::IOfileHeader</class>
    <class kind="class">pFlow::IOobject</class>
    <class kind="class">pFlow::IOstream</class>
    <class kind="class">pFlow::iOstream</class>
    <class kind="class">pFlow::Istream</class>
    <class kind="class">pFlow::iTstream</class>
    <class kind="struct">pFlow::lessThanEqOp</class>
    <class kind="struct">pFlow::lessThanOp</class>
    <class kind="class">pFlow::line</class>
    <class kind="class">pFlow::List</class>
    <class kind="class">pFlow::ListPtr</class>
    <class kind="class">pFlow::Logical</class>
    <class kind="class">pFlow::Map</class>
    <class kind="class">pFlow::mapperNBS</class>
    <class kind="class">pFlow::MapPtr</class>
    <class kind="class">pFlow::multiGridMapping</class>
    <class kind="class">pFlow::multiGridNBS</class>
    <class kind="class">pFlow::multiRotatingAxis</class>
    <class kind="class">pFlow::multiRotatingAxisMotion</class>
    <class kind="class">pFlow::multiTriSurface</class>
    <class kind="class">pFlow::NBS</class>
    <class kind="class">pFlow::NBSLevel</class>
    <class kind="class">pFlow::NBSLevel0</class>
    <class kind="class">pFlow::NBSLevels</class>
    <class kind="class">pFlow::noConstructAllocator</class>
    <class kind="class">pFlow::objectFile</class>
    <class kind="class">pFlow::oFstream</class>
    <class kind="class">pFlow::Ostream</class>
    <class kind="class">pFlow::oTstream</class>
    <class kind="class">pFlow::particleIdHandler</class>
    <class kind="class">pFlow::particles</class>
    <class kind="class">pFlow::PeakableRegion</class>
    <class kind="class">pFlow::peakableRegion</class>
    <class kind="class">pFlow::planeWall</class>
    <class kind="class">pFlow::pointField</class>
    <class kind="class">pFlow::pointRectCell</class>
    <class kind="class">pFlow::pointStructure</class>
    <class kind="class">pFlow::positionOrdered</class>
    <class kind="class">pFlow::positionParticles</class>
    <class kind="class">pFlow::positionRandom</class>
    <class kind="class">pFlow::postprocess</class>
    <class kind="class">pFlow::ProcessField</class>
    <class kind="class">pFlow::processField</class>
    <class kind="class">pFlow::property</class>
    <class kind="class">pFlow::pStructSelector</class>
    <class kind="class">pFlow::quadruple</class>
    <class kind="class">pFlow::randomReal</class>
    <class kind="class">pFlow::RandomReal</class>
    <class kind="class">pFlow::readControlDict</class>
    <class kind="class">pFlow::readFromTimeFolder</class>
    <class kind="class">pFlow::rectangleMesh</class>
    <class kind="class">pFlow::rectMeshField</class>
    <class kind="class">pFlow::region</class>
    <class kind="class">pFlow::regionBase</class>
    <class kind="class">pFlow::repository</class>
    <class kind="class">pFlow::rotatingAxis</class>
    <class kind="class">pFlow::rotatingAxisMotion</class>
    <class kind="class">pFlow::selectBox</class>
    <class kind="class">pFlow::selectRandom</class>
    <class kind="class">pFlow::selectRange</class>
    <class kind="struct">pFlow::selectSide</class>
    <class kind="class">pFlow::setFieldEntry</class>
    <class kind="class">pFlow::setFieldList</class>
    <class kind="class">pFlow::shapeMixture</class>
    <class kind="class">pFlow::sortedContactList</class>
    <class kind="class">pFlow::sortedPairs</class>
    <class kind="class">pFlow::span</class>
    <class kind="class">pFlow::sphere</class>
    <class kind="class">pFlow::sphereInteraction</class>
    <class kind="class">pFlow::sphereParticles</class>
    <class kind="class">pFlow::sphereRegion</class>
    <class kind="class">pFlow::sphereShape</class>
    <class kind="class">pFlow::stlFile</class>
    <class kind="class">pFlow::stlWall</class>
    <class kind="class">pFlow::stridedRange</class>
    <class kind="class">pFlow::symArray</class>
    <class kind="class">pFlow::systemControl</class>
    <class kind="class">pFlow::Time</class>
    <class kind="class">pFlow::timeControl</class>
    <class kind="class">pFlow::timeFlowControl</class>
    <class kind="class">pFlow::timeFolder</class>
    <class kind="class">pFlow::timeInterval</class>
    <class kind="class">pFlow::Timer</class>
    <class kind="class">pFlow::Timers</class>
    <class kind="class">pFlow::token</class>
    <class kind="struct">pFlow::triple</class>
    <class kind="class">pFlow::triSurface</class>
    <class kind="class">pFlow::triSurfaceField</class>
    <class kind="class">pFlow::twoPartEntry</class>
    <class kind="class">pFlow::uniformRandomInt32</class>
    <class kind="class">pFlow::uniformRandomReal</class>
    <class kind="class">pFlow::uniquePtr</class>
    <class kind="class">pFlow::unsortedContactList</class>
    <class kind="class">pFlow::unsortedPairs</class>
    <class kind="class">pFlow::Vector</class>
    <class kind="class">pFlow::VectorDual</class>
    <class kind="class">pFlow::VectorSingle</class>
    <class kind="class">pFlow::vibrating</class>
    <class kind="class">pFlow::vibratingMotion</class>
    <class kind="class">pFlow::vtkFile</class>
    <class kind="class">pFlow::Wall</class>
    <class kind="class">pFlow::zAxis</class>
    <member kind="typedef">
      <type>geometryMotion&lt; vibratingMotion &gt;</type>
      <name>vibratingMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a31ff71fecb4b460d162393758ffc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; rotatingAxisMotion &gt;</type>
      <name>rotationAxisMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a559bc6a1704f3434592035b7e3ba9fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; multiRotatingAxisMotion &gt;</type>
      <name>multiRotationAxisMotionGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab48e3cf9569e6493e051946792f9d182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>geometryMotion&lt; fixedWall &gt;</type>
      <name>fixedGeometry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9177b1a1e030ad85e4f8516c934a58d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>CELL_INDEX_TYPE</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a98ddfd9c014deabdc5951b479ec25914</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32</type>
      <name>ID_TYPE</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27901dc51aed36085ab8f7c728a8b08d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Insertion&lt; sphereShape &gt;</type>
      <name>sphereInsertion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae2e0749fbe2e30cbf9061410cfccf232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned &gt;</type>
      <name>bitset32_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a511d36dedf9ff6e8c0000fba1817d0e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned, HostSpace &gt;</type>
      <name>bitset32_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a96ee4b1db3b27ba52d9ab0e5249278fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned long &gt;</type>
      <name>bitset64_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a05778ebe00134c2ec000d04527dd7ee2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bitsetHD&lt; unsigned long, HostSpace &gt;</type>
      <name>bitset64_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a84b112824664f15682f079b861b6e0aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int8 &gt;</type>
      <name>int8Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e09caed11d4f73f97e0d94eb40d3fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d5cdeb3dc29cc9d49ecadf5c6fdfd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int16 &gt;</type>
      <name>int16Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecfeded2edb724ab9b96d80dd1162217</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int16, HostSpace &gt;</type>
      <name>int16Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adfff7ac861d39728625d7fa6a0601852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32 &gt;</type>
      <name>int32Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a89b2c5782d391dc8a974f4043d8d7ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32, HostSpace &gt;</type>
      <name>int32Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3f8b47408a022434297013e670252046</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64 &gt;</type>
      <name>int64Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adfa7ebf09e95c68d0224a4689d853b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64, HostSpace &gt;</type>
      <name>int64Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adc01fab0d6e5b1f68eae0d6c363a3c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32 &gt;</type>
      <name>uint32Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c7c97510ed3e336bf0b96ecd36bd6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32, HostSpace &gt;</type>
      <name>uint32Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9ef7d5747f5d9df6eb4f628dbe7fec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, label &gt;</type>
      <name>labelField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a841e526316157c97d3a6464d8f4bdeca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, label, HostSpace &gt;</type>
      <name>labelField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e1b45a14a123e9506c2f5b1cb52d92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, real &gt;</type>
      <name>realField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af835cf0cfb1ce12cd4ee4a6bcd42b7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac1d42f542946752bbb15b2e0d0a9e1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aee8ae24174111b9caf1bc31c32fa0744</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a98ee42fe64680818b1a5d5ffa18a017a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint16x3 &gt;</type>
      <name>uint16x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6d0dbf8cfe4485c0ae023061d6351854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint16x3, HostSpace &gt;</type>
      <name>uint16x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2ce5432294b08715376707f3c74712cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32x3 &gt;</type>
      <name>uint32x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6746dd14191baa45cde4101e5a08d4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, uint32x3, HostSpace &gt;</type>
      <name>uint32x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1d0c447e3670b06cc0992fc8ad801635</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32x3 &gt;</type>
      <name>int32x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa75659d80bbbeefc05cfb02480e23907</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int32x3, HostSpace &gt;</type>
      <name>int32x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5c3bb5c338f80d2dca4e70bac09f555d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64x3 &gt;</type>
      <name>int64x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44fdbd60679faa1eb17c4c7cdec64f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, int64x3, HostSpace &gt;</type>
      <name>int64x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac18e52190cdebd798fbf107f8c0e9fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3x3 &gt;</type>
      <name>realx3x3Field_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9ee284a8d52e46ac4b54ed4ef9aceb5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, realx3x3, HostSpace &gt;</type>
      <name>realx3x3Field_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a01da6ce0ebf22ff3d3da65f4ed5774f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorSingle, word, HostSpace &gt;</type>
      <name>wordField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a791cfb306a9333d7b4b4c2f39b291b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int8 &gt;</type>
      <name>int8Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab961c8edd5b57f034f472e7ee6fd8b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int16 &gt;</type>
      <name>int16Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d3080db5d0adee2b1bc10bc38730cd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int32 &gt;</type>
      <name>int32Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1cb049682d41ccb526d221883aa6ff83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int64 &gt;</type>
      <name>int64Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0b221aabb6f82413a8dd216a6e5f8ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32 &gt;</type>
      <name>uint32Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2e88b2ed701aef940c715cd598d995f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, label &gt;</type>
      <name>labelField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af0e94af8949a0d5166039e8d6dfe4e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, real &gt;</type>
      <name>realField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade5939cd1656bb3a4fc789fb7ac01906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, realx3 &gt;</type>
      <name>realx3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8808645f7e1b2cb6525158948d98bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32x3 &gt;</type>
      <name>uint16x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6a9956fddee1bef2aed54049165a182a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, uint32x3 &gt;</type>
      <name>uint32x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac7e15230be5e8b89befdce2709b71b5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int32x3 &gt;</type>
      <name>int32x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae4ce18a487e4b33ad366be6865d33949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, int64x3 &gt;</type>
      <name>int64x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9060d10e1e6bed3edbb021c4cb6dd94b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; VectorDual, realx3x3 &gt;</type>
      <name>realx3x3Field_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9327600dfb70ca78fe75a84468447ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field&lt; Vector, word, vecAllocator&lt; word &gt; &gt;</type>
      <name>wordField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61e5aece937951a8c48ca31c49e399fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>indexContainer&lt; int32 &gt;</type>
      <name>int32IndexContainer</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27c4d9af27a6e7595097b77d05874147</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>indexContainer&lt; int64 &gt;</type>
      <name>int64IndexContainer</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa62dd25b29d6806bbf79e3c55949b3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int64 &gt;</type>
      <name>int64List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a34be84cb0022daf92dc6eaa34fa5cdc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int32 &gt;</type>
      <name>int32List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0b6787f0db27d9f45a8c70c88210d97b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int16 &gt;</type>
      <name>int16List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ad94e91a40ce8e2ffbf7a35c52776b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; int8 &gt;</type>
      <name>int8List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afa8a2063627c0e0ccea1e38b2c9b0791</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; label &gt;</type>
      <name>labelList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a08eb7fbbec6aeb3b7f1db44576752656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; uint32 &gt;</type>
      <name>uint32List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5523c3e7ce7b6119fc521723c06542a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; real &gt;</type>
      <name>realList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d452d2b90bf5ffd681ba78482296184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; realx3 &gt;</type>
      <name>realx3List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab51e83f5c5e58f65bfa52eac14901841</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; realx3x3 &gt;</type>
      <name>realx3x3List</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae4649f2fb3a730534353e2dee670b96f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; bool &gt;</type>
      <name>boolList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2b6adfad58b8dc4be5a09d9e1ed9413a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; word &gt;</type>
      <name>wordList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac2c8831a940f11de069cd73eb255b3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; word, T &gt;</type>
      <name>wordHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac3bade448fe22b2e9d66a82ed4b83326</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; label, T &gt;</type>
      <name>labelHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae3e3ec0f83bdfe2e683d53462ebb5682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; uint32, T &gt;</type>
      <name>uint32HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d1faf1e033cb51d67f6a95b3b389a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; int64, T &gt;</type>
      <name>int64HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa1a2f59893d9acb11552f1935281d575</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMap&lt; int32, T &gt;</type>
      <name>int32HashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a46014268016e1b82c7136895d790ba01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; word, T &gt;</type>
      <name>wordMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3eab0a0892cd36167818183a5f30fd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; label, T &gt;</type>
      <name>labelMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4008897b621b651d5dde438cbaf4253b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; uint32, T &gt;</type>
      <name>uint32Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a14136715e2225e0cb476fc25849fa3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; int32, T &gt;</type>
      <name>int32Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9228b9fe5857f9af566c7fbe0632e56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; int64, T &gt;</type>
      <name>int64Map</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a356ffdf106d49c2f19cdd67722c4548e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MapPtr&lt; std::map, key, T &gt;</type>
      <name>orderedMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a42590be2b02ef9a0e107e33bb3bbc683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MapPtr&lt; std::unordered_map, key, T &gt;</type>
      <name>hashMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acbe8e7417587aaa9a51e243db8a018e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>orderedMapPtr&lt; word, T &gt;</type>
      <name>wordOrderedMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a21c5ae841990a6325fdc97c9313f3d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>hashMapPtr&lt; word, T &gt;</type>
      <name>wordHashMapPtr</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a906a8e3cc7582566ebc1928efc6ec3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, T, HostSpace &gt;</type>
      <name>pointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a09c79f0e74d5dd4336dca6ab67c032c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, T &gt;</type>
      <name>pointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4187027a579f8df9e0573db3eeb0bb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, T &gt;</type>
      <name>pointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c1c285bee9b232c99aba17687441238</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int8 &gt;</type>
      <name>int8PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac0758d3abd533bea960d00d4b090d7e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61025fd78a2d36729cd7a36ffacfd10a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int16 &gt;</type>
      <name>int16PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb0c62873d01620a42abf3b3d65bdb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int16, HostSpace &gt;</type>
      <name>int16PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a91de51c84b8b5517d9fc37b6028a9196</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int32 &gt;</type>
      <name>int32PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4266150006aeaf3f8cc337c457dc8b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int32, HostSpace &gt;</type>
      <name>int32PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a435a95e4c15094378d9422cb9d06e195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int64 &gt;</type>
      <name>int64PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2fa4b6e4c318ec336289288637d73f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, int64, HostSpace &gt;</type>
      <name>int64PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a3ac15d17d1e51c3135b259793e1fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, uint32 &gt;</type>
      <name>uint32PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afc91f4ae090af1a260fe984aeb6f8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, uint32, HostSpace &gt;</type>
      <name>uint32PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6f58e089cbe38856864ad2f8f1d142c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, label &gt;</type>
      <name>labelPointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3665760473641e4508e521b2ce8c40ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, label, HostSpace &gt;</type>
      <name>labelPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ace2d7d703d387c85e5b085e9cf395ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, real &gt;</type>
      <name>realPointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac5d59f7d75bbf030e7fd2223d42f551b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a37b7910ed794bcf96dffec6c26e50c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3PointField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b286cf0e92d888964d5691196b6c151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3PointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a35afa74efc5b7151c4f6368bab484065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorSingle, word, HostSpace &gt;</type>
      <name>wordPointField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48bee2169ca4f08e8d0b2bb69924a63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int8 &gt;</type>
      <name>int8PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e23b118ff6e2556116bf1d2407b3299</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int16 &gt;</type>
      <name>int16PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a64182b010b93655dea7296d8cc0661ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int32 &gt;</type>
      <name>int32PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0aa4fea0cb8c686926eddc3b7280420c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, int64 &gt;</type>
      <name>int64PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab44b56c7a3daf9bbe5176422166dbe8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, uint32 &gt;</type>
      <name>uint32PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab648bfdd35f60cf5a39f758a58afd498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, label &gt;</type>
      <name>labelPointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aebb8489198eaf346132534bed50cd99a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, real &gt;</type>
      <name>realPointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a930c96ef7776e294a48b805e1a0d5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; VectorDual, realx3 &gt;</type>
      <name>realx3PointField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2e3a51140f72abac829aa55055d3f68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>pointField&lt; Vector, word, vecAllocator&lt; word &gt; &gt;</type>
      <name>wordPointField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a242ff29005847ad17d02d58900a946b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; Key, std::less&lt; Key &gt;, std::allocator&lt; Key &gt; &gt;</type>
      <name>Set</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5a3972b374b884e9021d78ba9ea58014</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; real &gt;</type>
      <name>realSymArray_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a151efe6d609064fbcf52e2ffa31cbb06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; real, HostSpace &gt;</type>
      <name>realSymArray_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d0e6eb8ff87487d0b3574ee96623cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; realx3 &gt;</type>
      <name>realx3SymArray_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab04533f661b4fcef84e4907188feef86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>symArray&lt; realx3, HostSpace &gt;</type>
      <name>realx3SymArray_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae8dbcfb8e2ecba7f3ac418e21f0ac22d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, real &gt;</type>
      <name>realTriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a88434a63612ef893c7c24b85959251f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, real, HostSpace &gt;</type>
      <name>realTriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acae810ffca011a72484201e81542c381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, realx3 &gt;</type>
      <name>realx3TriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afd682516555bc9f529677a279d60eba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, realx3, HostSpace &gt;</type>
      <name>realx3TriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20a678e59be408f7ba8779b9a25021d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, real &gt;</type>
      <name>realTriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad3c3266c1484ce0f16ee16bd5e021a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, realx3 &gt;</type>
      <name>realx3TriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac6698a999ca334d56f2757b15fd425a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, real, vecAllocator&lt; real &gt; &gt;</type>
      <name>realTriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a721bccebfa887f6d544eed52d09e3144</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, realx3, vecAllocator&lt; realx3 &gt; &gt;</type>
      <name>realx3TriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abc31424b5e539c0d9e44b5da0fa2ecb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, int8 &gt;</type>
      <name>int8TriSurfaceField_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaa830358734c88d24e4006884d78810f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorSingle, int8, HostSpace &gt;</type>
      <name>int8TriSurfaceField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acb551675657a508333bd2ecc7820b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; VectorDual, int8 &gt;</type>
      <name>int8TriSurfaceField_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44f5e1cd23511168f7eaa308769babbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triSurfaceField&lt; Vector, int8, vecAllocator&lt; real &gt; &gt;</type>
      <name>int8TriSurfaceField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a99ba1669041dd64adb630a282019ee9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; T &gt;</type>
      <name>vecAllocator</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a83a37fc944241b7da6aa8785a1997535</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int8 &gt;</type>
      <name>int8Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a8063cd7823bbad370eda1fccf7f70e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int16 &gt;</type>
      <name>int16Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aacff4e3b5b85bcbe8492be180fbd89d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32 &gt;</type>
      <name>int32Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4d3365b9dbfaa1d5d573d1a6b30c10df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int64 &gt;</type>
      <name>int64Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adecb652fac8b0ce10ede2b5144bad869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32 &gt;</type>
      <name>uint32Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a90d3f047f5a86872dd6ee80ebab12b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; label &gt;</type>
      <name>labelVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1765c3ce3f985983901ac24065b3c587</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; real &gt;</type>
      <name>realVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a56fe59023e353f0f237688c06fbfd441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; realx3 &gt;</type>
      <name>realx3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aede0f5a4a44d271e4e260cdb01032a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint16x3 &gt;</type>
      <name>uint16x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1e0762cedc1a048af96e4d9c4035807d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32x3 &gt;</type>
      <name>uint32x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fbcb46b94bdb09a8028d5c2b0072b3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32x3 &gt;</type>
      <name>int32x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b3af46b160d6cafec43b41ca3b7323a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int64x3 &gt;</type>
      <name>int64x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a95baabac84a3a0bdd421adcad1fcc7d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint16x3x3 &gt;</type>
      <name>uint16x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a86740c70b7b54cfc31f852be97c1df56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; uint32x3x3 &gt;</type>
      <name>uint32x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acb6fa1007c5939fb982cb81c349fb098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; int32x3x3 &gt;</type>
      <name>int32x3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aed9a0960c5da35fc4d3f501a5fd9420d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab067da62570f5563dbc4fc15ba2cc8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector&lt; word &gt;</type>
      <name>wordVector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e76b0fc4f41684b7dd691cb6552384d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int8 &gt;</type>
      <name>int8Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab794e608e49115b9cf5c0e5e19dbaa8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int16 &gt;</type>
      <name>int16Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad5d5affdbe68c215b18355c7741883d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int32 &gt;</type>
      <name>int32Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab0cbdf73136c790bc69f33564d337408</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; int64 &gt;</type>
      <name>int64Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aee328a320295ba84297cb69f890a778d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; uint32 &gt;</type>
      <name>uint32Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85eac2c18d8d95fb4c23ec4708a4ec9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; label &gt;</type>
      <name>labelVector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1e97390670f1269846e4206301850e1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; real &gt;</type>
      <name>realVector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aabed1383f227ba50ae6e1afeb38ed24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; realx3 &gt;</type>
      <name>realx3Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1779736a41e83dbcd22f6ca0cf170e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorDual&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector_HD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afc623b3031d9434695205d6dee6cdac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int8 &gt;</type>
      <name>int8Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac91e952c3a8f9438e5c8bfb93f4094e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int8, HostSpace &gt;</type>
      <name>int8Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a767fab5705dae43ebad8fca527814905</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int16 &gt;</type>
      <name>int16Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fd0e12808b68238b34b8ce91fee87dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int16, HostSpace &gt;</type>
      <name>int16Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2922890672759a3ef3f74d2cbb0045f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32 &gt;</type>
      <name>int32Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a548dbb86f2b3fb0513b23daa8ac8f189</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32, HostSpace &gt;</type>
      <name>int32Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a751d9816bbb35284a9a8a499b5748107</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64 &gt;</type>
      <name>int64Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acc0003bf19253591e9b5487c7fc8ead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64, HostSpace &gt;</type>
      <name>int64Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a101356f7b0d8a873ec5fc2a76b9988ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32 &gt;</type>
      <name>uint32Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6c4463aa3523af8dd7409d33f2f98e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32, HostSpace &gt;</type>
      <name>uint32Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15f32b513a1757dc4a0ff05292254b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; label &gt;</type>
      <name>labelVector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9bb4eba43afe209d2198ae6866fc3b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; label, HostSpace &gt;</type>
      <name>labelVector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48264f64c7f09121a5e9dd18a05332e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; real &gt;</type>
      <name>realVector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abcf780498c2fa21662ffb27b22056cc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; real, HostSpace &gt;</type>
      <name>realVector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a82a82591ca980d983da36337fd7636a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3 &gt;</type>
      <name>realx3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a648e9586ec15d127938511ea0e11b215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3, HostSpace &gt;</type>
      <name>realx3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa94e1b6d6afb9a1b9ec064b689c11bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint16x3 &gt;</type>
      <name>uint16x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1a1a34514b410b2e97e5a3c31f085848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint16x3, HostSpace &gt;</type>
      <name>uint16x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe53753791e84f87d18dd61355290954</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32x3 &gt;</type>
      <name>uint32x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afcd161d12007c0285e05217f48ced926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; uint32x3, HostSpace &gt;</type>
      <name>uint32x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaee78c0b9b731b03e9d6a504c24153ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32x3 &gt;</type>
      <name>int32x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0e261b3758f76a1542108fd76b517180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int32x3, HostSpace &gt;</type>
      <name>int32x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aebe39b95317e999f81042bf0d046738c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64x3 &gt;</type>
      <name>int64x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2c0e37bcf6ea08bf96cb57520187953a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; int64x3, HostSpace &gt;</type>
      <name>int64x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a05295afd498bbc07c1a0c04ae42a02c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3x3 &gt;</type>
      <name>realx3x3Vector_D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9bfa3b4b0794b58e5e00c94608c763a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VectorSingle&lt; realx3x3, HostSpace &gt;</type>
      <name>realx3x3Vector_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0d4b8229526695fde8d8dca751817114</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; fileSystem &gt;</type>
      <name>fileSystemList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2449e323a463d498993ca38cbf50e748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::HostSpace</type>
      <name>HostSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a49dd1192cf116583abf7c726c7146851</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::Serial</type>
      <name>Serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>affe2bf45d2967411ae51d3e62c054a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DefaultHostExecutionSpace</type>
      <name>DefaultHostExecutionSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5cb29e471abf6b6665e7802212b56c37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DefaultExecutionSpace</type>
      <name>DefaultExecutionSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa3a14d3c76643399fc4edd8eca14944a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::pair&lt; T1, T2 &gt;</type>
      <name>kPair</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa59ae59573e65855aee2d3fe25e6504a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; int, int &gt;</type>
      <name>range</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad8085fcd475be6bdf841bcdd9b9225ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>kPair&lt; int long, int long &gt;</type>
      <name>range64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a430d631c371ee0da9132843fefab61c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T, properties... &gt;</type>
      <name>ViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fa4cf96d089d8cb2b3d0724b65b0b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, properties... &gt;</type>
      <name>ViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca2b381231776d26ea7431837f78aa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::DualView&lt; T *, properties... &gt;</type>
      <name>DualViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae271b0fde8f5b0936d1f66c6badf94b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T ***, properties... &gt;</type>
      <name>ViewType3D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae6a68b2bd4d845883b5c67189d67d816</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value, properties... &gt;</type>
      <name>unorderedMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae25c78fc8cfe4522797fde498ea5b003</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void, properties... &gt;</type>
      <name>unorderedSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48a6996c6f91d11bf502a6be451658d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value &gt;</type>
      <name>deviceHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a74b5a77c3e745769dff83777655393de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, Value, Kokkos::HostSpace &gt;</type>
      <name>hostHashMap</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a43be3c01d062d5f54deff52dec619f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void &gt;</type>
      <name>deviceHashSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a029759d96e520f37163628410152ea97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::UnorderedMap&lt; Key, void, Kokkos::HostSpace &gt;</type>
      <name>hostHashSet</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3522ab5973fcd25b20fc6cdd3d79965a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T &gt;</type>
      <name>deviceViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0d3d7c7d91ade0d1b9b28e2410ffa090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T * &gt;</type>
      <name>deviceViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa5276597d4016d6696f1f265a13d2164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T **, Layout, void &gt;</type>
      <name>deviceViewType2D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa957866bcd3037c171425168b49127b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T, Kokkos::HostSpace &gt;</type>
      <name>hostViewTypeScalar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2b1bedea375f3481fd757f3279895366</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, Kokkos::HostSpace &gt;</type>
      <name>hostViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad53198ba4452d5fdc966d861583fc70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T **, Layout, Kokkos::HostSpace &gt;</type>
      <name>hostViewType2D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85e375090d015571de56728963032099</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T *, Kokkos::MemoryTraits&lt; std::is_same&lt; DefaultExecutionSpace, Serial &gt;::value?0:Kokkos::Atomic &gt; &gt;</type>
      <name>deviceAtomicViewType1D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab7f48408d37674c3e7649cb2f79aaea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Kokkos::View&lt; T ***, Kokkos::MemoryTraits&lt; std::is_same&lt; DefaultExecutionSpace, Serial &gt;::value?0:Kokkos::Atomic &gt; &gt;</type>
      <name>deviceAtomicViewType3D</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef007f87766147fda1706da568a44e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RandomReal&lt; uniformRandomReal &gt;</type>
      <name>uniformRandomRealDistribution</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4f30ea3cdaa66f534481693a4f249621</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>stridedRange&lt; int32 &gt;</type>
      <name>int32StridedRagne</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7484505d7c853c194b3936e36accc88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>stridedRange&lt; int64 &gt;</type>
      <name>int64StridedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad1e6755d15045ae02856a28fd2df6e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>stridedRange&lt; real &gt;</type>
      <name>realStridedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b48ed503ab884fdb4edf60c89b6d96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; int32 &gt;</type>
      <name>int32IntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a556b38f61030c65e51709836acb52f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; int64 &gt;</type>
      <name>int64IntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76123a433b5f59ff165031adb4263c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>intervalRange&lt; real &gt;</type>
      <name>realIntervalRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8e229a4ab69c8e8e1fd9aa4b003da825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; int32 &gt;</type>
      <name>int32CombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c6154a8f1712f107a0aac41dcdcdd86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; int64 &gt;</type>
      <name>int64CombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a88169ffd4ae7c562ed34220ab342d338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>combinedRange&lt; real &gt;</type>
      <name>realCombinedRange</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7145c0814183a2c991634e8128b9d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iIstream &amp;(*</type>
      <name>iIstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20e3b7f09e3a0e3375b053badb8c6fac</anchor>
      <arglist>)(iIstream &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>IOstream &amp;(*</type>
      <name>IOstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b9953fd36ae93ba3eea7bd5d7de30de</anchor>
      <arglist>)(IOstream &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>iOstream &amp;(*</type>
      <name>iOstreamManip</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a046739cf7f3ef2d7e4141451e4982440</anchor>
      <arglist>)(iOstream &amp;)</arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; token &gt;</type>
      <name>tokenList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aec01e3c0681e98a3ea9ac4f693827ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>List&lt; token::tokenType &gt;</type>
      <name>tokenTypeList</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ebafb0df52e0995ead921efb1cc3ee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PeakableRegion&lt; boxRegion &gt;</type>
      <name>boxPeakableRegion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8d28c1ffb334cccd11261a9150a7a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PeakableRegion&lt; sphereRegion &gt;</type>
      <name>spherePeakableRegion</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9fa401242975ad74e08c99986c2d89cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>float</type>
      <name>real</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6192191c0e9c178a44ee1ac350fde476</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>signed char</type>
      <name>int8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a07fb256c1077eea7a7726e948cc8ff0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>short int</type>
      <name>int16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a209decd2d9a8cd5f1697cdb6e00f1cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>int32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aae6ad039f09c0676db11bd114136a3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>long long int</type>
      <name>int64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a94809bdb48183ff3ef62935d56f5c1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned short int</type>
      <name>uint16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab7078bf13036f3e78534da3ad4149dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>uint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abd01e8e67e3d94cab04ecaaf4f85ac1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>label</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a39f5f71474553bc78726494fa09dd0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::string</type>
      <name>word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0ebe792a293e8c717bddf60070c0fe99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int8 &gt;</type>
      <name>int8x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a46dc502a83c2a829b66fce9fa00a9a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int16 &gt;</type>
      <name>int16x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a818e1e51d9eed2dde6622751c453dd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int32 &gt;</type>
      <name>int32x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51afbafe3e3517b4e7755c14959053df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int64 &gt;</type>
      <name>int64x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5b5f4b04dbb58e0f1c0a5764d85acc86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint16 &gt;</type>
      <name>uint16x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa9f9c8182c64a3a4dd30939cd115d60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint32 &gt;</type>
      <name>uint32x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac855895a97b710fcd720a106454d0f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; label &gt;</type>
      <name>labelx3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa0ba176e7980e793396a21013d16066b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; real &gt;</type>
      <name>realx3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5164661f6974ad24fa90bf19433e6116</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint16x3 &gt;</type>
      <name>uint16x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afe55417bca4bd6ba37385ec4f4218e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; uint32x3 &gt;</type>
      <name>uint32x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad53055328b135c6bb102771485f536e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; int32x3 &gt;</type>
      <name>int32x3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a005aaa9029dea35edc607488975436fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; labelx3 &gt;</type>
      <name>labelx3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae774ba7b10a9b5bdca87f75edd90d1c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>triple&lt; realx3 &gt;</type>
      <name>realx3x3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1f679e3de3ea62dfad0ac20f7c992277</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>quadruple&lt; real &gt;</type>
      <name>real4</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6859bf55f23b9280778df47d713840e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NBSLevel0&lt; DefaultExecutionSpace &gt;</type>
      <name>SearchType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ada1255f9f9041aab271f918b85829dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsortedPairs&lt; DefaultExecutionSpace, int32 &gt;</type>
      <name>ContainerType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a26a12be4abf424c0f3997813af3bc15a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; T, HostSpace &gt;</type>
      <name>rectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa023d97d4596bc01e96478c08a308fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int8, HostSpace &gt;</type>
      <name>int8RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a47722b5fb2a9fb3b496a3f687f448949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int32, HostSpace &gt;</type>
      <name>int32RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a795d0af2419bf2de1f52f16090eff73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; int64, HostSpace &gt;</type>
      <name>int64RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0646fc8a15110657a7abe2b83489e0bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; real, HostSpace &gt;</type>
      <name>realRectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abddccc452594991b690b6121af7df45e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>rectMeshField&lt; realx3, HostSpace &gt;</type>
      <name>realx3RectMeshField_H</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad84841028cb1e691e0baad98dbb9f0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a297254036f91b9c2d9e7799e81734fa0</anchor>
      <arglist>(iIstream &amp;str, AB3History &amp;ab3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a67057168f7f1bfaed2716d0bf584c92b</anchor>
      <arglist>(iOstream &amp;str, const AB3History &amp;ab3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e3c94290d47b33214151e0efd5c2f86</anchor>
      <arglist>(iIstream &amp;str, AB4History &amp;ab4)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaf3307e156353527308978f95f140c75</anchor>
      <arglist>(iOstream &amp;str, const AB4History &amp;ab4)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51bf44eb1eaa2df2663af620501d8aad</anchor>
      <arglist>(iIstream &amp;str, AB5History &amp;ab5)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a14f0bb88772a2a49ee5c6e8769096094</anchor>
      <arglist>(iOstream &amp;str, const AB5History &amp;ab5)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>splitBy3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a09e092ab61b90f5515d60a7eb0d7e524</anchor>
      <arglist>(const uint64_t val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>xyzToMortonCode64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af9e399d88da408c52c6c167b651766e5</anchor>
      <arglist>(uint64_t x, uint64_t y, uint64_t z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint64_t</type>
      <name>getThirdBits</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51e811dd5563b1e1b759b091ef96c339</anchor>
      <arglist>(uint64_t x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>mortonCode64Toxyz</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48c34bfcf0b43fb8bd3a0ffc596b751d</anchor>
      <arglist>(uint64_t morton, uint64_t &amp;x, uint64_t &amp;y, uint64_t &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>indexToCell</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a690585e72dc379ab5cddb6b4a8c97938</anchor>
      <arglist>(const indexType idx, const triple&lt; cellIndexType &gt; &amp;extent, triple&lt; cellIndexType &gt; &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD triple&lt; cellIndexType &gt;</type>
      <name>boxExtent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a92415efe5f232af6661b4c4eb7e6f14c</anchor>
      <arglist>(const iBox&lt; cellIndexType &gt; &amp;box)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>indexToCell</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a456b32315d6b1173fe79556da677e861</anchor>
      <arglist>(const indexType idx, const iBox&lt; cellIndexType &gt; &amp;box, triple&lt; cellIndexType &gt; &amp;cell)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>sphereSphereCheck</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a28ad450169472bcaebbe0f9f761086de</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 p2, real d1, real d2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32x3</type>
      <name>mapIndexLevels</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aed40991723073826994b648decffc9e6</anchor>
      <arglist>(const int32x3 &amp;ind, int32 lowerLevel, int32 upperLevel)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a103bcc7b78b9ed9fc6dd1b06a71a0673</anchor>
      <arglist>(iOstream &amp;os, const rotatingAxis &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a805ee6f0f6b70fc649bd2cd2d8a6dfbc</anchor>
      <arglist>(iIstream &amp;is, rotatingAxis &amp;ax)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae32d1a3daa6982612199db8eb0212d24</anchor>
      <arglist>(iOstream &amp;os, const timeInterval &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8d656b4af50f3446ca7926763c4d3b05</anchor>
      <arglist>(iIstream &amp;is, timeInterval &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a34cc6c4ad330f26f7b7f88987a6d8d78</anchor>
      <arglist>(iOstream &amp;os, const vibrating &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3472ffca40b790fc4adee9265c5cad66</anchor>
      <arglist>(iIstream &amp;is, vibrating &amp;obj)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a32aeadac062c2aeb5a4f500a9b3534ec</anchor>
      <arglist>(iIstream &amp;is, Field&lt; VectorField, T, PropType &gt; &amp;ifld)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>add2aa8df2ac6a304de8c7a22139d149b</anchor>
      <arglist>(iOstream &amp;os, const Field&lt; VectorField, T, PropType &gt; &amp;ofld)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a58232dc20e4ae1f363a0ddad010c6f3e</anchor>
      <arglist>(iOstream &amp;os, const List&lt; T &gt; &amp;lst)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aad6532ab31d16e255bd9cf0618d505f5</anchor>
      <arglist>(iIstream &amp;is, List&lt; T &gt; &amp;lst)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a04e7886e9db0fc025dc700d2a37decc2</anchor>
      <arglist>(iOstream &amp;os, const wordHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9246ea38c24181059226ab4ee3539cf6</anchor>
      <arglist>(iOstream &amp;os, const labelHashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a04bb74b80f11a4bd3d6bcae727584073</anchor>
      <arglist>(iOstream &amp;os, const uint32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a873efed137dfcf6a20ae8ad03c16c2d7</anchor>
      <arglist>(iOstream &amp;os, const int64HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8bc06d707d708fcd33c4bdc5e9ad4c6</anchor>
      <arglist>(iOstream &amp;os, const int32HashMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aea271b5dea1d0db60f05c5bda0a2c70f</anchor>
      <arglist>(iOstream &amp;os, const wordMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af2195dd0bdd8a19c9bb949bfffb6319f</anchor>
      <arglist>(iOstream &amp;os, const labelMap&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab8a6ef1fd6acfe7b1d042101525b39f2</anchor>
      <arglist>(iOstream &amp;os, const uint32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1aa600412d3af9c4019b72abe114eda0</anchor>
      <arglist>(iOstream &amp;os, const int32Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef2a2da8abc154de409cbc8c1a453fb3</anchor>
      <arglist>(iOstream &amp;os, const int64Map&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>printKeys</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb1aa570817657ba2c2fccd07e1dd920</anchor>
      <arglist>(iOstream &amp;os, const wordHashMapPtr&lt; T &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18acd30183a8307f6fccede034df06cd</anchor>
      <arglist>(iIstream &amp;is, pointField&lt; VectorField, T, MemorySpace &gt; &amp;pF)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15bafeb4dd9ea98f5a531d013eda3e3d</anchor>
      <arglist>(iOstream &amp;os, const pointField&lt; VectorField, T, MemorySpace &gt; &amp;pF)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxActive_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac183657efe4ea32f6192ab43f9ec74b5</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft, Kokkos::HostSpace &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>maxActiveH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8262d8d2fba9ae48411373216f0b4fa2</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft, Kokkos::HostSpace &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>maxActiveD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9f1af27129c76c78d73236fa57140aea</anchor>
      <arglist>(const Kokkos::View&lt; T *, properties... &gt; &amp;view, const Kokkos::View&lt; int8 *, Kokkos::LayoutLeft &gt; &amp;flag, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxActive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72ec47ef8814b66b02f05638915de39a</anchor>
      <arglist>(const pointField&lt; VectorSingle, T, MemorySpace &gt; &amp;pField)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>maxActive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3e965b41d633e5cf2c1d880ff29a8ec2</anchor>
      <arglist>(const pointField&lt; VectorDual, T, MemorySpace &gt; &amp;pField)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b23ae61614b6ee9621f02ba76f8919a</anchor>
      <arglist>(iOstream &amp;os, const span&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>SWAP</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a17b80dbe0659cde09c2988647271f46f</anchor>
      <arglist>(Type &amp;x, Type &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7cab1ce81a510fab054e64c0e6323375</anchor>
      <arglist>(iIstream &amp;is, symArray&lt; T, MemorySpace &gt; &amp;iArr)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a575e57396e2c4398e172724566a1d2c7</anchor>
      <arglist>(iOstream &amp;os, const symArray&lt; T, MemorySpace &gt; &amp;oArr)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fa01a37e2aa260e53329fb57750e71c</anchor>
      <arglist>(iIstream &amp;is, triSurfaceField&lt; VectorField, T, MemorySpace &gt; &amp;tsF)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3e625e59cdaf2a71e1f7f3b28ae936f0</anchor>
      <arglist>(iOstream &amp;os, const triSurfaceField&lt; VectorField, T, MemorySpace &gt; &amp;tsF)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a15756de78c96b685e8ee7c47ddc5f634</anchor>
      <arglist>(iIstream &amp;is, Vector&lt; T, Allocator &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9656f525dc0c04f916f3e9d24ddc1f53</anchor>
      <arglist>(iOstream &amp;os, const Vector&lt; T, Allocator &gt; &amp;ovec)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3557595cfa50bcbd2098e44fe7da1bbd</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>count_if</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ba4960022e5995b2a43437d211d8f60</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;vec, UnaryPredicate p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_n</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7a3b9048cba8e3752d30ec81b2fe0cde</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, size_t n, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5fde7b7d3d438de86ad820bfa1e51b34</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adc26fdd8debb829267fac2761ddd2896</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, int32 start, int32 end, const T &amp;startVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1565789280599388321087cf22542144</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;startVal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e83353786d5cf3406a036b434c7df25</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>int64</type>
      <name>find</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af5cb98a7bdec142d1e7e1602c05f0589</anchor>
      <arglist>(Vector&lt; T, Allocator &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a530fa16f813e90c80006d8aaf5355192</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, T e)</arglist>
    </member>
    <member kind="function">
      <type>Vector&lt; T, Allocator &gt;</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a87a9eb6493b151788dca5f8967e1b06d</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, T e, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a79babacb046b083e7b9e5d68836dd299</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a39d86db514f10a64ba0af7f057a1370d</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa06b35ab4dd1964fcef892e4577d444f</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab9273a30482c1e7ba2dbf20b06f152c7</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a552cad803d8182425bdfed273022ef14</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a441347cea7fd5193e2e08913cb8776b8</anchor>
      <arglist>(const Vector&lt; T, Allocator &gt; &amp;v, indexFunc iFn)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae365f946ba158527dce13ebc6028119e</anchor>
      <arglist>(iIstream &amp;is, VectorDual&lt; T, memory_space &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5d93f8f8bd5616dd47c835267c84bced</anchor>
      <arglist>(iOstream &amp;os, const VectorDual&lt; T, memory_space &gt; &amp;ovec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4a352639c87f6f967c064f9e46c3495f</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e3b76cb1f11091ab9905cabc141a633</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecd5f39754707b589843d71cbb6b7d1c</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3c07a156ad839dccd59a9886a621e20c</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac13cdd53f8951fe2cf059730cad35ffb</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72a26112ed68f8f2e1e93ce23a5081e2</anchor>
      <arglist>(const VectorDual&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab4718df51d86110cdc720a35a2b9eed9</anchor>
      <arglist>(iIstream &amp;is, VectorSingle&lt; T, MemorySpace &gt; &amp;ivec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af7561741d1d25aaeb791389b07eb0bba</anchor>
      <arglist>(iOstream &amp;os, const VectorSingle&lt; T, MemorySpace &gt; &amp;ovec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H size_t</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1519b715db340d7153f1226c250afe10</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a764ec04ded3d5d6a8ea39597684c4b13</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a38f9fcaea58ef894338bd91a9730151b</anchor>
      <arglist>(const VectorSingle&lt; T, MemorySpace &gt; &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fac1751009535200c4b9149d8e203a8</anchor>
      <arglist>(iOstream &amp;os, const iEntry &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ac5d731b3cff8555665377859d300f0</anchor>
      <arglist>(iIstream &amp;is, iEntry &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTwoPartEntry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70a0d5a242b0aeaf4399e556a1b74828</anchor>
      <arglist>(dataEntry entry)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8f03ae73e81fe970f3bb40f15d55a2d3</anchor>
      <arglist>(iOstream &amp;os, fileSystem fs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a561119659a57977cfa140aac28d157eb</anchor>
      <arglist>(std::ostream &amp;os, fileSystem fs)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>operator/</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a876ef3ad73dadbed86887793dd7d40d5</anchor>
      <arglist>(const fileSystem &amp;fs1, const fileSystem &amp;fs2)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>operator+</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5cd91fb7db40f36f823898effd91fc67</anchor>
      <arglist>(const fileSystem &amp;fs1, const word fName)</arglist>
    </member>
    <member kind="function">
      <type>fileSystem</type>
      <name>CWD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24c8de74cc53b1986586b12a3d9c4c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDirectory</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a646799ea535c7800d608f750bed76a1e</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegularFile</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8a2c4dd123ea5ac20d0a98d5076e510</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fileSystemList</type>
      <name>subDirectories</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae21b012a6bc672b99ddbb629f4ecce09</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>fileSystemList</type>
      <name>containingFiles</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a79c4a81c7fb0a27aabdb1b4a73c750d8</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa6ef94fb046f74a2580c8d7e695f8da9</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addfa331fa163610ea1cedfe6687ce88f</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85e4897a738750647159b7374c05420a</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max_serial</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a728d6ba43de441d524807563f8268eda</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_to_each</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5219e225445b431ccafbd9c9b675574e</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, size_t start, size_t end, UnaryFunction func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e12e7861c2afbc73acbb2e814b7642f</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementH</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d5136b2707ba1c161af4b81e75ad542</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, hostViewType1D&lt; label &gt; &amp;selected, hostViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4cf8ba03f73728309c6938699408c0c2</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSetElementD</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aef2fbc34daba7df395b6c273f52a1826</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, deviceViewType1D&lt; label &gt; &amp;selected, deviceViewType1D&lt; T &gt; &amp;vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a31fbbbba3636e6afffe20637614dc047</anchor>
      <arglist>(ViewType3D&lt; T, properties... &gt; &amp;view, range range1, range range2, range range3, T val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool constexpr</type>
      <name>isHostAccessible</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8dcbb90aa6c0eb7fc8a56381ecd40b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool constexpr</type>
      <name>areAccessible</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac29d97368096459d9f8203134aebd416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>realloc</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae79d45845d9fdbadabd92fcf60208321</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocNoInit</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76e9c7671124c8e455dac96b3e80104</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocFill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a87b1994876b63bfc5b17ada18fb001ce</anchor>
      <arglist>(ViewType1D&lt; Type, Properties... &gt; &amp;view, int32 len, Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>realloc</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a819ffa2739b2e4b9b104263649046d1d</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocNoInit</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad8f777f7c8cb08a0f6416ffaabe89ddc</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>reallocFill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a58d8994b3edc7d2388745b834bbb2063</anchor>
      <arglist>(ViewType3D&lt; Type, Properties... &gt; &amp;view, int32 len1, int32 len2, int32 len3, Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>swapViews</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4b09631f13732e351753fedd27aa5a04</anchor>
      <arglist>(ViewType &amp;v1, ViewType &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a054ed68ca44f0f66d733c1886d9703b4</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa09eb6213f3099d4f7a96e178409770f</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, range span, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae044c41d37cfe349ad7fd3cd6056e76e</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, T val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20ec4a643b3d2e600949c232833512ff</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, const Type startVal)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a650e12d57e1284f33310d65b88012e61</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; view, const ViewType1D&lt; indexType, indexProperties... &gt; indices, const int32 numElems, const Type val, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; indexType, indexProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab3ee809e4824affe2a157c049df1032e</anchor>
      <arglist>(ViewType1D&lt; Type, properties... &gt; view, const ViewType1D&lt; indexType, indexProperties... &gt; indices, const ViewType1D&lt; Type, indexProperties... &gt; vals, const int32 numElems, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; indexType, indexProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5307186f0f9e8a2bcd261164622237a</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H T</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a94ce03cd713ad919d25e8d18b42087bb</anchor>
      <arglist>(const ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copy</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8b768a1c864cc2bb70654f13658bfe2</anchor>
      <arglist>(const ViewType1D&lt; dType, dProperties... &gt; &amp;dst, const ViewType1D&lt; sType, sProperties... &gt; &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>copy</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9b4dd5f0cb716f266f7ecaeaa6ad5343</anchor>
      <arglist>(const ViewType1D&lt; dType, dProperties... &gt; &amp;dst, int32 dStart, const ViewType1D&lt; sType, sProperties... &gt; &amp;src, int32 sStart, int32 sEnd)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>getNth</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6067197103462efadde182ad24c15043</anchor>
      <arglist>(dType &amp;dst, const ViewType1D&lt; sType, sProperties... &gt; &amp;src, const int32 n)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad106d9b3e9f9c49072d47270588b779d</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a60100c7604a5e87f0dfe406a48e268b7</anchor>
      <arglist>(ViewType1D&lt; T, properties... &gt; &amp;view, int32 start, int32 end, CompareFunc compare)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>permuteSort</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a848b1079d9d39e5cc44191400b07ee11</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; permType, permProperties... &gt; &amp;permuteView, int32 permStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; permType, permProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>binarySearch</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27fabd295f904bd95747f1b226504787</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5bc7e6b0ed0f142fb5483d60353f1071</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; dType, dProperties... &gt; &amp;dView, int32 dStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; dType, dProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a053d70e7f2637a71b31ca8178cd4e3f2</anchor>
      <arglist>(const ViewType1D&lt; Type, properties... &gt; &amp;view, int32 start, int32 end, ViewType1D&lt; dType, dProperties... &gt; &amp;dView, int32 dStart, typename std::enable_if_t&lt; areAccessible&lt; typename ViewType1D&lt; Type, properties... &gt;::execution_space, typename ViewType1D&lt; dType, dProperties... &gt;::memory_space &gt;(), bool &gt;=true)</arglist>
    </member>
    <member kind="function">
      <type>systemControl &amp;</type>
      <name>Control</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a50f04f0f9586805ff6dddfcc7662bb2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; real, fileSystem &gt;</type>
      <name>getTimeFolders</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0185ce2b0b0638b6c91658209dfb5965</anchor>
      <arglist>(const fileSystem &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>uniquePtr&lt; T &gt;</type>
      <name>makeUnique</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70707830e4ab7b019a06fa8fb81b22aa</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aac0232c0fb4c7e7814d60a2f870be426</anchor>
      <arglist>(iIstream &amp;is, iIstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad77cabbc35dc80d8dd705c13cf75ef12</anchor>
      <arglist>(iIstream &amp;is, IOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac08e23027fc74d4f881e8ad3e4d9db21</anchor>
      <arglist>(iIstream &amp;is, word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a921dd53420ed0734c3b39bda4e0c5c28</anchor>
      <arglist>(iIstream &amp;is, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a52660d6f2ac862449db403265aeb0c56</anchor>
      <arglist>(iIstream &amp;is, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4fb5854d0262d1237f81429cd47295bf</anchor>
      <arglist>(iIstream &amp;is, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a128ebacd4d96f2530ff3e2d4ad581a61</anchor>
      <arglist>(iIstream &amp;is, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a38e592457b0d535b69efb71ad8bbaa72</anchor>
      <arglist>(iIstream &amp;is, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7b3db444dc5de2c6f9b04619f101a8b3</anchor>
      <arglist>(iIstream &amp;is, uint16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a319d3948b8f830a8437b8f65302bfcf1</anchor>
      <arglist>(iIstream &amp;is, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac8632ed95909b251fdf0a1930d4bcbd6</anchor>
      <arglist>(iIstream &amp;is, float &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2d598a5aee547602a34bd82a50d1556a</anchor>
      <arglist>(iIstream &amp;is, double &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>dec</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa4abd96d6b16d8d3edf1aaa683287885</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>hex</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a61898cd556b536d4a3a0186db58edc95</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>oct</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27fe476459b11c5cf31b14964af0b778</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>fixed</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a27514cebd8cf580ab1542de4987dcc5e</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>IOstream &amp;</type>
      <name>scientific</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a673a8994589e03d22173c174a177a468</anchor>
      <arglist>(IOstream &amp;io)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7c5ed6baf7780c1288b85850a88a1a1b</anchor>
      <arglist>(iOstream &amp;os, iOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a72c6da019f67f122aca767569be3790d</anchor>
      <arglist>(iOstream &amp;os, IOstreamManip f)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>indent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a771426c520433b44d064abfba99e7d3b</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>incrIndent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9472d0835833973e08d55a584b0f72cb</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>decrIndent</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0862d4bdcfbd8e9c28a7615620dbd725</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>flush</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aecdc6aec9989d154a9a441cf2332a22a</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endl</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa93b0be68d3fca7a3251370461d32b93</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>beginBlock</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad0a5f7cc3824e5d1a075ef65edaffaf3</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endBlock</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a699a4c3c531b828349e71e076278a4b5</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>endEntry</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adf6968e144d576d71ecbb33581e4c8c1</anchor>
      <arglist>(iOstream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18e0e63cfd5a43dbd818bc9ba3c95ea4</anchor>
      <arglist>(iOstream &amp;os, const char c)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe1b54c485a9610062bc78a0aff0cada</anchor>
      <arglist>(iOstream &amp;os, const char *buf)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3be41eee8252971b5653ba758d0f1f49</anchor>
      <arglist>(iOstream &amp;os, const word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5f6c2fe89a555c0b6a0cf87c9644fb8c</anchor>
      <arglist>(iOstream &amp;os, const int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a802e15ffc516724ec05c42e064f36f38</anchor>
      <arglist>(iOstream &amp;os, const int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa1ffaef220f152e755d2e7bc341a5fcb</anchor>
      <arglist>(iOstream &amp;os, const int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad283e6f478c448eb887346ecefccec59</anchor>
      <arglist>(iOstream &amp;os, const int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8edcc9a74745baa9ed2fcf85a4a19635</anchor>
      <arglist>(iOstream &amp;os, const label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae5a1ceadd9165e333daa78deb31adad6</anchor>
      <arglist>(iOstream &amp;os, const uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a10c1b2b365abacb6969c7d673d5e0471</anchor>
      <arglist>(iOstream &amp;os, const uint16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e60c3debd1c7f388320d095defabb96</anchor>
      <arglist>(iOstream &amp;os, const float &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4c64ce85fc72db129184fea72ccace40</anchor>
      <arglist>(iOstream &amp;os, const double &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a32cadb9b5aab88eec41a8f98ac814670</anchor>
      <arglist>(iOstream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad26e60e655d7da2a3d92ceb1d65b7803</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aad6fdf0dc827f1d5bbdc050b7679946a</anchor>
      <arglist>(iOstream &amp;os, const token::punctuationToken &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad5ef8f809f4348f5e3e690ce283d615e</anchor>
      <arglist>(std::ostream &amp;os, const token::punctuationToken &amp;pt)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac605baf9cfa833f7b7742b86b1a2f84b</anchor>
      <arglist>(std::ostream &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endListToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa5b92efd594cabf5fe06cc47cf66716b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>beginListToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a44f368c69dca989c81253f824162c855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endStatementToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a494fac648089d3c9622654fca067ee8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>beginBlockToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adad4fbeaccf24522e4896b841314619f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>endBlocKToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbe5eb257d2a7fa73e109c6c20f457a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>spaceToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6fe2383b71bc53e3d639f39d3e5f9c5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>token</type>
      <name>newLineToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0afc8cb9b66f9ac512e6a6d4e6028402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static OS &amp;</type>
      <name>printTokenInfo</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6ec63dd4ba3928f4de668c9f1639ade9</anchor>
      <arglist>(OS &amp;os, const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validTokenForStream</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0a312db11262484e0216af6c618d43dc</anchor>
      <arglist>(const token tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBeginToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af05c433191cc653e68d17345d392acf8</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEndToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab25086a03d5bdef146887d8720c647fd</anchor>
      <arglist>(const token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8f40540d0635b2db27fcbcea4ef245f1</anchor>
      <arglist>(iIstream &amp;is, box &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3a42e5302e4199ae432f608388556cae</anchor>
      <arglist>(iOstream &amp;os, const box &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD box</type>
      <name>extendBox</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1cbf98adb416c288201dec2279ce5747</anchor>
      <arglist>(const box &amp;b, const realx3 &amp;dl)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a11e1bf8e738755b5701a8b2916973fc0</anchor>
      <arglist>(iIstream &amp;is, cylinder &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3217909c9fce49566e30897d8a62f15d</anchor>
      <arglist>(iOstream &amp;os, const cylinder &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5953fc86527c5ed949522cdca56d48e6</anchor>
      <arglist>(iIstream &amp;is, iBox&lt; intType &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18110349cc0c99d8f73e2aaa38de6f81</anchor>
      <arglist>(iOstream &amp;os, const iBox&lt; intType &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeae74018dcb9f2df8de8b613822464bb</anchor>
      <arglist>(iIstream &amp;is, sphere &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>FUNCTION_H iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a228f83da6a529a41deb02045c61fbfe7</anchor>
      <arglist>(iOstream &amp;os, const sphere &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7378c1c75236b0141aadffde524327b9</anchor>
      <arglist>(iIstream &amp;is, multiTriSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7832f3a37e0c2bf2b478ec98cb22f851</anchor>
      <arglist>(iOstream &amp;os, const multiTriSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>badInput</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a49c49257b0c309a00ffed5e843ed00e9</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkWordToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad763a29d354efbf92abd207ccfb4c238</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok, const word &amp;check)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNumberToken</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a137d5c2cd72f380dc723d5ba66aeeaa4</anchor>
      <arglist>(iIstream &amp;is, token &amp;tok, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac2d6d14bc3cf5505e7872575334e6307</anchor>
      <arglist>(iIstream &amp;is, triSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa98f31101d4a03ad69e2b7d793597d13</anchor>
      <arglist>(iOstream &amp;os, const triSurface &amp;tri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>MatMul</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0dc3a6e38c4eda1718bb81a1a28e91dd</anchor>
      <arglist>(T(&amp;A)[nRow][nInner], T(&amp;B)[nInner][nCol], T(&amp;C)[nRow][nCol])</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignMat</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a93010698fb6068b606d0af3e1f77877c</anchor>
      <arglist>(T(&amp;A)[nRow][nCol], T(&amp;B)[nRow][nCol])</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a23b14efdd5860d0f4650c69891aa7057</anchor>
      <arglist>(iOstream &amp;os, const Timer &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca6583353dac3e51144b03e42bb2dfa7</anchor>
      <arglist>(iIstream &amp;is, Timer &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4e362c5ea5f34e63cf60f5b67d471980</anchor>
      <arglist>(iOstream &amp;os, const Timers &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbd3b0e2e4643ff35cc4e22a4e731aea</anchor>
      <arglist>(iIstream &amp;is, Timers &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>const word</type>
      <name>whiteSpace</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c14e09980c6a69931dc984377f457e8</anchor>
      <arglist>(&quot; \t\n\v\f\r&quot;)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>countChar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a70fd022fd4f5be45fe00cf268bc4edad</anchor>
      <arglist>(const word &amp;s, const char c)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>countChar</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a08fa27802ee4a4258de9d487feffc503</anchor>
      <arglist>(const char *s, const char c)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>toUpper</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a85d082a1fd1aa0dd5be3e779502475a7</anchor>
      <arglist>(const word &amp;inStr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isYes</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade4b0a8390425fb1866e9540c27ff4e2</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNo</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a368046a383a0c4ab07960f9acdc46145</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2Fixed</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2468d40e6d50e0ecb071a5a675562faf</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2Word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac031fc8dbe057073f2b5ae5ad986bda4</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>removeDecimalZeros</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8a721cd37f226035a59b780dc7f48194</anchor>
      <arglist>(const word &amp;str)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>real2FixedStripZeros</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae474b7f0286e7a2523932f39bddf03fd</anchor>
      <arglist>(const real &amp;v, int32 numPrecision=6)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>int322Word</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a321d0334d760ce5f842a6269a00c2aa5</anchor>
      <arglist>(const int32 &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af4e1df8908797640749fa02e2f5db7a7</anchor>
      <arglist>(const word &amp;w1, const word &amp;w2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames2</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afe403b837013166b7f41881dded792a8</anchor>
      <arglist>(const word &amp;base, const word &amp;w1, const word &amp;w2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>angleBracketsNames3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5604622b0a1df3bcc1b8b872c0b9d5fa</anchor>
      <arglist>(const word &amp;base, const word &amp;w1, const word &amp;w2, const word &amp;w3)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>groupNames</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a12b4d93aa9730629403d73e84386bff5</anchor>
      <arglist>(const word &amp;bw, const word &amp;tw, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>baseName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a16a2137651b2c6b8ea4a8daf1d89ff61</anchor>
      <arglist>(const word &amp;w, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>tailName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af771f81a015bdf8ae8472d37a4d76d0e</anchor>
      <arglist>(const word &amp;w, char sep=&apos;.&apos;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a36795508123244e02c49855cd7d5dcd6</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWordWithQuote</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab040d9291e355fe8f846e4677dc96e03</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a382590308860701550dd9f325ccb43f1</anchor>
      <arglist>(const word &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>validWordWithQuote</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa0d361c39ae7e7d621d85ede0606bd34</anchor>
      <arglist>(const word &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLabel</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6406b648686498692a55b23534ea8895</anchor>
      <arglist>(const word &amp;w, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readLabel</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1d0230fc994c0e88936d13ae3fd7f2d</anchor>
      <arglist>(const char *buf, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c09d609fdab431b8f9cf7bc2f6af9f4</anchor>
      <arglist>(const word &amp;w, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readUint32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a60d11c9c773378334ab6266d3bc6a093</anchor>
      <arglist>(const char *buf, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9acdc80931dc1f33a613fc4bb301cc7</anchor>
      <arglist>(const word &amp;w, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ade0d09fe206cdeb50bf1e3e3b0d88828</anchor>
      <arglist>(const char *buf, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae2271da7154e227782193de61ffc2b9e</anchor>
      <arglist>(const word &amp;w, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a110c29a84b83fce8a6cbf135f76922ef</anchor>
      <arglist>(const char *buf, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a703a5f01363ec784ea0d2b08540d036c</anchor>
      <arglist>(const word &amp;w, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt16</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa7da7d853dfdb71dbf539378881499d6</anchor>
      <arglist>(const char *buf, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a534f46532ab400cf3abcbd64b8d01076</anchor>
      <arglist>(const word &amp;w, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readInt8</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8c2dbcf52528852f5272713f511ea848</anchor>
      <arglist>(const char *buf, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readReal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8acdba4ad9d3d292222d853598e90b5b</anchor>
      <arglist>(const word &amp;w, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readReal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaba5935e0e70991c73963de74f4fd166</anchor>
      <arglist>(const char *buf, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBoolian_Str</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad14acab072635ba3fa539283f602b1a5</anchor>
      <arglist>(const word &amp;w, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readBoolian_Str</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b21bca45af1cb585025a7953f0de445</anchor>
      <arglist>(const char *buf, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6540794351dd8f67fab4c5132f6eb8d5</anchor>
      <arglist>(const word &amp;w, real &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab10ec635faaaa011856b44c4df5577ed</anchor>
      <arglist>(const word &amp;w, label &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a57355b0ba1c496a48b7e6b20514bd564</anchor>
      <arglist>(const word &amp;w, uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a16c2739b9be3e448a9630971e5b7a358</anchor>
      <arglist>(const word &amp;w, int64 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aadec1b5606bf7535783a0d95b608b56d</anchor>
      <arglist>(const word &amp;w, int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab37c0d087dc3387384d8a3368a578ced</anchor>
      <arglist>(const word &amp;w, int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af63694f584a9cbaac903f25431263c4d</anchor>
      <arglist>(const word &amp;w, int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>add44cb524ba01de038071c5227ccc304</anchor>
      <arglist>(const word &amp;w, bool &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8527eb6b5dd7b0ff878c7fe009307d11</anchor>
      <arglist>(const real &amp;s1, const real &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac40a32ef42b101fdb9f800fdce151d6d</anchor>
      <arglist>(const int64 &amp;s1, const int64 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9c851a520eb0abb8e9db47b50372e337</anchor>
      <arglist>(const int32 &amp;s1, const int32 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4905ca22677d98ea1a443d3543305b2b</anchor>
      <arglist>(const int16 &amp;s1, const int16 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a23e95878f3ebbf57b0849c572c22a521</anchor>
      <arglist>(const int8 &amp;s1, const int8 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad978ac1bb53a0584564810aabefa8555</anchor>
      <arglist>(const uint32 &amp;s1, const uint32 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a313ccd90e087cb23e53485d2c1e7ed54</anchor>
      <arglist>(const label &amp;s1, const label &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION bool</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a41c5429e213a3eaeebeb1dec909d8767</anchor>
      <arglist>(const word &amp;s1, const word &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>degree2Radian</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9e670b16ecc01fd78e29a0bde333ebe1</anchor>
      <arglist>(const real &amp;theta)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>radian2Degree</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a84c596f05446b8fac16599796222e826</anchor>
      <arglist>(const real &amp;phi)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>floatingPointDescription</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2816afe03086403243c842aab71d5861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iIstream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3317c6444777cc7927e1fab71586c38c</anchor>
      <arglist>(iIstream &amp;is, Logical &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>iOstream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa4c729882ee9c05e504021ba6c0ed08f</anchor>
      <arglist>(iOstream &amp;os, const Logical &amp;L)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af5c3201dc66f66e8516c3769bf0a9c72</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac33071888037c59fa7c970065f9c80f8</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>abs</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad206ee78176e37c1a38f69b7488d0f84</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2652a8adcb3853fc3fc2efc610665d67</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adf843c10827fbe2b15693e8d5bd85e80</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0ffddf5f6d4fd2b7fc48d61843c2417d</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac335fecc3431c55687baacdebae54ddf</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>mod</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5ff38166aafbd2d1e4fc3c6642a29688</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>remainder</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1da5441ef799ff99fb9271d1c578f9f9</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>exp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9c8165b034f2d37407b1348417b66dc1</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>log</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7ce3408cc7a0ef98e06730526dca6dea</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>log10</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6e6a4f3f14c6487adc030f140019d51f</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>pow</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5f8078437f457cd79584e1a0bca182d5</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sqrt</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa8ba019369ee26f79816baedbcf5ab1b</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cbrt</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af0406aca2746ef3d8f09567f3ff086ae</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sin</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaec3d4670bd93130e51fdc1703d4eca7</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cos</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1289d40e1a3f301bc5b2bfca5b9eab49</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>tan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5ab7a371316ac7dead80f9ee74004d0a</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>asin</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af1e9a058098382fe6e67a2f9f4437089</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>acos</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6607d72e440941b45ad1d7a3afc45662</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atan</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5e83a7dc3dbc31d8d46eaacc033cedee</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atan2</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9a1f58dc254fb677cf96c8b0ee06e4bd</anchor>
      <arglist>(real y, real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>sinh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c74be74564d8f81b52649f09adcfcc4</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>cosh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae72356317ae5bd906193eccc57f00207</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>tanh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a99866106e1dc195d1cb44dd9e6756f37</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>asinh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d36a3042b87b76148339f852327a041</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>acosh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8b7959529c76cffccb4b563651cbca21</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>atanh</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a50ddc0fc5f1e2a10bb95afdf60eb9ef5</anchor>
      <arglist>(real x)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a408a64511c91d8f580ff811399c3356e</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbd015eb73fb40b84632dc033eee9ad5</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a10c3e710c08e9f0c29927d8995ee31be</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD label</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8cfd766a28eca7d1f3a4c20a308d265c</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abe4457d9f895431c0066e5368bd5708f</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>min</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a71cec2d477cf281ce2a29c4c3b8e2a71</anchor>
      <arglist>(uint16 x, uint16 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac22ca81e2ca42d334dfe3ed7d34d6055</anchor>
      <arglist>(real x, real y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int64</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d4d388909669c5de2889a6dfbab3178</anchor>
      <arglist>(int64 x, int64 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7012838955fdaa0cf26df5c16b079750</anchor>
      <arglist>(int32 x, int32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD label</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aca68b837b3417fc1f0cbe7d485982f87</anchor>
      <arglist>(label x, label y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a74427c9beb51f8694e6ba06045445be2</anchor>
      <arglist>(uint32 x, uint32 y)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD uint32</type>
      <name>max</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0c1f90bde7b70b3019f64a59fd4d3557</anchor>
      <arglist>(uint16 x, uint16 y)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>largestNegative</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8027dc1514971110c285287710cdb4d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>epsilonValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a20dda42518b4d7efa83894dd8c03837c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>largestPositive</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addcdc03bd99ad783ecb6b153618fc16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool INLINE_FUNCTION_HD</type>
      <name>equal</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af76cdb691bdbc24f036cfccc1909f8b6</anchor>
      <arglist>(const triple&lt; T &gt; &amp;opr1, const triple&lt; T &gt; &amp;opr2)</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int8x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6f3cf7f609a19e6fe31b649db2bfb62b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int16x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adbef1e14f97155fe78a4d51b366d5209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int32x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae1cc00f5b3bea6807179543041168f84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int64x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa73e31985ac01733cc82ce9ba3078f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint16x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeaf8eb316ed6b7edaf24b2615a8b3be9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aec7d9b1f395ffb19215ac1efd2e0ea0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; labelx3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a2247795cc0391bc7e1741cdc47df307a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; realx3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a77a738816b2f4f66da5a9f4b93078a83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint16x3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a658d0964156cb6785b1973553d3ce0e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32x3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ae065936299c3ae6b785e0b03d8df931d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; realx3x3 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a53e8e9a9f85f4aac50934b02494f311f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; real4 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a73955c007b74e23e6eb444a08377e434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a96a935a241e80c0dd523c89ea24d779a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; word &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0119afd50d7be92bed5ab304a173d6fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int64 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab50f06970285a8f65ac711935f5e2afd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int32 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8371ebdd914139cfaabd65ca652fc297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int16 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a21c8812099ded38623cc7f645ed173a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; int8 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af1bf25a53c3993764078aca601dd14df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; label &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac9883d9e82782ba1af4554594820b777</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; uint32 &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa14a780de6cb2ca62a1aeae40531d726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>word</type>
      <name>basicTypeName&lt; real &gt;</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeb53cd6616f7fa6a1217be479d4fbaee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a18d035dcd7688959e87d9b11b1cd7fcd</anchor>
      <arglist>(Type2 *object)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkType</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1df5c5957e14c4059b71ab59ecebdeeb</anchor>
      <arglist>(Type2 &amp;object)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24885cb190423b898df97b7a7e84942a</anchor>
      <arglist>(ContainerType &amp;pairs, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>findCollisions</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a682fb753426153c0041a7cd7df274e45</anchor>
      <arglist>(int32 num, realx3Vector_HD &amp;points, real diam)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>applySelector</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeef07d636cc2337061942731230363cc</anchor>
      <arglist>(systemControl &amp;control, const pointStructure &amp;pStruct, const dictionary &amp;selDict)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>geomObjectToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7fa0374f49d37b2bc796a915e27fbe9f</anchor>
      <arglist>(IOfileHeader &amp;header, real time, fileSystem destPath, word bName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbba7e0fb8bb2ce9160a18735400db51</anchor>
      <arglist>(vtkFile &amp;vtk, const Type &amp;dataEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaf677e2ac1decf3292aac36c9a1743b8</anchor>
      <arglist>(vtkFile &amp;vtk, const triSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>dataToVTK</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a8a8ae6c4e5f37d7ad7d108e2c0d225ff</anchor>
      <arglist>(vtkFile &amp;vtk, const multiTriSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillPoints</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa503d7002ea275748ff24d927649babc</anchor>
      <arglist>(uint numPoints, realx3 minP, realx3 maxP, realx3Vector_HD &amp;points, int32Vector_HD &amp;flags)</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField_H&lt; T &gt;</type>
      <name>sumOp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa132305e9c3dc0b05e974942a9c53adf</anchor>
      <arglist>(const pointField_H&lt; T &gt; field, const pointRectCell &amp;pointToCell)</arglist>
    </member>
    <member kind="function">
      <type>rectMeshField_H&lt; T &gt;</type>
      <name>sumMaksOp</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adae0d473692798f767ce9f72165648d4</anchor>
      <arglist>(const pointField_H&lt; T &gt; field, const pointRectCell &amp;pointToCell, const incMask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abadb5056881c5015a1737b35a693874b</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; T &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1466b874acbb83c78b033fbe6f8b9653</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; real &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab95d54e8b89f59941d32a4babd78139e</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; realx3 &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRectMeshField</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af9ef7add050361760dd515e40326d3b6</anchor>
      <arglist>(iOstream &amp;os, rectMeshField_H&lt; int32 &gt; &amp;field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNormalVec</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>addeddcb2e5fbe6fdcc653fefa7106bf5</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, realx3 &amp;norm)</arglist>
    </member>
    <member kind="variable">
      <type>const auto</type>
      <name>ActivePoint</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1df94b262ac1e47891251788a9646f4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const double</type>
      <name>vectorGrowthFactor__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>acfa3f2ec2e5e10585fb442131312fde1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ab01a72a174f7805c64e1a469e7b0aa84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aaa05db74f6b79b9e9a27bdcf6f2a6a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>caseSetupFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e232a46497a465f2b9a26a85763479e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>caseSetupRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9e12d96cf1434d9b7a03a2d53eee4af3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>geometryFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abb4cc5ad7c1a551313299d97e316f5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>geometryRepository_</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5a160cf6aed6bc212d4f37ef686c26de</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>integrationRepository__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6bab1cfefa5b122e0f141eb18a3e55a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>integrationFolder__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a28e84e55f10a623071845a7765bf8d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>settingsFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a505284f14a1a0fde29941025cb29c2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>insertionFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a62955dba3ac8eafe4cf89b83d917d38f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>sphereShapeFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a48979f81009e9bd8c6324e71533025f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>pointStructureFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7ce9af76cf5b5484f34c8e341dfe6416</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>triSurfaceFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a51910004819819cd11ae26508254ffff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>createParticles__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a3a366f2969c1a15cee5c094bb1b170d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>motionModelFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afa0d4199a6b9ad7e56d42f72f65756f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>contactSearchFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a95336277204d1868085127ba9a1b6cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>propertyFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a1c8ebc869fedceda194a424fd70dbd9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>interactionFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4a9012e5fd13ea2e176fb32ec9b50753</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>postprocessFile__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adafff6a400d0271a608a32eb96b6c208</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>uniform__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a848bdaed73601f3e073585ee847e63ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>nonUniform__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7d4a935053433a235abbbc6258dc4ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_t</type>
      <name>maxSizeToSerial__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac46039fa2cecc2d2292a6d256a3aacd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>tab</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afce5c7cfed2d53e6b1fd9293ef336934</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr char</type>
      <name>nl</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>afbf3861e53bc13fd6c82d9eae8f97378</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ostream</type>
      <name>output</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a86ae30c22a4ef4bc487b40ed52f4d2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Istream</type>
      <name>input</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a01c5a99f17466741d1fcfbc8144fad91</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Ostream</type>
      <name>errReport</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7e835264dcf9974fe0c8a94bec3c7ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>zero</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a69f7468c5e958bdc873c8e02d50464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>one</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a198bf8e0d35e416c7c56b33e4fcf168e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>zero32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac1501915b5dce87394aa0172c840457f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>one32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a7630ff09ef708c51ccd5c61047b5057a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const word</type>
      <name>nullWord</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa3bcf6b40c03df25c0fbdfbff6be807f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>floatingPointType__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a436834590374d8a1c62a0e5177dd6ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>usingDouble__</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a0aa0e57d6b3e0070b58fcf87a7e439ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>Pi</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a5fde17044bd1d2599c2e8c5aba9fb346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>smallValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>abfbb7af55004f8113864a4da90c43545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>verySmallValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a6bfee6221ffe685c9007604c7e71b305</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largeValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a66263d59f896f4b8524b0a1f0181f8b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>veryLargeValue</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a9d1b590d78ffef4b20c7daa1648bd9e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>largestNegInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a4ee2c88d6e9faceb7ece2b2ccd2942ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int32</type>
      <name>largestPosInt32</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>adb5cbd180a96327fd58897cbd8faa670</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int64</type>
      <name>largestNegInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>af93fb0b34c3207958168f68beb526df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int64</type>
      <name>largestPosInt64</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad91d579ce4d1ed156f09c96be1620393</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largestNegREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a332d59fc35731448fa9ae68ae6916cb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>largestPosREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a612aecd846561dc446c4cf94ffbce115</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const real</type>
      <name>epsilonREAL</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac6b82e272ae0e23afb8f0c773a61d4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const realx3</type>
      <name>zero3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a477d522d35403bd985ae105bd759e9d1</anchor>
      <arglist>(0.0)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3</type>
      <name>one3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a24fc985ad36c00fec91d6a4dcfb143f2</anchor>
      <arglist>(1.0)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3</type>
      <name>zeroU3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aa6af5219042fbe2fd224f0085630be09</anchor>
      <arglist>(0)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3</type>
      <name>oneU3</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ad6a179a55c85740ab771170da5dc7824</anchor>
      <arglist>(1)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3x3</type>
      <name>zero33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac264180ae461c79d1b0daca0236072ca</anchor>
      <arglist>(zero3)</arglist>
    </member>
    <member kind="variable">
      <type>const realx3x3</type>
      <name>one33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>aeea498891f1be291bb476c4f440fcdbd</anchor>
      <arglist>(one3)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3x3</type>
      <name>zeroU33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac7c77472debb56ed05d3638d8faf6ea9</anchor>
      <arglist>(zeroU3)</arglist>
    </member>
    <member kind="variable">
      <type>const uint32x3x3</type>
      <name>oneU33</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>a031b666bdebdb7413bf2abb8690c6092</anchor>
      <arglist>(oneU3)</arglist>
    </member>
    <member kind="variable">
      <type>const real4</type>
      <name>zero4</name>
      <anchorfile>namespacepFlow.html</anchorfile>
      <anchor>ac28370ab27e2eb4a22f90e79a7a39ea7</anchor>
      <arglist>(zero)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::algorithms</name>
    <filename>namespacepFlow_1_1algorithms.html</filename>
    <namespace>pFlow::algorithms::KOKKOS</namespace>
    <namespace>pFlow::algorithms::STD</namespace>
    <class kind="struct">pFlow::algorithms::greater</class>
    <class kind="struct">pFlow::algorithms::less</class>
    <class kind="struct">pFlow::algorithms::maximum</class>
    <class kind="struct">pFlow::algorithms::minimum</class>
    <member kind="function">
      <type>INLINE_FUNCTION_HD int</type>
      <name>binarySearch</name>
      <anchorfile>namespacepFlow_1_1algorithms.html</anchorfile>
      <anchor>a6ba0df36be88e491f6cd31caa7ac00e6</anchor>
      <arglist>(const T *array, int length, const T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::algorithms::KOKKOS</name>
    <filename>namespacepFlow_1_1algorithms_1_1KOKKOS.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>acfddf7beb8695f7f108cd01701563094</anchor>
      <arglist>(const Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>aaa96ab75bf440739e2c21b5a9ac8b611</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;firstVal)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>ab917f5baded62dca1dfb1307a8d11058</anchor>
      <arglist>(Type *first, const indexType *indices, const int32 numElems, const Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a083a3e3dc71fa37bd66fb4cd3323b04e</anchor>
      <arglist>(Type *first, const indexType *indices, const Type *vals, const int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>max</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>abfe2952d5d87fffc1da563a4961e4dd7</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>min</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a7e1626da1764681b18826a5c8dd49767</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>a1f5b18868e4b2983e5d9f923a19a4635</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1KOKKOS.html</anchorfile>
      <anchor>aeb49e63c8960c86332ac6742eeb9c8de</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::algorithms::STD</name>
    <filename>namespacepFlow_1_1algorithms_1_1STD.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H int32</type>
      <name>count</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>acfddf7beb8695f7f108cd01701563094</anchor>
      <arglist>(const Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fill</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a3e1664e590e09c6aace3367fcb948f47</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>ab917f5baded62dca1dfb1307a8d11058</anchor>
      <arglist>(Type *first, const indexType *indices, const int32 numElems, const Type val)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSelected</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a083a3e3dc71fa37bd66fb4cd3323b04e</anchor>
      <arglist>(Type *first, const indexType *indices, const Type *vals, const int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>fillSequence</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aaa96ab75bf440739e2c21b5a9ac8b611</anchor>
      <arglist>(Type *first, int32 numElems, const Type &amp;firstVal)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>max</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>abfe2952d5d87fffc1da563a4961e4dd7</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H Type</type>
      <name>min</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a7e1626da1764681b18826a5c8dd49767</anchor>
      <arglist>(const Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aca59379e47f6bf3e21e97e841f3a321d</anchor>
      <arglist>(Type *first, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>sort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>adc262f5dc508d4be9b2dc64a48867542</anchor>
      <arglist>(Type *first, int32 numElems, CompareFunc compare)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_H void</type>
      <name>permuteSort</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a6206f7e81cad742c4b17d4e908e8d5a7</anchor>
      <arglist>(const Type *first, PermuteType *pFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>a1f5b18868e4b2983e5d9f923a19a4635</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inclusiveScan</name>
      <anchorfile>namespacepFlow_1_1algorithms_1_1STD.html</anchorfile>
      <anchor>aeb49e63c8960c86332ac6742eeb9c8de</anchor>
      <arglist>(Type *first, DestType *dFirst, int32 numElems)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::cfModels</name>
    <filename>namespacepFlow_1_1cfModels.html</filename>
    <class kind="class">pFlow::cfModels::linear</class>
    <class kind="class">pFlow::cfModels::nonLinear</class>
    <class kind="class">pFlow::cfModels::nonLinearMod</class>
    <class kind="class">pFlow::cfModels::normalRolling</class>
    <member kind="typedef">
      <type>normalRolling&lt; linear&lt; true &gt; &gt;</type>
      <name>limitedLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>acb81095a65f6cbc6b39e4da08e783c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; linear&lt; false &gt; &gt;</type>
      <name>nonLimitedLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>aac5659f99fc5c3659664decd9c88ea82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinear&lt; true &gt; &gt;</type>
      <name>limitedNonLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>ada54cbe072eb703c60b77326a78064e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinear&lt; false &gt; &gt;</type>
      <name>nonLimitedNonLinearNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>a2c226971020488a0989dcbff6e6815d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinearMod&lt; true &gt; &gt;</type>
      <name>limitedNonLinearModNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>a56788c7bedd45395167e0eb8f82600a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>normalRolling&lt; nonLinearMod&lt; false &gt; &gt;</type>
      <name>nonLimitedNonLinearModNormalRolling</name>
      <anchorfile>namespacepFlow_1_1cfModels.html</anchorfile>
      <anchor>ad69102df96c1b59bcb71504c7b284dc1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::PFtoVTK</name>
    <filename>namespacepFlow_1_1PFtoVTK.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>addInt64PointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ad96f820d5174271fdc60bd7731fb9629</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, int64 *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealPointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a572009305203cb57b4e901247dfae9ba</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, real *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealx3PointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ae537fc84534474c6d7247a36336d174e</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 numActivePoints, realx3 *field, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>regexCheck</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>af9d9dd3c6f90b434218a19e0ba56e351</anchor>
      <arglist>(word TYPENAME, word fieldType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFieldType</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ada516245a68fc176a71ee7453fe0da98</anchor>
      <arglist>(word objectType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertIntTypesPointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a9c45675264f0e208297936f3347254f2</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealTypePointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ae1b9e43ce4080c888751723556d9e31c</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealx3TypePointField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a911bb862ce5b6653f30da4dbc97feb23</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const pointStructure &amp;pStruct)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addUndstrcuturedGridField</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>aea431732ead1015cfefd418b87ece1b3</anchor>
      <arglist>(iOstream &amp;os, int32 numActivePoints, realx3 *position, IncludeMaskType includeMask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderPointFields</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>ad077a0ae4cc2645df34c303de5c46fba</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderPointFieldsSelected</name>
      <anchorfile>namespacepFlow_1_1PFtoVTK.html</anchorfile>
      <anchor>a4ed2bcdce99b0c172ed878986578acd9</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName, wordVector fieldsName, bool mustExist)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::pointStructureKernels</name>
    <filename>namespacepFlow_1_1pointStructureKernels.html</filename>
    <member kind="function">
      <type>int32</type>
      <name>markDeleteOutOfBox</name>
      <anchorfile>namespacepFlow_1_1pointStructureKernels.html</anchorfile>
      <anchor>aa54ffd5f0d26d2c4811749cebc48b7af</anchor>
      <arglist>(box domain, int32 start, int32 end, int8 deleteFlag, deviceViewType1D&lt; realx3 &gt; points, deviceViewType1D&lt; int8 &gt; flags, pointStructure::activePointsDevice activePoint, int32 &amp;minRange, int32 &amp;maxRange)</arglist>
    </member>
    <member kind="function">
      <type>int32</type>
      <name>scanPointFlag</name>
      <anchorfile>namespacepFlow_1_1pointStructureKernels.html</anchorfile>
      <anchor>a96dd4afd82f8d203643d933832b469cc</anchor>
      <arglist>(int32 start, int32 end, int8 activeFlag, deviceViewType1D&lt; int8 &gt; flags, int32 &amp;minRange, int32 &amp;maxRange)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::sphereInteractionKernels</name>
    <filename>namespacepFlow_1_1sphereInteractionKernels.html</filename>
    <class kind="struct">pFlow::sphereInteractionKernels::ppInteractionFunctor</class>
    <class kind="struct">pFlow::sphereInteractionKernels::pwInteractionFunctor</class>
  </compound>
  <compound kind="namespace">
    <name>pFlow::sphereParticlesKernels</name>
    <filename>namespacepFlow_1_1sphereParticlesKernels.html</filename>
    <member kind="typedef">
      <type>Kokkos::RangePolicy&lt; DefaultExecutionSpace, Kokkos::Schedule&lt; Kokkos::Static &gt;, Kokkos::IndexType&lt; int32 &gt; &gt;</type>
      <name>rpAcceleration</name>
      <anchorfile>namespacepFlow_1_1sphereParticlesKernels.html</anchorfile>
      <anchor>a9fa48474270a6882fba4b6f8e003aecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>acceleration</name>
      <anchorfile>namespacepFlow_1_1sphereParticlesKernels.html</anchorfile>
      <anchor>a0c2479747d0f081e8f45bd1774cdc627</anchor>
      <arglist>(realx3 g, deviceViewType1D&lt; real &gt; mass, deviceViewType1D&lt; realx3 &gt; force, deviceViewType1D&lt; real &gt; I, deviceViewType1D&lt; realx3 &gt; torque, IncludeFunctionType incld, deviceViewType1D&lt; realx3 &gt; lAcc, deviceViewType1D&lt; realx3 &gt; rAcc)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::sphTriInteraction</name>
    <filename>namespacepFlow_1_1sphTriInteraction.html</filename>
    <class kind="struct">pFlow::sphTriInteraction::pLine</class>
    <class kind="struct">pFlow::sphTriInteraction::triWall</class>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>pointInPlane</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>a5e496aab3bbefcf01f87c002cb7d7a17</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD void</type>
      <name>cramerRule2</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>aeaaa4e626ed9c02d58b67202ccd5b763</anchor>
      <arglist>(real A[2][2], real B[2], real &amp;x1, real &amp;x2)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>pointInPlane</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>ae26e6389cf4eee2692ca81143434623a</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;p, int32 &amp;Ln)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSphereInContactActiveSide</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>a2c9217db02760928f41cf66a7d46757f</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3, const realx3 &amp;cntr, real rad, real &amp;ovrlp, realx3 &amp;norm, realx3 &amp;cp)</arglist>
    </member>
    <member kind="function">
      <type>INLINE_FUNCTION_HD bool</type>
      <name>isSphereInContactBothSides</name>
      <anchorfile>namespacepFlow_1_1sphTriInteraction.html</anchorfile>
      <anchor>adfb1ec513d5af1a79c737caa28202347</anchor>
      <arglist>(const realx3x3 &amp;tri, const realx3 &amp;cntr, real Rad, real &amp;ovrlp, realx3 &amp;norm, realx3 &amp;cp)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::triangleFunctions</name>
    <filename>namespacepFlow_1_1triangleFunctions.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_HD real</type>
      <name>triangleSurface</name>
      <anchorfile>namespacepFlow_1_1triangleFunctions.html</anchorfile>
      <anchor>a4a5fdcaace8be93ad14d0994bcc2f7be</anchor>
      <arglist>(const realx3 &amp;p1, const realx3 &amp;p2, const realx3 &amp;p3)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::triSurfaceKernels</name>
    <filename>namespacepFlow_1_1triSurfaceKernels.html</filename>
    <member kind="function">
      <type>INLINE_FUNCTION_H bool</type>
      <name>calculateArea</name>
      <anchorfile>namespacepFlow_1_1triSurfaceKernels.html</anchorfile>
      <anchor>a605a728f5a58a4205ad0aa9d18178b4f</anchor>
      <arglist>(const realx3Field_D &amp;points, const int32x3Field_D &amp;vertices, realField_D &amp;area)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::TSFtoVTK</name>
    <filename>namespacepFlow_1_1TSFtoVTK.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>regexCheck</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>af9d9dd3c6f90b434218a19e0ba56e351</anchor>
      <arglist>(word TYPENAME, word fieldType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFieldType</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>ada516245a68fc176a71ee7453fe0da98</anchor>
      <arglist>(word objectType)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a38e01e196068c6975bec0fc1d98bdc51</anchor>
      <arglist>(iOstream &amp;os, const Type &amp;dataEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>aa85f928141cbbf9d5b60573b92aae3ca</anchor>
      <arglist>(iOstream &amp;os, const triSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>triDataToVTK</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>aa07efd76ef5cb68615c03e19911e72bf</anchor>
      <arglist>(iOstream &amp;os, const multiTriSurface &amp;surface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addRealx3TriSurfaceField</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a6a046c2567ff6cb9fef61c45c3689a1c</anchor>
      <arglist>(iOstream &amp;os, word fieldName, int32 size, realx3 *field)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertRealx3TypetriSurfaceField</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>ac9a55f8c74fcdebdc6246277c9093156</anchor>
      <arglist>(iOstream &amp;os, const IOfileHeader &amp;header, const multiTriSurface &amp;tSurface)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>convertTimeFolderTriSurfaceFields</name>
      <anchorfile>namespacepFlow_1_1TSFtoVTK.html</anchorfile>
      <anchor>a1de978df651d8857b01ee3ab363001ca</anchor>
      <arglist>(fileSystem timeFolder, real time, fileSystem destPath, word bName)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>pFlow::utilities</name>
    <filename>namespacepFlow_1_1utilities.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>pointFieldGetType</name>
      <anchorfile>namespacepFlow_1_1utilities.html</anchorfile>
      <anchor>acf75553dd9a47eb72613c04b98a1ee7d</anchor>
      <arglist>(std::string TYPENAME, std::string &amp;fieldType, std::string &amp;fieldSpace)</arglist>
    </member>
  </compound>
</tagfile>
